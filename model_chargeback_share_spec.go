/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the ChargebackShareSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargebackShareSpec{}

// ChargebackShareSpec ChargebackShareSpec specification
type ChargebackShareSpec struct {
	// shareEnabled
	ShareEnabled *bool `json:"shareEnabled,omitempty"`
	// shareType
	ShareType *string `json:"shareType,omitempty"`
}

// NewChargebackShareSpec instantiates a new ChargebackShareSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargebackShareSpec() *ChargebackShareSpec {
	this := ChargebackShareSpec{}
	return &this
}

// NewChargebackShareSpecWithDefaults instantiates a new ChargebackShareSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargebackShareSpecWithDefaults() *ChargebackShareSpec {
	this := ChargebackShareSpec{}
	return &this
}

// GetShareEnabled returns the ShareEnabled field value if set, zero value otherwise.
func (o *ChargebackShareSpec) GetShareEnabled() bool {
	if o == nil || isNil(o.ShareEnabled) {
		var ret bool
		return ret
	}
	return *o.ShareEnabled
}

// GetShareEnabledOk returns a tuple with the ShareEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackShareSpec) GetShareEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.ShareEnabled) {
		return nil, false
	}
	return o.ShareEnabled, true
}

// HasShareEnabled returns a boolean if a field has been set.
func (o *ChargebackShareSpec) HasShareEnabled() bool {
	if o != nil && !isNil(o.ShareEnabled) {
		return true
	}

	return false
}

// SetShareEnabled gets a reference to the given bool and assigns it to the ShareEnabled field.
func (o *ChargebackShareSpec) SetShareEnabled(v bool) {
	o.ShareEnabled = &v
}

// GetShareType returns the ShareType field value if set, zero value otherwise.
func (o *ChargebackShareSpec) GetShareType() string {
	if o == nil || isNil(o.ShareType) {
		var ret string
		return ret
	}
	return *o.ShareType
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChargebackShareSpec) GetShareTypeOk() (*string, bool) {
	if o == nil || isNil(o.ShareType) {
		return nil, false
	}
	return o.ShareType, true
}

// HasShareType returns a boolean if a field has been set.
func (o *ChargebackShareSpec) HasShareType() bool {
	if o != nil && !isNil(o.ShareType) {
		return true
	}

	return false
}

// SetShareType gets a reference to the given string and assigns it to the ShareType field.
func (o *ChargebackShareSpec) SetShareType(v string) {
	o.ShareType = &v
}

func (o ChargebackShareSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargebackShareSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ShareEnabled) {
		toSerialize["shareEnabled"] = o.ShareEnabled
	}
	if !isNil(o.ShareType) {
		toSerialize["shareType"] = o.ShareType
	}
	return toSerialize, nil
}

type NullableChargebackShareSpec struct {
	value *ChargebackShareSpec
	isSet bool
}

func (v NullableChargebackShareSpec) Get() *ChargebackShareSpec {
	return v.value
}

func (v *NullableChargebackShareSpec) Set(val *ChargebackShareSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableChargebackShareSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableChargebackShareSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargebackShareSpec(val *ChargebackShareSpec) *NullableChargebackShareSpec {
	return &NullableChargebackShareSpec{value: val, isSet: true}
}

func (v NullableChargebackShareSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargebackShareSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


