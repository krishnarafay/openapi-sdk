/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the UploadedHelmArtifact type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadedHelmArtifact{}

// UploadedHelmArtifact represents an Helm chart and zero or more values files
type UploadedHelmArtifact struct {
	ChartPath File `json:"chartPath"`
	// represents a Helm Values by their relative path
	ValuesPaths []File `json:"valuesPaths,omitempty"`
}

// NewUploadedHelmArtifact instantiates a new UploadedHelmArtifact object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadedHelmArtifact(chartPath File) *UploadedHelmArtifact {
	this := UploadedHelmArtifact{}
	this.ChartPath = chartPath
	return &this
}

// NewUploadedHelmArtifactWithDefaults instantiates a new UploadedHelmArtifact object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadedHelmArtifactWithDefaults() *UploadedHelmArtifact {
	this := UploadedHelmArtifact{}
	return &this
}

// GetChartPath returns the ChartPath field value
func (o *UploadedHelmArtifact) GetChartPath() File {
	if o == nil {
		var ret File
		return ret
	}

	return o.ChartPath
}

// GetChartPathOk returns a tuple with the ChartPath field value
// and a boolean to check if the value has been set.
func (o *UploadedHelmArtifact) GetChartPathOk() (*File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChartPath, true
}

// SetChartPath sets field value
func (o *UploadedHelmArtifact) SetChartPath(v File) {
	o.ChartPath = v
}

// GetValuesPaths returns the ValuesPaths field value if set, zero value otherwise.
func (o *UploadedHelmArtifact) GetValuesPaths() []File {
	if o == nil || isNil(o.ValuesPaths) {
		var ret []File
		return ret
	}
	return o.ValuesPaths
}

// GetValuesPathsOk returns a tuple with the ValuesPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadedHelmArtifact) GetValuesPathsOk() ([]File, bool) {
	if o == nil || isNil(o.ValuesPaths) {
		return nil, false
	}
	return o.ValuesPaths, true
}

// HasValuesPaths returns a boolean if a field has been set.
func (o *UploadedHelmArtifact) HasValuesPaths() bool {
	if o != nil && !isNil(o.ValuesPaths) {
		return true
	}

	return false
}

// SetValuesPaths gets a reference to the given []File and assigns it to the ValuesPaths field.
func (o *UploadedHelmArtifact) SetValuesPaths(v []File) {
	o.ValuesPaths = v
}

func (o UploadedHelmArtifact) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadedHelmArtifact) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["chartPath"] = o.ChartPath
	if !isNil(o.ValuesPaths) {
		toSerialize["valuesPaths"] = o.ValuesPaths
	}
	return toSerialize, nil
}

type NullableUploadedHelmArtifact struct {
	value *UploadedHelmArtifact
	isSet bool
}

func (v NullableUploadedHelmArtifact) Get() *UploadedHelmArtifact {
	return v.value
}

func (v *NullableUploadedHelmArtifact) Set(val *UploadedHelmArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadedHelmArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadedHelmArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadedHelmArtifact(val *UploadedHelmArtifact) *NullableUploadedHelmArtifact {
	return &NullableUploadedHelmArtifact{value: val, isSet: true}
}

func (v NullableUploadedHelmArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadedHelmArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


