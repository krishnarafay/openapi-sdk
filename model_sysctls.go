/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Sysctls type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sysctls{}

// Sysctls struct for Sysctls
type Sysctls struct {
	// Sysctl setting fs.aio-max-nr.
	FsAioMaxNr *int32 `json:"fsAioMaxNr,omitempty"`
	// Sysctl setting fs.file-max.
	FsFileMax *int32 `json:"fsFileMax,omitempty"`
	// Sysctl setting fs.inotify.max_user_watches.
	FsInotifyMaxUserWatches *int32 `json:"fsInotifyMaxUserWatches,omitempty"`
	// Sysctl setting fs.nr_open.
	FsNrOpen *int32 `json:"fsNrOpen,omitempty"`
	// Sysctl setting kernel.threads-max.
	KernelThreadsMax *int32 `json:"kernelThreadsMax,omitempty"`
	// Sysctl setting net.core.netdev_max_backlog.
	NetCoreNetdevMaxBacklog *int32 `json:"netCoreNetdevMaxBacklog,omitempty"`
	// Sysctl setting net.core.optmem_max.
	NetCoreOptmemMax *int32 `json:"netCoreOptmemMax,omitempty"`
	// Sysctl setting net.core.rmem_default.
	NetCoreRmemDefault *int32 `json:"netCoreRmemDefault,omitempty"`
	// Sysctl setting net.core.rmem_max.
	NetCoreRmemMax *int32 `json:"netCoreRmemMax,omitempty"`
	// Sysctl setting net.core.somaxconn.
	NetCoreSomaxconn *int32 `json:"netCoreSomaxconn,omitempty"`
	// Sysctl setting net.core.wmem_default.
	NetCoreWmemDefault *int32 `json:"netCoreWmemDefault,omitempty"`
	// Sysctl setting net.core.wmem_max.
	NetCoreWmemMax *int32 `json:"netCoreWmemMax,omitempty"`
	// Sysctl setting net.ipv4.ip_local_port_range.
	NetIpv4IpLocalPortRange *string `json:"netIpv4IpLocalPortRange,omitempty"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh1.
	NetIpv4NeighDefaultGcThresh1 *int32 `json:"netIpv4NeighDefaultGcThresh1,omitempty"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh2.
	NetIpv4NeighDefaultGcThresh2 *int32 `json:"netIpv4NeighDefaultGcThresh2,omitempty"`
	// Sysctl setting net.ipv4.neigh.default.gc_thresh3.
	NetIpv4NeighDefaultGcThresh3 *int32 `json:"netIpv4NeighDefaultGcThresh3,omitempty"`
	// Sysctl setting net.ipv4.tcp_fin_timeout.
	NetIpv4TcpFinTimeout *int32 `json:"netIpv4TcpFinTimeout,omitempty"`
	// Sysctl setting net.ipv4.tcp_keepalive_probes.
	NetIpv4TcpKeepaliveProbes *int32 `json:"netIpv4TcpKeepaliveProbes,omitempty"`
	// Sysctl setting net.ipv4.tcp_keepalive_time.
	NetIpv4TcpKeepaliveTime *int32 `json:"netIpv4TcpKeepaliveTime,omitempty"`
	// Sysctl setting net.ipv4.tcp_max_syn_backlog.
	NetIpv4TcpMaxSynBacklog *int32 `json:"netIpv4TcpMaxSynBacklog,omitempty"`
	// Sysctl setting net.ipv4.tcp_max_tw_buckets.
	NetIpv4TcpMaxTwBuckets *int32 `json:"netIpv4TcpMaxTwBuckets,omitempty"`
	// Sysctl setting net.ipv4.tcp_tw_reuse.
	NetIpv4TcpTwReuse *bool `json:"netIpv4TcpTwReuse,omitempty"`
	// Sysctl setting net.ipv4.tcp_keepalive_intvl.
	NetIpv4TcpkeepaliveIntvl *int32 `json:"netIpv4TcpkeepaliveIntvl,omitempty"`
	// Sysctl setting net.netfilter.nf_conntrack_buckets.
	NetNetfilterNfConntrackBuckets *int32 `json:"netNetfilterNfConntrackBuckets,omitempty"`
	// Sysctl setting net.netfilter.nf_conntrack_max.
	NetNetfilterNfConntrackMax *int32 `json:"netNetfilterNfConntrackMax,omitempty"`
	// Sysctl setting vm.max_map_count.
	VmMaxMapCount *int32 `json:"vmMaxMapCount,omitempty"`
	// Sysctl setting vm.swappiness.
	VmSwappiness *int32 `json:"vmSwappiness,omitempty"`
	// Sysctl setting vm.vfs_cache_pressure.
	VmVfsCachePressure *int32 `json:"vmVfsCachePressure,omitempty"`
}

// NewSysctls instantiates a new Sysctls object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSysctls() *Sysctls {
	this := Sysctls{}
	return &this
}

// NewSysctlsWithDefaults instantiates a new Sysctls object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSysctlsWithDefaults() *Sysctls {
	this := Sysctls{}
	return &this
}

// GetFsAioMaxNr returns the FsAioMaxNr field value if set, zero value otherwise.
func (o *Sysctls) GetFsAioMaxNr() int32 {
	if o == nil || isNil(o.FsAioMaxNr) {
		var ret int32
		return ret
	}
	return *o.FsAioMaxNr
}

// GetFsAioMaxNrOk returns a tuple with the FsAioMaxNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetFsAioMaxNrOk() (*int32, bool) {
	if o == nil || isNil(o.FsAioMaxNr) {
		return nil, false
	}
	return o.FsAioMaxNr, true
}

// HasFsAioMaxNr returns a boolean if a field has been set.
func (o *Sysctls) HasFsAioMaxNr() bool {
	if o != nil && !isNil(o.FsAioMaxNr) {
		return true
	}

	return false
}

// SetFsAioMaxNr gets a reference to the given int32 and assigns it to the FsAioMaxNr field.
func (o *Sysctls) SetFsAioMaxNr(v int32) {
	o.FsAioMaxNr = &v
}

// GetFsFileMax returns the FsFileMax field value if set, zero value otherwise.
func (o *Sysctls) GetFsFileMax() int32 {
	if o == nil || isNil(o.FsFileMax) {
		var ret int32
		return ret
	}
	return *o.FsFileMax
}

// GetFsFileMaxOk returns a tuple with the FsFileMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetFsFileMaxOk() (*int32, bool) {
	if o == nil || isNil(o.FsFileMax) {
		return nil, false
	}
	return o.FsFileMax, true
}

// HasFsFileMax returns a boolean if a field has been set.
func (o *Sysctls) HasFsFileMax() bool {
	if o != nil && !isNil(o.FsFileMax) {
		return true
	}

	return false
}

// SetFsFileMax gets a reference to the given int32 and assigns it to the FsFileMax field.
func (o *Sysctls) SetFsFileMax(v int32) {
	o.FsFileMax = &v
}

// GetFsInotifyMaxUserWatches returns the FsInotifyMaxUserWatches field value if set, zero value otherwise.
func (o *Sysctls) GetFsInotifyMaxUserWatches() int32 {
	if o == nil || isNil(o.FsInotifyMaxUserWatches) {
		var ret int32
		return ret
	}
	return *o.FsInotifyMaxUserWatches
}

// GetFsInotifyMaxUserWatchesOk returns a tuple with the FsInotifyMaxUserWatches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetFsInotifyMaxUserWatchesOk() (*int32, bool) {
	if o == nil || isNil(o.FsInotifyMaxUserWatches) {
		return nil, false
	}
	return o.FsInotifyMaxUserWatches, true
}

// HasFsInotifyMaxUserWatches returns a boolean if a field has been set.
func (o *Sysctls) HasFsInotifyMaxUserWatches() bool {
	if o != nil && !isNil(o.FsInotifyMaxUserWatches) {
		return true
	}

	return false
}

// SetFsInotifyMaxUserWatches gets a reference to the given int32 and assigns it to the FsInotifyMaxUserWatches field.
func (o *Sysctls) SetFsInotifyMaxUserWatches(v int32) {
	o.FsInotifyMaxUserWatches = &v
}

// GetFsNrOpen returns the FsNrOpen field value if set, zero value otherwise.
func (o *Sysctls) GetFsNrOpen() int32 {
	if o == nil || isNil(o.FsNrOpen) {
		var ret int32
		return ret
	}
	return *o.FsNrOpen
}

// GetFsNrOpenOk returns a tuple with the FsNrOpen field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetFsNrOpenOk() (*int32, bool) {
	if o == nil || isNil(o.FsNrOpen) {
		return nil, false
	}
	return o.FsNrOpen, true
}

// HasFsNrOpen returns a boolean if a field has been set.
func (o *Sysctls) HasFsNrOpen() bool {
	if o != nil && !isNil(o.FsNrOpen) {
		return true
	}

	return false
}

// SetFsNrOpen gets a reference to the given int32 and assigns it to the FsNrOpen field.
func (o *Sysctls) SetFsNrOpen(v int32) {
	o.FsNrOpen = &v
}

// GetKernelThreadsMax returns the KernelThreadsMax field value if set, zero value otherwise.
func (o *Sysctls) GetKernelThreadsMax() int32 {
	if o == nil || isNil(o.KernelThreadsMax) {
		var ret int32
		return ret
	}
	return *o.KernelThreadsMax
}

// GetKernelThreadsMaxOk returns a tuple with the KernelThreadsMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetKernelThreadsMaxOk() (*int32, bool) {
	if o == nil || isNil(o.KernelThreadsMax) {
		return nil, false
	}
	return o.KernelThreadsMax, true
}

// HasKernelThreadsMax returns a boolean if a field has been set.
func (o *Sysctls) HasKernelThreadsMax() bool {
	if o != nil && !isNil(o.KernelThreadsMax) {
		return true
	}

	return false
}

// SetKernelThreadsMax gets a reference to the given int32 and assigns it to the KernelThreadsMax field.
func (o *Sysctls) SetKernelThreadsMax(v int32) {
	o.KernelThreadsMax = &v
}

// GetNetCoreNetdevMaxBacklog returns the NetCoreNetdevMaxBacklog field value if set, zero value otherwise.
func (o *Sysctls) GetNetCoreNetdevMaxBacklog() int32 {
	if o == nil || isNil(o.NetCoreNetdevMaxBacklog) {
		var ret int32
		return ret
	}
	return *o.NetCoreNetdevMaxBacklog
}

// GetNetCoreNetdevMaxBacklogOk returns a tuple with the NetCoreNetdevMaxBacklog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetCoreNetdevMaxBacklogOk() (*int32, bool) {
	if o == nil || isNil(o.NetCoreNetdevMaxBacklog) {
		return nil, false
	}
	return o.NetCoreNetdevMaxBacklog, true
}

// HasNetCoreNetdevMaxBacklog returns a boolean if a field has been set.
func (o *Sysctls) HasNetCoreNetdevMaxBacklog() bool {
	if o != nil && !isNil(o.NetCoreNetdevMaxBacklog) {
		return true
	}

	return false
}

// SetNetCoreNetdevMaxBacklog gets a reference to the given int32 and assigns it to the NetCoreNetdevMaxBacklog field.
func (o *Sysctls) SetNetCoreNetdevMaxBacklog(v int32) {
	o.NetCoreNetdevMaxBacklog = &v
}

// GetNetCoreOptmemMax returns the NetCoreOptmemMax field value if set, zero value otherwise.
func (o *Sysctls) GetNetCoreOptmemMax() int32 {
	if o == nil || isNil(o.NetCoreOptmemMax) {
		var ret int32
		return ret
	}
	return *o.NetCoreOptmemMax
}

// GetNetCoreOptmemMaxOk returns a tuple with the NetCoreOptmemMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetCoreOptmemMaxOk() (*int32, bool) {
	if o == nil || isNil(o.NetCoreOptmemMax) {
		return nil, false
	}
	return o.NetCoreOptmemMax, true
}

// HasNetCoreOptmemMax returns a boolean if a field has been set.
func (o *Sysctls) HasNetCoreOptmemMax() bool {
	if o != nil && !isNil(o.NetCoreOptmemMax) {
		return true
	}

	return false
}

// SetNetCoreOptmemMax gets a reference to the given int32 and assigns it to the NetCoreOptmemMax field.
func (o *Sysctls) SetNetCoreOptmemMax(v int32) {
	o.NetCoreOptmemMax = &v
}

// GetNetCoreRmemDefault returns the NetCoreRmemDefault field value if set, zero value otherwise.
func (o *Sysctls) GetNetCoreRmemDefault() int32 {
	if o == nil || isNil(o.NetCoreRmemDefault) {
		var ret int32
		return ret
	}
	return *o.NetCoreRmemDefault
}

// GetNetCoreRmemDefaultOk returns a tuple with the NetCoreRmemDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetCoreRmemDefaultOk() (*int32, bool) {
	if o == nil || isNil(o.NetCoreRmemDefault) {
		return nil, false
	}
	return o.NetCoreRmemDefault, true
}

// HasNetCoreRmemDefault returns a boolean if a field has been set.
func (o *Sysctls) HasNetCoreRmemDefault() bool {
	if o != nil && !isNil(o.NetCoreRmemDefault) {
		return true
	}

	return false
}

// SetNetCoreRmemDefault gets a reference to the given int32 and assigns it to the NetCoreRmemDefault field.
func (o *Sysctls) SetNetCoreRmemDefault(v int32) {
	o.NetCoreRmemDefault = &v
}

// GetNetCoreRmemMax returns the NetCoreRmemMax field value if set, zero value otherwise.
func (o *Sysctls) GetNetCoreRmemMax() int32 {
	if o == nil || isNil(o.NetCoreRmemMax) {
		var ret int32
		return ret
	}
	return *o.NetCoreRmemMax
}

// GetNetCoreRmemMaxOk returns a tuple with the NetCoreRmemMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetCoreRmemMaxOk() (*int32, bool) {
	if o == nil || isNil(o.NetCoreRmemMax) {
		return nil, false
	}
	return o.NetCoreRmemMax, true
}

// HasNetCoreRmemMax returns a boolean if a field has been set.
func (o *Sysctls) HasNetCoreRmemMax() bool {
	if o != nil && !isNil(o.NetCoreRmemMax) {
		return true
	}

	return false
}

// SetNetCoreRmemMax gets a reference to the given int32 and assigns it to the NetCoreRmemMax field.
func (o *Sysctls) SetNetCoreRmemMax(v int32) {
	o.NetCoreRmemMax = &v
}

// GetNetCoreSomaxconn returns the NetCoreSomaxconn field value if set, zero value otherwise.
func (o *Sysctls) GetNetCoreSomaxconn() int32 {
	if o == nil || isNil(o.NetCoreSomaxconn) {
		var ret int32
		return ret
	}
	return *o.NetCoreSomaxconn
}

// GetNetCoreSomaxconnOk returns a tuple with the NetCoreSomaxconn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetCoreSomaxconnOk() (*int32, bool) {
	if o == nil || isNil(o.NetCoreSomaxconn) {
		return nil, false
	}
	return o.NetCoreSomaxconn, true
}

// HasNetCoreSomaxconn returns a boolean if a field has been set.
func (o *Sysctls) HasNetCoreSomaxconn() bool {
	if o != nil && !isNil(o.NetCoreSomaxconn) {
		return true
	}

	return false
}

// SetNetCoreSomaxconn gets a reference to the given int32 and assigns it to the NetCoreSomaxconn field.
func (o *Sysctls) SetNetCoreSomaxconn(v int32) {
	o.NetCoreSomaxconn = &v
}

// GetNetCoreWmemDefault returns the NetCoreWmemDefault field value if set, zero value otherwise.
func (o *Sysctls) GetNetCoreWmemDefault() int32 {
	if o == nil || isNil(o.NetCoreWmemDefault) {
		var ret int32
		return ret
	}
	return *o.NetCoreWmemDefault
}

// GetNetCoreWmemDefaultOk returns a tuple with the NetCoreWmemDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetCoreWmemDefaultOk() (*int32, bool) {
	if o == nil || isNil(o.NetCoreWmemDefault) {
		return nil, false
	}
	return o.NetCoreWmemDefault, true
}

// HasNetCoreWmemDefault returns a boolean if a field has been set.
func (o *Sysctls) HasNetCoreWmemDefault() bool {
	if o != nil && !isNil(o.NetCoreWmemDefault) {
		return true
	}

	return false
}

// SetNetCoreWmemDefault gets a reference to the given int32 and assigns it to the NetCoreWmemDefault field.
func (o *Sysctls) SetNetCoreWmemDefault(v int32) {
	o.NetCoreWmemDefault = &v
}

// GetNetCoreWmemMax returns the NetCoreWmemMax field value if set, zero value otherwise.
func (o *Sysctls) GetNetCoreWmemMax() int32 {
	if o == nil || isNil(o.NetCoreWmemMax) {
		var ret int32
		return ret
	}
	return *o.NetCoreWmemMax
}

// GetNetCoreWmemMaxOk returns a tuple with the NetCoreWmemMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetCoreWmemMaxOk() (*int32, bool) {
	if o == nil || isNil(o.NetCoreWmemMax) {
		return nil, false
	}
	return o.NetCoreWmemMax, true
}

// HasNetCoreWmemMax returns a boolean if a field has been set.
func (o *Sysctls) HasNetCoreWmemMax() bool {
	if o != nil && !isNil(o.NetCoreWmemMax) {
		return true
	}

	return false
}

// SetNetCoreWmemMax gets a reference to the given int32 and assigns it to the NetCoreWmemMax field.
func (o *Sysctls) SetNetCoreWmemMax(v int32) {
	o.NetCoreWmemMax = &v
}

// GetNetIpv4IpLocalPortRange returns the NetIpv4IpLocalPortRange field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4IpLocalPortRange() string {
	if o == nil || isNil(o.NetIpv4IpLocalPortRange) {
		var ret string
		return ret
	}
	return *o.NetIpv4IpLocalPortRange
}

// GetNetIpv4IpLocalPortRangeOk returns a tuple with the NetIpv4IpLocalPortRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4IpLocalPortRangeOk() (*string, bool) {
	if o == nil || isNil(o.NetIpv4IpLocalPortRange) {
		return nil, false
	}
	return o.NetIpv4IpLocalPortRange, true
}

// HasNetIpv4IpLocalPortRange returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4IpLocalPortRange() bool {
	if o != nil && !isNil(o.NetIpv4IpLocalPortRange) {
		return true
	}

	return false
}

// SetNetIpv4IpLocalPortRange gets a reference to the given string and assigns it to the NetIpv4IpLocalPortRange field.
func (o *Sysctls) SetNetIpv4IpLocalPortRange(v string) {
	o.NetIpv4IpLocalPortRange = &v
}

// GetNetIpv4NeighDefaultGcThresh1 returns the NetIpv4NeighDefaultGcThresh1 field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4NeighDefaultGcThresh1() int32 {
	if o == nil || isNil(o.NetIpv4NeighDefaultGcThresh1) {
		var ret int32
		return ret
	}
	return *o.NetIpv4NeighDefaultGcThresh1
}

// GetNetIpv4NeighDefaultGcThresh1Ok returns a tuple with the NetIpv4NeighDefaultGcThresh1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4NeighDefaultGcThresh1Ok() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4NeighDefaultGcThresh1) {
		return nil, false
	}
	return o.NetIpv4NeighDefaultGcThresh1, true
}

// HasNetIpv4NeighDefaultGcThresh1 returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4NeighDefaultGcThresh1() bool {
	if o != nil && !isNil(o.NetIpv4NeighDefaultGcThresh1) {
		return true
	}

	return false
}

// SetNetIpv4NeighDefaultGcThresh1 gets a reference to the given int32 and assigns it to the NetIpv4NeighDefaultGcThresh1 field.
func (o *Sysctls) SetNetIpv4NeighDefaultGcThresh1(v int32) {
	o.NetIpv4NeighDefaultGcThresh1 = &v
}

// GetNetIpv4NeighDefaultGcThresh2 returns the NetIpv4NeighDefaultGcThresh2 field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4NeighDefaultGcThresh2() int32 {
	if o == nil || isNil(o.NetIpv4NeighDefaultGcThresh2) {
		var ret int32
		return ret
	}
	return *o.NetIpv4NeighDefaultGcThresh2
}

// GetNetIpv4NeighDefaultGcThresh2Ok returns a tuple with the NetIpv4NeighDefaultGcThresh2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4NeighDefaultGcThresh2Ok() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4NeighDefaultGcThresh2) {
		return nil, false
	}
	return o.NetIpv4NeighDefaultGcThresh2, true
}

// HasNetIpv4NeighDefaultGcThresh2 returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4NeighDefaultGcThresh2() bool {
	if o != nil && !isNil(o.NetIpv4NeighDefaultGcThresh2) {
		return true
	}

	return false
}

// SetNetIpv4NeighDefaultGcThresh2 gets a reference to the given int32 and assigns it to the NetIpv4NeighDefaultGcThresh2 field.
func (o *Sysctls) SetNetIpv4NeighDefaultGcThresh2(v int32) {
	o.NetIpv4NeighDefaultGcThresh2 = &v
}

// GetNetIpv4NeighDefaultGcThresh3 returns the NetIpv4NeighDefaultGcThresh3 field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4NeighDefaultGcThresh3() int32 {
	if o == nil || isNil(o.NetIpv4NeighDefaultGcThresh3) {
		var ret int32
		return ret
	}
	return *o.NetIpv4NeighDefaultGcThresh3
}

// GetNetIpv4NeighDefaultGcThresh3Ok returns a tuple with the NetIpv4NeighDefaultGcThresh3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4NeighDefaultGcThresh3Ok() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4NeighDefaultGcThresh3) {
		return nil, false
	}
	return o.NetIpv4NeighDefaultGcThresh3, true
}

// HasNetIpv4NeighDefaultGcThresh3 returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4NeighDefaultGcThresh3() bool {
	if o != nil && !isNil(o.NetIpv4NeighDefaultGcThresh3) {
		return true
	}

	return false
}

// SetNetIpv4NeighDefaultGcThresh3 gets a reference to the given int32 and assigns it to the NetIpv4NeighDefaultGcThresh3 field.
func (o *Sysctls) SetNetIpv4NeighDefaultGcThresh3(v int32) {
	o.NetIpv4NeighDefaultGcThresh3 = &v
}

// GetNetIpv4TcpFinTimeout returns the NetIpv4TcpFinTimeout field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4TcpFinTimeout() int32 {
	if o == nil || isNil(o.NetIpv4TcpFinTimeout) {
		var ret int32
		return ret
	}
	return *o.NetIpv4TcpFinTimeout
}

// GetNetIpv4TcpFinTimeoutOk returns a tuple with the NetIpv4TcpFinTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4TcpFinTimeoutOk() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4TcpFinTimeout) {
		return nil, false
	}
	return o.NetIpv4TcpFinTimeout, true
}

// HasNetIpv4TcpFinTimeout returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4TcpFinTimeout() bool {
	if o != nil && !isNil(o.NetIpv4TcpFinTimeout) {
		return true
	}

	return false
}

// SetNetIpv4TcpFinTimeout gets a reference to the given int32 and assigns it to the NetIpv4TcpFinTimeout field.
func (o *Sysctls) SetNetIpv4TcpFinTimeout(v int32) {
	o.NetIpv4TcpFinTimeout = &v
}

// GetNetIpv4TcpKeepaliveProbes returns the NetIpv4TcpKeepaliveProbes field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4TcpKeepaliveProbes() int32 {
	if o == nil || isNil(o.NetIpv4TcpKeepaliveProbes) {
		var ret int32
		return ret
	}
	return *o.NetIpv4TcpKeepaliveProbes
}

// GetNetIpv4TcpKeepaliveProbesOk returns a tuple with the NetIpv4TcpKeepaliveProbes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4TcpKeepaliveProbesOk() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4TcpKeepaliveProbes) {
		return nil, false
	}
	return o.NetIpv4TcpKeepaliveProbes, true
}

// HasNetIpv4TcpKeepaliveProbes returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4TcpKeepaliveProbes() bool {
	if o != nil && !isNil(o.NetIpv4TcpKeepaliveProbes) {
		return true
	}

	return false
}

// SetNetIpv4TcpKeepaliveProbes gets a reference to the given int32 and assigns it to the NetIpv4TcpKeepaliveProbes field.
func (o *Sysctls) SetNetIpv4TcpKeepaliveProbes(v int32) {
	o.NetIpv4TcpKeepaliveProbes = &v
}

// GetNetIpv4TcpKeepaliveTime returns the NetIpv4TcpKeepaliveTime field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4TcpKeepaliveTime() int32 {
	if o == nil || isNil(o.NetIpv4TcpKeepaliveTime) {
		var ret int32
		return ret
	}
	return *o.NetIpv4TcpKeepaliveTime
}

// GetNetIpv4TcpKeepaliveTimeOk returns a tuple with the NetIpv4TcpKeepaliveTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4TcpKeepaliveTimeOk() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4TcpKeepaliveTime) {
		return nil, false
	}
	return o.NetIpv4TcpKeepaliveTime, true
}

// HasNetIpv4TcpKeepaliveTime returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4TcpKeepaliveTime() bool {
	if o != nil && !isNil(o.NetIpv4TcpKeepaliveTime) {
		return true
	}

	return false
}

// SetNetIpv4TcpKeepaliveTime gets a reference to the given int32 and assigns it to the NetIpv4TcpKeepaliveTime field.
func (o *Sysctls) SetNetIpv4TcpKeepaliveTime(v int32) {
	o.NetIpv4TcpKeepaliveTime = &v
}

// GetNetIpv4TcpMaxSynBacklog returns the NetIpv4TcpMaxSynBacklog field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4TcpMaxSynBacklog() int32 {
	if o == nil || isNil(o.NetIpv4TcpMaxSynBacklog) {
		var ret int32
		return ret
	}
	return *o.NetIpv4TcpMaxSynBacklog
}

// GetNetIpv4TcpMaxSynBacklogOk returns a tuple with the NetIpv4TcpMaxSynBacklog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4TcpMaxSynBacklogOk() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4TcpMaxSynBacklog) {
		return nil, false
	}
	return o.NetIpv4TcpMaxSynBacklog, true
}

// HasNetIpv4TcpMaxSynBacklog returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4TcpMaxSynBacklog() bool {
	if o != nil && !isNil(o.NetIpv4TcpMaxSynBacklog) {
		return true
	}

	return false
}

// SetNetIpv4TcpMaxSynBacklog gets a reference to the given int32 and assigns it to the NetIpv4TcpMaxSynBacklog field.
func (o *Sysctls) SetNetIpv4TcpMaxSynBacklog(v int32) {
	o.NetIpv4TcpMaxSynBacklog = &v
}

// GetNetIpv4TcpMaxTwBuckets returns the NetIpv4TcpMaxTwBuckets field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4TcpMaxTwBuckets() int32 {
	if o == nil || isNil(o.NetIpv4TcpMaxTwBuckets) {
		var ret int32
		return ret
	}
	return *o.NetIpv4TcpMaxTwBuckets
}

// GetNetIpv4TcpMaxTwBucketsOk returns a tuple with the NetIpv4TcpMaxTwBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4TcpMaxTwBucketsOk() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4TcpMaxTwBuckets) {
		return nil, false
	}
	return o.NetIpv4TcpMaxTwBuckets, true
}

// HasNetIpv4TcpMaxTwBuckets returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4TcpMaxTwBuckets() bool {
	if o != nil && !isNil(o.NetIpv4TcpMaxTwBuckets) {
		return true
	}

	return false
}

// SetNetIpv4TcpMaxTwBuckets gets a reference to the given int32 and assigns it to the NetIpv4TcpMaxTwBuckets field.
func (o *Sysctls) SetNetIpv4TcpMaxTwBuckets(v int32) {
	o.NetIpv4TcpMaxTwBuckets = &v
}

// GetNetIpv4TcpTwReuse returns the NetIpv4TcpTwReuse field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4TcpTwReuse() bool {
	if o == nil || isNil(o.NetIpv4TcpTwReuse) {
		var ret bool
		return ret
	}
	return *o.NetIpv4TcpTwReuse
}

// GetNetIpv4TcpTwReuseOk returns a tuple with the NetIpv4TcpTwReuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4TcpTwReuseOk() (*bool, bool) {
	if o == nil || isNil(o.NetIpv4TcpTwReuse) {
		return nil, false
	}
	return o.NetIpv4TcpTwReuse, true
}

// HasNetIpv4TcpTwReuse returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4TcpTwReuse() bool {
	if o != nil && !isNil(o.NetIpv4TcpTwReuse) {
		return true
	}

	return false
}

// SetNetIpv4TcpTwReuse gets a reference to the given bool and assigns it to the NetIpv4TcpTwReuse field.
func (o *Sysctls) SetNetIpv4TcpTwReuse(v bool) {
	o.NetIpv4TcpTwReuse = &v
}

// GetNetIpv4TcpkeepaliveIntvl returns the NetIpv4TcpkeepaliveIntvl field value if set, zero value otherwise.
func (o *Sysctls) GetNetIpv4TcpkeepaliveIntvl() int32 {
	if o == nil || isNil(o.NetIpv4TcpkeepaliveIntvl) {
		var ret int32
		return ret
	}
	return *o.NetIpv4TcpkeepaliveIntvl
}

// GetNetIpv4TcpkeepaliveIntvlOk returns a tuple with the NetIpv4TcpkeepaliveIntvl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetIpv4TcpkeepaliveIntvlOk() (*int32, bool) {
	if o == nil || isNil(o.NetIpv4TcpkeepaliveIntvl) {
		return nil, false
	}
	return o.NetIpv4TcpkeepaliveIntvl, true
}

// HasNetIpv4TcpkeepaliveIntvl returns a boolean if a field has been set.
func (o *Sysctls) HasNetIpv4TcpkeepaliveIntvl() bool {
	if o != nil && !isNil(o.NetIpv4TcpkeepaliveIntvl) {
		return true
	}

	return false
}

// SetNetIpv4TcpkeepaliveIntvl gets a reference to the given int32 and assigns it to the NetIpv4TcpkeepaliveIntvl field.
func (o *Sysctls) SetNetIpv4TcpkeepaliveIntvl(v int32) {
	o.NetIpv4TcpkeepaliveIntvl = &v
}

// GetNetNetfilterNfConntrackBuckets returns the NetNetfilterNfConntrackBuckets field value if set, zero value otherwise.
func (o *Sysctls) GetNetNetfilterNfConntrackBuckets() int32 {
	if o == nil || isNil(o.NetNetfilterNfConntrackBuckets) {
		var ret int32
		return ret
	}
	return *o.NetNetfilterNfConntrackBuckets
}

// GetNetNetfilterNfConntrackBucketsOk returns a tuple with the NetNetfilterNfConntrackBuckets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetNetfilterNfConntrackBucketsOk() (*int32, bool) {
	if o == nil || isNil(o.NetNetfilterNfConntrackBuckets) {
		return nil, false
	}
	return o.NetNetfilterNfConntrackBuckets, true
}

// HasNetNetfilterNfConntrackBuckets returns a boolean if a field has been set.
func (o *Sysctls) HasNetNetfilterNfConntrackBuckets() bool {
	if o != nil && !isNil(o.NetNetfilterNfConntrackBuckets) {
		return true
	}

	return false
}

// SetNetNetfilterNfConntrackBuckets gets a reference to the given int32 and assigns it to the NetNetfilterNfConntrackBuckets field.
func (o *Sysctls) SetNetNetfilterNfConntrackBuckets(v int32) {
	o.NetNetfilterNfConntrackBuckets = &v
}

// GetNetNetfilterNfConntrackMax returns the NetNetfilterNfConntrackMax field value if set, zero value otherwise.
func (o *Sysctls) GetNetNetfilterNfConntrackMax() int32 {
	if o == nil || isNil(o.NetNetfilterNfConntrackMax) {
		var ret int32
		return ret
	}
	return *o.NetNetfilterNfConntrackMax
}

// GetNetNetfilterNfConntrackMaxOk returns a tuple with the NetNetfilterNfConntrackMax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetNetNetfilterNfConntrackMaxOk() (*int32, bool) {
	if o == nil || isNil(o.NetNetfilterNfConntrackMax) {
		return nil, false
	}
	return o.NetNetfilterNfConntrackMax, true
}

// HasNetNetfilterNfConntrackMax returns a boolean if a field has been set.
func (o *Sysctls) HasNetNetfilterNfConntrackMax() bool {
	if o != nil && !isNil(o.NetNetfilterNfConntrackMax) {
		return true
	}

	return false
}

// SetNetNetfilterNfConntrackMax gets a reference to the given int32 and assigns it to the NetNetfilterNfConntrackMax field.
func (o *Sysctls) SetNetNetfilterNfConntrackMax(v int32) {
	o.NetNetfilterNfConntrackMax = &v
}

// GetVmMaxMapCount returns the VmMaxMapCount field value if set, zero value otherwise.
func (o *Sysctls) GetVmMaxMapCount() int32 {
	if o == nil || isNil(o.VmMaxMapCount) {
		var ret int32
		return ret
	}
	return *o.VmMaxMapCount
}

// GetVmMaxMapCountOk returns a tuple with the VmMaxMapCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetVmMaxMapCountOk() (*int32, bool) {
	if o == nil || isNil(o.VmMaxMapCount) {
		return nil, false
	}
	return o.VmMaxMapCount, true
}

// HasVmMaxMapCount returns a boolean if a field has been set.
func (o *Sysctls) HasVmMaxMapCount() bool {
	if o != nil && !isNil(o.VmMaxMapCount) {
		return true
	}

	return false
}

// SetVmMaxMapCount gets a reference to the given int32 and assigns it to the VmMaxMapCount field.
func (o *Sysctls) SetVmMaxMapCount(v int32) {
	o.VmMaxMapCount = &v
}

// GetVmSwappiness returns the VmSwappiness field value if set, zero value otherwise.
func (o *Sysctls) GetVmSwappiness() int32 {
	if o == nil || isNil(o.VmSwappiness) {
		var ret int32
		return ret
	}
	return *o.VmSwappiness
}

// GetVmSwappinessOk returns a tuple with the VmSwappiness field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetVmSwappinessOk() (*int32, bool) {
	if o == nil || isNil(o.VmSwappiness) {
		return nil, false
	}
	return o.VmSwappiness, true
}

// HasVmSwappiness returns a boolean if a field has been set.
func (o *Sysctls) HasVmSwappiness() bool {
	if o != nil && !isNil(o.VmSwappiness) {
		return true
	}

	return false
}

// SetVmSwappiness gets a reference to the given int32 and assigns it to the VmSwappiness field.
func (o *Sysctls) SetVmSwappiness(v int32) {
	o.VmSwappiness = &v
}

// GetVmVfsCachePressure returns the VmVfsCachePressure field value if set, zero value otherwise.
func (o *Sysctls) GetVmVfsCachePressure() int32 {
	if o == nil || isNil(o.VmVfsCachePressure) {
		var ret int32
		return ret
	}
	return *o.VmVfsCachePressure
}

// GetVmVfsCachePressureOk returns a tuple with the VmVfsCachePressure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sysctls) GetVmVfsCachePressureOk() (*int32, bool) {
	if o == nil || isNil(o.VmVfsCachePressure) {
		return nil, false
	}
	return o.VmVfsCachePressure, true
}

// HasVmVfsCachePressure returns a boolean if a field has been set.
func (o *Sysctls) HasVmVfsCachePressure() bool {
	if o != nil && !isNil(o.VmVfsCachePressure) {
		return true
	}

	return false
}

// SetVmVfsCachePressure gets a reference to the given int32 and assigns it to the VmVfsCachePressure field.
func (o *Sysctls) SetVmVfsCachePressure(v int32) {
	o.VmVfsCachePressure = &v
}

func (o Sysctls) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sysctls) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FsAioMaxNr) {
		toSerialize["fsAioMaxNr"] = o.FsAioMaxNr
	}
	if !isNil(o.FsFileMax) {
		toSerialize["fsFileMax"] = o.FsFileMax
	}
	if !isNil(o.FsInotifyMaxUserWatches) {
		toSerialize["fsInotifyMaxUserWatches"] = o.FsInotifyMaxUserWatches
	}
	if !isNil(o.FsNrOpen) {
		toSerialize["fsNrOpen"] = o.FsNrOpen
	}
	if !isNil(o.KernelThreadsMax) {
		toSerialize["kernelThreadsMax"] = o.KernelThreadsMax
	}
	if !isNil(o.NetCoreNetdevMaxBacklog) {
		toSerialize["netCoreNetdevMaxBacklog"] = o.NetCoreNetdevMaxBacklog
	}
	if !isNil(o.NetCoreOptmemMax) {
		toSerialize["netCoreOptmemMax"] = o.NetCoreOptmemMax
	}
	if !isNil(o.NetCoreRmemDefault) {
		toSerialize["netCoreRmemDefault"] = o.NetCoreRmemDefault
	}
	if !isNil(o.NetCoreRmemMax) {
		toSerialize["netCoreRmemMax"] = o.NetCoreRmemMax
	}
	if !isNil(o.NetCoreSomaxconn) {
		toSerialize["netCoreSomaxconn"] = o.NetCoreSomaxconn
	}
	if !isNil(o.NetCoreWmemDefault) {
		toSerialize["netCoreWmemDefault"] = o.NetCoreWmemDefault
	}
	if !isNil(o.NetCoreWmemMax) {
		toSerialize["netCoreWmemMax"] = o.NetCoreWmemMax
	}
	if !isNil(o.NetIpv4IpLocalPortRange) {
		toSerialize["netIpv4IpLocalPortRange"] = o.NetIpv4IpLocalPortRange
	}
	if !isNil(o.NetIpv4NeighDefaultGcThresh1) {
		toSerialize["netIpv4NeighDefaultGcThresh1"] = o.NetIpv4NeighDefaultGcThresh1
	}
	if !isNil(o.NetIpv4NeighDefaultGcThresh2) {
		toSerialize["netIpv4NeighDefaultGcThresh2"] = o.NetIpv4NeighDefaultGcThresh2
	}
	if !isNil(o.NetIpv4NeighDefaultGcThresh3) {
		toSerialize["netIpv4NeighDefaultGcThresh3"] = o.NetIpv4NeighDefaultGcThresh3
	}
	if !isNil(o.NetIpv4TcpFinTimeout) {
		toSerialize["netIpv4TcpFinTimeout"] = o.NetIpv4TcpFinTimeout
	}
	if !isNil(o.NetIpv4TcpKeepaliveProbes) {
		toSerialize["netIpv4TcpKeepaliveProbes"] = o.NetIpv4TcpKeepaliveProbes
	}
	if !isNil(o.NetIpv4TcpKeepaliveTime) {
		toSerialize["netIpv4TcpKeepaliveTime"] = o.NetIpv4TcpKeepaliveTime
	}
	if !isNil(o.NetIpv4TcpMaxSynBacklog) {
		toSerialize["netIpv4TcpMaxSynBacklog"] = o.NetIpv4TcpMaxSynBacklog
	}
	if !isNil(o.NetIpv4TcpMaxTwBuckets) {
		toSerialize["netIpv4TcpMaxTwBuckets"] = o.NetIpv4TcpMaxTwBuckets
	}
	if !isNil(o.NetIpv4TcpTwReuse) {
		toSerialize["netIpv4TcpTwReuse"] = o.NetIpv4TcpTwReuse
	}
	if !isNil(o.NetIpv4TcpkeepaliveIntvl) {
		toSerialize["netIpv4TcpkeepaliveIntvl"] = o.NetIpv4TcpkeepaliveIntvl
	}
	if !isNil(o.NetNetfilterNfConntrackBuckets) {
		toSerialize["netNetfilterNfConntrackBuckets"] = o.NetNetfilterNfConntrackBuckets
	}
	if !isNil(o.NetNetfilterNfConntrackMax) {
		toSerialize["netNetfilterNfConntrackMax"] = o.NetNetfilterNfConntrackMax
	}
	if !isNil(o.VmMaxMapCount) {
		toSerialize["vmMaxMapCount"] = o.VmMaxMapCount
	}
	if !isNil(o.VmSwappiness) {
		toSerialize["vmSwappiness"] = o.VmSwappiness
	}
	if !isNil(o.VmVfsCachePressure) {
		toSerialize["vmVfsCachePressure"] = o.VmVfsCachePressure
	}
	return toSerialize, nil
}

type NullableSysctls struct {
	value *Sysctls
	isSet bool
}

func (v NullableSysctls) Get() *Sysctls {
	return v.value
}

func (v *NullableSysctls) Set(val *Sysctls) {
	v.value = val
	v.isSet = true
}

func (v NullableSysctls) IsSet() bool {
	return v.isSet
}

func (v *NullableSysctls) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSysctls(val *Sysctls) *NullableSysctls {
	return &NullableSysctls{value: val, isSet: true}
}

func (v NullableSysctls) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSysctls) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


