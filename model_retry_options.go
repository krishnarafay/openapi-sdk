/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the RetryOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetryOptions{}

// RetryOptions struct for RetryOptions
type RetryOptions struct {
	// Determines whether to retry or not, by default it is set to false
	Enabled *bool `json:"enabled,omitempty"`
	// Maximun number of retries
	MaxCount *int32 `json:"maxCount,omitempty"`
}

// NewRetryOptions instantiates a new RetryOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetryOptions() *RetryOptions {
	this := RetryOptions{}
	return &this
}

// NewRetryOptionsWithDefaults instantiates a new RetryOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetryOptionsWithDefaults() *RetryOptions {
	this := RetryOptions{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *RetryOptions) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryOptions) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *RetryOptions) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *RetryOptions) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMaxCount returns the MaxCount field value if set, zero value otherwise.
func (o *RetryOptions) GetMaxCount() int32 {
	if o == nil || isNil(o.MaxCount) {
		var ret int32
		return ret
	}
	return *o.MaxCount
}

// GetMaxCountOk returns a tuple with the MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetryOptions) GetMaxCountOk() (*int32, bool) {
	if o == nil || isNil(o.MaxCount) {
		return nil, false
	}
	return o.MaxCount, true
}

// HasMaxCount returns a boolean if a field has been set.
func (o *RetryOptions) HasMaxCount() bool {
	if o != nil && !isNil(o.MaxCount) {
		return true
	}

	return false
}

// SetMaxCount gets a reference to the given int32 and assigns it to the MaxCount field.
func (o *RetryOptions) SetMaxCount(v int32) {
	o.MaxCount = &v
}

func (o RetryOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetryOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.MaxCount) {
		toSerialize["maxCount"] = o.MaxCount
	}
	return toSerialize, nil
}

type NullableRetryOptions struct {
	value *RetryOptions
	isSet bool
}

func (v NullableRetryOptions) Get() *RetryOptions {
	return v.value
}

func (v *NullableRetryOptions) Set(val *RetryOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRetryOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRetryOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetryOptions(val *RetryOptions) *NullableRetryOptions {
	return &NullableRetryOptions{value: val, isSet: true}
}

func (v NullableRetryOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetryOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


