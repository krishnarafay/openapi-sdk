/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the SecretStoreSpecConfigVaultCluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretStoreSpecConfigVaultCluster{}

// SecretStoreSpecConfigVaultCluster secret store specification
type SecretStoreSpecConfigVaultCluster struct {
	// Authentication path for cluster linked to secret store resource
	AuthPath *string `json:"authPath,omitempty"`
	// Cluster name for cluster linked to secret store resource
	ClusterName *string `json:"clusterName,omitempty"`
	// Namespace for cluster linked to secret store resource
	VaultNamespace *string `json:"vaultNamespace,omitempty"`
}

// NewSecretStoreSpecConfigVaultCluster instantiates a new SecretStoreSpecConfigVaultCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretStoreSpecConfigVaultCluster() *SecretStoreSpecConfigVaultCluster {
	this := SecretStoreSpecConfigVaultCluster{}
	return &this
}

// NewSecretStoreSpecConfigVaultClusterWithDefaults instantiates a new SecretStoreSpecConfigVaultCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretStoreSpecConfigVaultClusterWithDefaults() *SecretStoreSpecConfigVaultCluster {
	this := SecretStoreSpecConfigVaultCluster{}
	return &this
}

// GetAuthPath returns the AuthPath field value if set, zero value otherwise.
func (o *SecretStoreSpecConfigVaultCluster) GetAuthPath() string {
	if o == nil || isNil(o.AuthPath) {
		var ret string
		return ret
	}
	return *o.AuthPath
}

// GetAuthPathOk returns a tuple with the AuthPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStoreSpecConfigVaultCluster) GetAuthPathOk() (*string, bool) {
	if o == nil || isNil(o.AuthPath) {
		return nil, false
	}
	return o.AuthPath, true
}

// HasAuthPath returns a boolean if a field has been set.
func (o *SecretStoreSpecConfigVaultCluster) HasAuthPath() bool {
	if o != nil && !isNil(o.AuthPath) {
		return true
	}

	return false
}

// SetAuthPath gets a reference to the given string and assigns it to the AuthPath field.
func (o *SecretStoreSpecConfigVaultCluster) SetAuthPath(v string) {
	o.AuthPath = &v
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise.
func (o *SecretStoreSpecConfigVaultCluster) GetClusterName() string {
	if o == nil || isNil(o.ClusterName) {
		var ret string
		return ret
	}
	return *o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStoreSpecConfigVaultCluster) GetClusterNameOk() (*string, bool) {
	if o == nil || isNil(o.ClusterName) {
		return nil, false
	}
	return o.ClusterName, true
}

// HasClusterName returns a boolean if a field has been set.
func (o *SecretStoreSpecConfigVaultCluster) HasClusterName() bool {
	if o != nil && !isNil(o.ClusterName) {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given string and assigns it to the ClusterName field.
func (o *SecretStoreSpecConfigVaultCluster) SetClusterName(v string) {
	o.ClusterName = &v
}

// GetVaultNamespace returns the VaultNamespace field value if set, zero value otherwise.
func (o *SecretStoreSpecConfigVaultCluster) GetVaultNamespace() string {
	if o == nil || isNil(o.VaultNamespace) {
		var ret string
		return ret
	}
	return *o.VaultNamespace
}

// GetVaultNamespaceOk returns a tuple with the VaultNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStoreSpecConfigVaultCluster) GetVaultNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.VaultNamespace) {
		return nil, false
	}
	return o.VaultNamespace, true
}

// HasVaultNamespace returns a boolean if a field has been set.
func (o *SecretStoreSpecConfigVaultCluster) HasVaultNamespace() bool {
	if o != nil && !isNil(o.VaultNamespace) {
		return true
	}

	return false
}

// SetVaultNamespace gets a reference to the given string and assigns it to the VaultNamespace field.
func (o *SecretStoreSpecConfigVaultCluster) SetVaultNamespace(v string) {
	o.VaultNamespace = &v
}

func (o SecretStoreSpecConfigVaultCluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretStoreSpecConfigVaultCluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuthPath) {
		toSerialize["authPath"] = o.AuthPath
	}
	if !isNil(o.ClusterName) {
		toSerialize["clusterName"] = o.ClusterName
	}
	if !isNil(o.VaultNamespace) {
		toSerialize["vaultNamespace"] = o.VaultNamespace
	}
	return toSerialize, nil
}

type NullableSecretStoreSpecConfigVaultCluster struct {
	value *SecretStoreSpecConfigVaultCluster
	isSet bool
}

func (v NullableSecretStoreSpecConfigVaultCluster) Get() *SecretStoreSpecConfigVaultCluster {
	return v.value
}

func (v *NullableSecretStoreSpecConfigVaultCluster) Set(val *SecretStoreSpecConfigVaultCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretStoreSpecConfigVaultCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretStoreSpecConfigVaultCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretStoreSpecConfigVaultCluster(val *SecretStoreSpecConfigVaultCluster) *NullableSecretStoreSpecConfigVaultCluster {
	return &NullableSecretStoreSpecConfigVaultCluster{value: val, isSet: true}
}

func (v NullableSecretStoreSpecConfigVaultCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretStoreSpecConfigVaultCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


