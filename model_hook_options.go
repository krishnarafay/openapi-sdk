/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the HookOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HookOptions{}

// HookOptions struct for HookOptions
type HookOptions struct {
	Approval map[string]interface{} `json:"approval,omitempty"`
	Container *ContainerOptions `json:"container,omitempty"`
	Http *HttpOptions `json:"http,omitempty"`
	Notification map[string]interface{} `json:"notification,omitempty"`
	Script *ShellScriptOptions `json:"script,omitempty"`
}

// NewHookOptions instantiates a new HookOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHookOptions() *HookOptions {
	this := HookOptions{}
	return &this
}

// NewHookOptionsWithDefaults instantiates a new HookOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHookOptionsWithDefaults() *HookOptions {
	this := HookOptions{}
	return &this
}

// GetApproval returns the Approval field value if set, zero value otherwise.
func (o *HookOptions) GetApproval() map[string]interface{} {
	if o == nil || isNil(o.Approval) {
		var ret map[string]interface{}
		return ret
	}
	return o.Approval
}

// GetApprovalOk returns a tuple with the Approval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookOptions) GetApprovalOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Approval) {
		return map[string]interface{}{}, false
	}
	return o.Approval, true
}

// HasApproval returns a boolean if a field has been set.
func (o *HookOptions) HasApproval() bool {
	if o != nil && !isNil(o.Approval) {
		return true
	}

	return false
}

// SetApproval gets a reference to the given map[string]interface{} and assigns it to the Approval field.
func (o *HookOptions) SetApproval(v map[string]interface{}) {
	o.Approval = v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *HookOptions) GetContainer() ContainerOptions {
	if o == nil || isNil(o.Container) {
		var ret ContainerOptions
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookOptions) GetContainerOk() (*ContainerOptions, bool) {
	if o == nil || isNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *HookOptions) HasContainer() bool {
	if o != nil && !isNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given ContainerOptions and assigns it to the Container field.
func (o *HookOptions) SetContainer(v ContainerOptions) {
	o.Container = &v
}

// GetHttp returns the Http field value if set, zero value otherwise.
func (o *HookOptions) GetHttp() HttpOptions {
	if o == nil || isNil(o.Http) {
		var ret HttpOptions
		return ret
	}
	return *o.Http
}

// GetHttpOk returns a tuple with the Http field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookOptions) GetHttpOk() (*HttpOptions, bool) {
	if o == nil || isNil(o.Http) {
		return nil, false
	}
	return o.Http, true
}

// HasHttp returns a boolean if a field has been set.
func (o *HookOptions) HasHttp() bool {
	if o != nil && !isNil(o.Http) {
		return true
	}

	return false
}

// SetHttp gets a reference to the given HttpOptions and assigns it to the Http field.
func (o *HookOptions) SetHttp(v HttpOptions) {
	o.Http = &v
}

// GetNotification returns the Notification field value if set, zero value otherwise.
func (o *HookOptions) GetNotification() map[string]interface{} {
	if o == nil || isNil(o.Notification) {
		var ret map[string]interface{}
		return ret
	}
	return o.Notification
}

// GetNotificationOk returns a tuple with the Notification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookOptions) GetNotificationOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Notification) {
		return map[string]interface{}{}, false
	}
	return o.Notification, true
}

// HasNotification returns a boolean if a field has been set.
func (o *HookOptions) HasNotification() bool {
	if o != nil && !isNil(o.Notification) {
		return true
	}

	return false
}

// SetNotification gets a reference to the given map[string]interface{} and assigns it to the Notification field.
func (o *HookOptions) SetNotification(v map[string]interface{}) {
	o.Notification = v
}

// GetScript returns the Script field value if set, zero value otherwise.
func (o *HookOptions) GetScript() ShellScriptOptions {
	if o == nil || isNil(o.Script) {
		var ret ShellScriptOptions
		return ret
	}
	return *o.Script
}

// GetScriptOk returns a tuple with the Script field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HookOptions) GetScriptOk() (*ShellScriptOptions, bool) {
	if o == nil || isNil(o.Script) {
		return nil, false
	}
	return o.Script, true
}

// HasScript returns a boolean if a field has been set.
func (o *HookOptions) HasScript() bool {
	if o != nil && !isNil(o.Script) {
		return true
	}

	return false
}

// SetScript gets a reference to the given ShellScriptOptions and assigns it to the Script field.
func (o *HookOptions) SetScript(v ShellScriptOptions) {
	o.Script = &v
}

func (o HookOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HookOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Approval) {
		toSerialize["approval"] = o.Approval
	}
	if !isNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !isNil(o.Http) {
		toSerialize["http"] = o.Http
	}
	if !isNil(o.Notification) {
		toSerialize["notification"] = o.Notification
	}
	if !isNil(o.Script) {
		toSerialize["script"] = o.Script
	}
	return toSerialize, nil
}

type NullableHookOptions struct {
	value *HookOptions
	isSet bool
}

func (v NullableHookOptions) Get() *HookOptions {
	return v.value
}

func (v *NullableHookOptions) Set(val *HookOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableHookOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableHookOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHookOptions(val *HookOptions) *NullableHookOptions {
	return &NullableHookOptions{value: val, isSet: true}
}

func (v NullableHookOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHookOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


