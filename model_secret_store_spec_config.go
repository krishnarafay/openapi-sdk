/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the SecretStoreSpecConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretStoreSpecConfig{}

// SecretStoreSpecConfig secret store specification
type SecretStoreSpecConfig struct {
	CsiAws *SecretStoreSpecConfigCsiAws `json:"csiAws,omitempty"`
	Vault *SecretStoreSpecConfigVault `json:"vault,omitempty"`
}

// NewSecretStoreSpecConfig instantiates a new SecretStoreSpecConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretStoreSpecConfig() *SecretStoreSpecConfig {
	this := SecretStoreSpecConfig{}
	return &this
}

// NewSecretStoreSpecConfigWithDefaults instantiates a new SecretStoreSpecConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretStoreSpecConfigWithDefaults() *SecretStoreSpecConfig {
	this := SecretStoreSpecConfig{}
	return &this
}

// GetCsiAws returns the CsiAws field value if set, zero value otherwise.
func (o *SecretStoreSpecConfig) GetCsiAws() SecretStoreSpecConfigCsiAws {
	if o == nil || isNil(o.CsiAws) {
		var ret SecretStoreSpecConfigCsiAws
		return ret
	}
	return *o.CsiAws
}

// GetCsiAwsOk returns a tuple with the CsiAws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStoreSpecConfig) GetCsiAwsOk() (*SecretStoreSpecConfigCsiAws, bool) {
	if o == nil || isNil(o.CsiAws) {
		return nil, false
	}
	return o.CsiAws, true
}

// HasCsiAws returns a boolean if a field has been set.
func (o *SecretStoreSpecConfig) HasCsiAws() bool {
	if o != nil && !isNil(o.CsiAws) {
		return true
	}

	return false
}

// SetCsiAws gets a reference to the given SecretStoreSpecConfigCsiAws and assigns it to the CsiAws field.
func (o *SecretStoreSpecConfig) SetCsiAws(v SecretStoreSpecConfigCsiAws) {
	o.CsiAws = &v
}

// GetVault returns the Vault field value if set, zero value otherwise.
func (o *SecretStoreSpecConfig) GetVault() SecretStoreSpecConfigVault {
	if o == nil || isNil(o.Vault) {
		var ret SecretStoreSpecConfigVault
		return ret
	}
	return *o.Vault
}

// GetVaultOk returns a tuple with the Vault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretStoreSpecConfig) GetVaultOk() (*SecretStoreSpecConfigVault, bool) {
	if o == nil || isNil(o.Vault) {
		return nil, false
	}
	return o.Vault, true
}

// HasVault returns a boolean if a field has been set.
func (o *SecretStoreSpecConfig) HasVault() bool {
	if o != nil && !isNil(o.Vault) {
		return true
	}

	return false
}

// SetVault gets a reference to the given SecretStoreSpecConfigVault and assigns it to the Vault field.
func (o *SecretStoreSpecConfig) SetVault(v SecretStoreSpecConfigVault) {
	o.Vault = &v
}

func (o SecretStoreSpecConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretStoreSpecConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CsiAws) {
		toSerialize["csiAws"] = o.CsiAws
	}
	if !isNil(o.Vault) {
		toSerialize["vault"] = o.Vault
	}
	return toSerialize, nil
}

type NullableSecretStoreSpecConfig struct {
	value *SecretStoreSpecConfig
	isSet bool
}

func (v NullableSecretStoreSpecConfig) Get() *SecretStoreSpecConfig {
	return v.value
}

func (v *NullableSecretStoreSpecConfig) Set(val *SecretStoreSpecConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretStoreSpecConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretStoreSpecConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretStoreSpecConfig(val *SecretStoreSpecConfig) *NullableSecretStoreSpecConfig {
	return &NullableSecretStoreSpecConfig{value: val, isSet: true}
}

func (v NullableSecretStoreSpecConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretStoreSpecConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


