/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the StageSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StageSpec{}

// StageSpec pipeline stage specification
type StageSpec struct {
	Config StageSpecConfig `json:"config"`
	// name of the pipeline stage
	Name string `json:"name"`
	// list of stages to be executed after this
	Next []NextStage `json:"next,omitempty"`
	// conditions to be evaluated before executing current stage
	PreConditions []PreConditionSpec `json:"preConditions,omitempty"`
	// type of pipeline stage
	Type string `json:"type"`
	// stage scoped variables
	Variables []VariableSpec `json:"variables,omitempty"`
}

// NewStageSpec instantiates a new StageSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStageSpec(config StageSpecConfig, name string, type_ string) *StageSpec {
	this := StageSpec{}
	this.Config = config
	this.Name = name
	this.Type = type_
	return &this
}

// NewStageSpecWithDefaults instantiates a new StageSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStageSpecWithDefaults() *StageSpec {
	this := StageSpec{}
	return &this
}

// GetConfig returns the Config field value
func (o *StageSpec) GetConfig() StageSpecConfig {
	if o == nil {
		var ret StageSpecConfig
		return ret
	}

	return o.Config
}

// GetConfigOk returns a tuple with the Config field value
// and a boolean to check if the value has been set.
func (o *StageSpec) GetConfigOk() (*StageSpecConfig, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Config, true
}

// SetConfig sets field value
func (o *StageSpec) SetConfig(v StageSpecConfig) {
	o.Config = v
}

// GetName returns the Name field value
func (o *StageSpec) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *StageSpec) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *StageSpec) SetName(v string) {
	o.Name = v
}

// GetNext returns the Next field value if set, zero value otherwise.
func (o *StageSpec) GetNext() []NextStage {
	if o == nil || isNil(o.Next) {
		var ret []NextStage
		return ret
	}
	return o.Next
}

// GetNextOk returns a tuple with the Next field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StageSpec) GetNextOk() ([]NextStage, bool) {
	if o == nil || isNil(o.Next) {
		return nil, false
	}
	return o.Next, true
}

// HasNext returns a boolean if a field has been set.
func (o *StageSpec) HasNext() bool {
	if o != nil && !isNil(o.Next) {
		return true
	}

	return false
}

// SetNext gets a reference to the given []NextStage and assigns it to the Next field.
func (o *StageSpec) SetNext(v []NextStage) {
	o.Next = v
}

// GetPreConditions returns the PreConditions field value if set, zero value otherwise.
func (o *StageSpec) GetPreConditions() []PreConditionSpec {
	if o == nil || isNil(o.PreConditions) {
		var ret []PreConditionSpec
		return ret
	}
	return o.PreConditions
}

// GetPreConditionsOk returns a tuple with the PreConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StageSpec) GetPreConditionsOk() ([]PreConditionSpec, bool) {
	if o == nil || isNil(o.PreConditions) {
		return nil, false
	}
	return o.PreConditions, true
}

// HasPreConditions returns a boolean if a field has been set.
func (o *StageSpec) HasPreConditions() bool {
	if o != nil && !isNil(o.PreConditions) {
		return true
	}

	return false
}

// SetPreConditions gets a reference to the given []PreConditionSpec and assigns it to the PreConditions field.
func (o *StageSpec) SetPreConditions(v []PreConditionSpec) {
	o.PreConditions = v
}

// GetType returns the Type field value
func (o *StageSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *StageSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *StageSpec) SetType(v string) {
	o.Type = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *StageSpec) GetVariables() []VariableSpec {
	if o == nil || isNil(o.Variables) {
		var ret []VariableSpec
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StageSpec) GetVariablesOk() ([]VariableSpec, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *StageSpec) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableSpec and assigns it to the Variables field.
func (o *StageSpec) SetVariables(v []VariableSpec) {
	o.Variables = v
}

func (o StageSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StageSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["config"] = o.Config
	toSerialize["name"] = o.Name
	if !isNil(o.Next) {
		toSerialize["next"] = o.Next
	}
	if !isNil(o.PreConditions) {
		toSerialize["preConditions"] = o.PreConditions
	}
	toSerialize["type"] = o.Type
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

type NullableStageSpec struct {
	value *StageSpec
	isSet bool
}

func (v NullableStageSpec) Get() *StageSpec {
	return v.value
}

func (v *NullableStageSpec) Set(val *StageSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableStageSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableStageSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageSpec(val *StageSpec) *NullableStageSpec {
	return &NullableStageSpec{value: val, isSet: true}
}

func (v NullableStageSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


