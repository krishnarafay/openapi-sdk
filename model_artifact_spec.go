/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the ArtifactSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactSpec{}

// ArtifactSpec ArtifactSpec
type ArtifactSpec struct {
	Artifact ArtifactSpecArtifact `json:"artifact"`
	Options *ArtifactSpecOptions `json:"options,omitempty"`
	// type of the artifact
	Type string `json:"type"`
}

// NewArtifactSpec instantiates a new ArtifactSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactSpec(artifact ArtifactSpecArtifact, type_ string) *ArtifactSpec {
	this := ArtifactSpec{}
	this.Artifact = artifact
	this.Type = type_
	return &this
}

// NewArtifactSpecWithDefaults instantiates a new ArtifactSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactSpecWithDefaults() *ArtifactSpec {
	this := ArtifactSpec{}
	return &this
}

// GetArtifact returns the Artifact field value
func (o *ArtifactSpec) GetArtifact() ArtifactSpecArtifact {
	if o == nil {
		var ret ArtifactSpecArtifact
		return ret
	}

	return o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value
// and a boolean to check if the value has been set.
func (o *ArtifactSpec) GetArtifactOk() (*ArtifactSpecArtifact, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Artifact, true
}

// SetArtifact sets field value
func (o *ArtifactSpec) SetArtifact(v ArtifactSpecArtifact) {
	o.Artifact = v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *ArtifactSpec) GetOptions() ArtifactSpecOptions {
	if o == nil || isNil(o.Options) {
		var ret ArtifactSpecOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactSpec) GetOptionsOk() (*ArtifactSpecOptions, bool) {
	if o == nil || isNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *ArtifactSpec) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given ArtifactSpecOptions and assigns it to the Options field.
func (o *ArtifactSpec) SetOptions(v ArtifactSpecOptions) {
	o.Options = &v
}

// GetType returns the Type field value
func (o *ArtifactSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ArtifactSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ArtifactSpec) SetType(v string) {
	o.Type = v
}

func (o ArtifactSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["artifact"] = o.Artifact
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableArtifactSpec struct {
	value *ArtifactSpec
	isSet bool
}

func (v NullableArtifactSpec) Get() *ArtifactSpec {
	return v.value
}

func (v *NullableArtifactSpec) Set(val *ArtifactSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactSpec(val *ArtifactSpec) *NullableArtifactSpec {
	return &NullableArtifactSpec{value: val, isSet: true}
}

func (v NullableArtifactSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


