/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the NodePoolProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodePoolProperties{}

// NodePoolProperties struct for NodePoolProperties
type NodePoolProperties struct {
	// The list of Availability zones to use for nodes. This can only be specified if the AgentPoolType property is VirtualMachineScaleSets.
	AvailabilityZones []string `json:"availabilityZones,omitempty"`
	// Number of agents (VMs) to host docker containers. Allowed values must be in the range of 0 to 1000 (inclusive) for user pools and in the range of 1 to 1000 (inclusive) for system pools. The default value is 1.
	Count *int32 `json:"count,omitempty"`
	CreationData *CreationData `json:"creationData,omitempty"`
	// Whether to enable auto-scaler
	EnableAutoScaling *bool `json:"enableAutoScaling,omitempty"`
	// This is only supported on certain VM sizes and in certain Azure regions. For more information, see: https://docs.microsoft.com/azure/aks/enable-host-encryption
	EnableEncryptionAtHost *bool `json:"enableEncryptionAtHost,omitempty"`
	// See Add a FIPS-enabled node pool for more details.
	EnableFIPS *bool `json:"enableFIPS,omitempty"`
	// Some scenarios may require nodes in a node pool to receive their own dedicated public IP addresses. A common scenario is for gaming workloads, where a console needs to make a direct connection to a cloud virtual machine to minimize hops. For more information see assigning a public IP per node. The default is false.
	EnableNodePublicIP *bool `json:"enableNodePublicIP,omitempty"`
	// Whether to enable UltraSSD
	EnableUltraSSD *bool `json:"enableUltraSSD,omitempty"`
	// GPUInstanceProfile to be used to specify GPU MIG instance profile for supported GPU VM SKU. Valid values are MIG1g, MIG2g, MIG3g, MIG4g, MIG7g.
	GpuInstanceProfile *string `json:"gpuInstanceProfile,omitempty"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Compute/hostGroups/{hostGroupName}. For more information see Azure dedicated hosts.
	HostGroupID *string `json:"hostGroupID,omitempty"`
	KubeletConfig *Kubeletconfig `json:"kubeletConfig,omitempty"`
	// Valid values are OS, Temporary.
	KubeletDiskType *string `json:"kubeletDiskType,omitempty"`
	LinuxOSConfig *Linuxosconfig `json:"linuxOSConfig,omitempty"`
	// The maximum number of nodes for auto-scaling
	MaxCount *int32 `json:"maxCount,omitempty"`
	//  The maximum number of pods that can run on a node.
	MaxPods *int32 `json:"maxPods,omitempty"`
	// The minimum number of nodes for auto-scaling
	MinCount *int32 `json:"minCount,omitempty"`
	// Valid values are System, User.
	Mode *string `json:"mode,omitempty"`
	// The node labels to be persisted across all nodes in agent pool.
	NodeLabels *map[string]string `json:"nodeLabels,omitempty"`
	// This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/publicIPPrefixes/{publicIPPrefixName}
	NodePublicIPPrefixID *string `json:"nodePublicIPPrefixID,omitempty"`
	// The taints added to new nodes during node pool create and scale. For example, key=value:NoSchedule.
	NodeTaints []string `json:"nodeTaints,omitempty"`
	// Both patch version (e.g. 1.20.13) and (e.g. 1.20) are supported. When is specified, the latest supported GA patch version is chosen automatically. Updating the cluster with the same once it has been created (e.g. 1.14.x -> 1.14) will not trigger an upgrade, even if a newer patch version is available. As a best practice, you should upgrade all node pools in an AKS cluster to the same Kubernetes version. The node pool version must have the same major version as the control plane. The node pool minor version must be within two minor versions of the control plane version. The node pool version cannot be greater than the control plane version. For more information see upgrading a node pool.
	OrchestratorVersion *string `json:"orchestratorVersion,omitempty"`
	// OS Disk Size in GB to be used to specify the disk size for every machine in the master/agent pool. If you specify 0, it will apply the default osDisk size according to the vmSize specified.
	OsDiskSizeGB *int32 `json:"osDiskSizeGB,omitempty"`
	// Valid values are Managed, Ephemeral.
	OsDiskType *string `json:"osDiskType,omitempty"`
	// Valid values are Ubuntu, CBLMariner, Windows2019, Windows2022.
	OsSKU *string `json:"osSKU,omitempty"`
	// Valid values are Linux, Windows.
	OsType *string `json:"osType,omitempty"`
	// If omitted, pod IPs are statically assigned on the node subnet (see vnetSubnetID for more details). This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	PodSubnetID *string `json:"podSubnetID,omitempty"`
	PowerState *Powerstate `json:"powerState,omitempty"`
	// The ID for Proximity Placement Group.
	ProximityPlacementGroupID *string `json:"proximityPlacementGroupID,omitempty"`
	// This also effects the cluster autoscaler behavior. If not specified, it defaults to Delete. Valid values are Delete, Deallocate.
	ScaleDownMode *string `json:"scaleDownMode,omitempty"`
	// This cannot be specified unless the scaleSetPriority is Spot. If not specified, the default is Delete. Valid values are Delete, Deallocate.
	ScaleSetEvictionPolicy *string `json:"scaleSetEvictionPolicy,omitempty"`
	// The Virtual Machine Scale Set priority. If not specified, the default is Regular. Valid values are Spot, Regular.
	ScaleSetPriority *string `json:"scaleSetPriority,omitempty"`
	// Possible values are any decimal value greater than zero or -1 which indicates the willingness to pay any on-demand price. For more details on spot pricing, see spot VMs pricing
	SpotMaxPrice *int32 `json:"spotMaxPrice,omitempty"`
	// The tags to be persisted on the agent pool virtual machine scale set.
	Tags *map[string]string `json:"tags,omitempty"`
	// Valid values are VirtualMachineScaleSets, AvailabilitySet.
	Type *string `json:"type,omitempty"`
	UpgradeSettings *Upgradesettings `json:"upgradeSettings,omitempty"`
	// VM size availability varies by region. If a node contains insufficient compute resources (memory, cpu, etc) pods might fail to run correctly. For more details on restricted VM sizes, see: https://docs.microsoft.com/azure/aks/quotas-skus-regions
	VmSize *string `json:"vmSize,omitempty"`
	// If this is not specified, a VNET and subnet will be generated and used. If no podSubnetID is specified, this applies to nodes and pods, otherwise it applies to just nodes. This is of the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{virtualNetworkName}/subnets/{subnetName}
	VnetSubnetID *string `json:"vnetSubnetID,omitempty"`
	// Valid values are OCIContainer, WasmWasi.
	WorkloadRuntime *string `json:"workloadRuntime,omitempty"`
}

// NewNodePoolProperties instantiates a new NodePoolProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePoolProperties() *NodePoolProperties {
	this := NodePoolProperties{}
	return &this
}

// NewNodePoolPropertiesWithDefaults instantiates a new NodePoolProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePoolPropertiesWithDefaults() *NodePoolProperties {
	this := NodePoolProperties{}
	return &this
}

// GetAvailabilityZones returns the AvailabilityZones field value if set, zero value otherwise.
func (o *NodePoolProperties) GetAvailabilityZones() []string {
	if o == nil || isNil(o.AvailabilityZones) {
		var ret []string
		return ret
	}
	return o.AvailabilityZones
}

// GetAvailabilityZonesOk returns a tuple with the AvailabilityZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetAvailabilityZonesOk() ([]string, bool) {
	if o == nil || isNil(o.AvailabilityZones) {
		return nil, false
	}
	return o.AvailabilityZones, true
}

// HasAvailabilityZones returns a boolean if a field has been set.
func (o *NodePoolProperties) HasAvailabilityZones() bool {
	if o != nil && !isNil(o.AvailabilityZones) {
		return true
	}

	return false
}

// SetAvailabilityZones gets a reference to the given []string and assigns it to the AvailabilityZones field.
func (o *NodePoolProperties) SetAvailabilityZones(v []string) {
	o.AvailabilityZones = v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *NodePoolProperties) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *NodePoolProperties) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *NodePoolProperties) SetCount(v int32) {
	o.Count = &v
}

// GetCreationData returns the CreationData field value if set, zero value otherwise.
func (o *NodePoolProperties) GetCreationData() CreationData {
	if o == nil || isNil(o.CreationData) {
		var ret CreationData
		return ret
	}
	return *o.CreationData
}

// GetCreationDataOk returns a tuple with the CreationData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetCreationDataOk() (*CreationData, bool) {
	if o == nil || isNil(o.CreationData) {
		return nil, false
	}
	return o.CreationData, true
}

// HasCreationData returns a boolean if a field has been set.
func (o *NodePoolProperties) HasCreationData() bool {
	if o != nil && !isNil(o.CreationData) {
		return true
	}

	return false
}

// SetCreationData gets a reference to the given CreationData and assigns it to the CreationData field.
func (o *NodePoolProperties) SetCreationData(v CreationData) {
	o.CreationData = &v
}

// GetEnableAutoScaling returns the EnableAutoScaling field value if set, zero value otherwise.
func (o *NodePoolProperties) GetEnableAutoScaling() bool {
	if o == nil || isNil(o.EnableAutoScaling) {
		var ret bool
		return ret
	}
	return *o.EnableAutoScaling
}

// GetEnableAutoScalingOk returns a tuple with the EnableAutoScaling field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetEnableAutoScalingOk() (*bool, bool) {
	if o == nil || isNil(o.EnableAutoScaling) {
		return nil, false
	}
	return o.EnableAutoScaling, true
}

// HasEnableAutoScaling returns a boolean if a field has been set.
func (o *NodePoolProperties) HasEnableAutoScaling() bool {
	if o != nil && !isNil(o.EnableAutoScaling) {
		return true
	}

	return false
}

// SetEnableAutoScaling gets a reference to the given bool and assigns it to the EnableAutoScaling field.
func (o *NodePoolProperties) SetEnableAutoScaling(v bool) {
	o.EnableAutoScaling = &v
}

// GetEnableEncryptionAtHost returns the EnableEncryptionAtHost field value if set, zero value otherwise.
func (o *NodePoolProperties) GetEnableEncryptionAtHost() bool {
	if o == nil || isNil(o.EnableEncryptionAtHost) {
		var ret bool
		return ret
	}
	return *o.EnableEncryptionAtHost
}

// GetEnableEncryptionAtHostOk returns a tuple with the EnableEncryptionAtHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetEnableEncryptionAtHostOk() (*bool, bool) {
	if o == nil || isNil(o.EnableEncryptionAtHost) {
		return nil, false
	}
	return o.EnableEncryptionAtHost, true
}

// HasEnableEncryptionAtHost returns a boolean if a field has been set.
func (o *NodePoolProperties) HasEnableEncryptionAtHost() bool {
	if o != nil && !isNil(o.EnableEncryptionAtHost) {
		return true
	}

	return false
}

// SetEnableEncryptionAtHost gets a reference to the given bool and assigns it to the EnableEncryptionAtHost field.
func (o *NodePoolProperties) SetEnableEncryptionAtHost(v bool) {
	o.EnableEncryptionAtHost = &v
}

// GetEnableFIPS returns the EnableFIPS field value if set, zero value otherwise.
func (o *NodePoolProperties) GetEnableFIPS() bool {
	if o == nil || isNil(o.EnableFIPS) {
		var ret bool
		return ret
	}
	return *o.EnableFIPS
}

// GetEnableFIPSOk returns a tuple with the EnableFIPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetEnableFIPSOk() (*bool, bool) {
	if o == nil || isNil(o.EnableFIPS) {
		return nil, false
	}
	return o.EnableFIPS, true
}

// HasEnableFIPS returns a boolean if a field has been set.
func (o *NodePoolProperties) HasEnableFIPS() bool {
	if o != nil && !isNil(o.EnableFIPS) {
		return true
	}

	return false
}

// SetEnableFIPS gets a reference to the given bool and assigns it to the EnableFIPS field.
func (o *NodePoolProperties) SetEnableFIPS(v bool) {
	o.EnableFIPS = &v
}

// GetEnableNodePublicIP returns the EnableNodePublicIP field value if set, zero value otherwise.
func (o *NodePoolProperties) GetEnableNodePublicIP() bool {
	if o == nil || isNil(o.EnableNodePublicIP) {
		var ret bool
		return ret
	}
	return *o.EnableNodePublicIP
}

// GetEnableNodePublicIPOk returns a tuple with the EnableNodePublicIP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetEnableNodePublicIPOk() (*bool, bool) {
	if o == nil || isNil(o.EnableNodePublicIP) {
		return nil, false
	}
	return o.EnableNodePublicIP, true
}

// HasEnableNodePublicIP returns a boolean if a field has been set.
func (o *NodePoolProperties) HasEnableNodePublicIP() bool {
	if o != nil && !isNil(o.EnableNodePublicIP) {
		return true
	}

	return false
}

// SetEnableNodePublicIP gets a reference to the given bool and assigns it to the EnableNodePublicIP field.
func (o *NodePoolProperties) SetEnableNodePublicIP(v bool) {
	o.EnableNodePublicIP = &v
}

// GetEnableUltraSSD returns the EnableUltraSSD field value if set, zero value otherwise.
func (o *NodePoolProperties) GetEnableUltraSSD() bool {
	if o == nil || isNil(o.EnableUltraSSD) {
		var ret bool
		return ret
	}
	return *o.EnableUltraSSD
}

// GetEnableUltraSSDOk returns a tuple with the EnableUltraSSD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetEnableUltraSSDOk() (*bool, bool) {
	if o == nil || isNil(o.EnableUltraSSD) {
		return nil, false
	}
	return o.EnableUltraSSD, true
}

// HasEnableUltraSSD returns a boolean if a field has been set.
func (o *NodePoolProperties) HasEnableUltraSSD() bool {
	if o != nil && !isNil(o.EnableUltraSSD) {
		return true
	}

	return false
}

// SetEnableUltraSSD gets a reference to the given bool and assigns it to the EnableUltraSSD field.
func (o *NodePoolProperties) SetEnableUltraSSD(v bool) {
	o.EnableUltraSSD = &v
}

// GetGpuInstanceProfile returns the GpuInstanceProfile field value if set, zero value otherwise.
func (o *NodePoolProperties) GetGpuInstanceProfile() string {
	if o == nil || isNil(o.GpuInstanceProfile) {
		var ret string
		return ret
	}
	return *o.GpuInstanceProfile
}

// GetGpuInstanceProfileOk returns a tuple with the GpuInstanceProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetGpuInstanceProfileOk() (*string, bool) {
	if o == nil || isNil(o.GpuInstanceProfile) {
		return nil, false
	}
	return o.GpuInstanceProfile, true
}

// HasGpuInstanceProfile returns a boolean if a field has been set.
func (o *NodePoolProperties) HasGpuInstanceProfile() bool {
	if o != nil && !isNil(o.GpuInstanceProfile) {
		return true
	}

	return false
}

// SetGpuInstanceProfile gets a reference to the given string and assigns it to the GpuInstanceProfile field.
func (o *NodePoolProperties) SetGpuInstanceProfile(v string) {
	o.GpuInstanceProfile = &v
}

// GetHostGroupID returns the HostGroupID field value if set, zero value otherwise.
func (o *NodePoolProperties) GetHostGroupID() string {
	if o == nil || isNil(o.HostGroupID) {
		var ret string
		return ret
	}
	return *o.HostGroupID
}

// GetHostGroupIDOk returns a tuple with the HostGroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetHostGroupIDOk() (*string, bool) {
	if o == nil || isNil(o.HostGroupID) {
		return nil, false
	}
	return o.HostGroupID, true
}

// HasHostGroupID returns a boolean if a field has been set.
func (o *NodePoolProperties) HasHostGroupID() bool {
	if o != nil && !isNil(o.HostGroupID) {
		return true
	}

	return false
}

// SetHostGroupID gets a reference to the given string and assigns it to the HostGroupID field.
func (o *NodePoolProperties) SetHostGroupID(v string) {
	o.HostGroupID = &v
}

// GetKubeletConfig returns the KubeletConfig field value if set, zero value otherwise.
func (o *NodePoolProperties) GetKubeletConfig() Kubeletconfig {
	if o == nil || isNil(o.KubeletConfig) {
		var ret Kubeletconfig
		return ret
	}
	return *o.KubeletConfig
}

// GetKubeletConfigOk returns a tuple with the KubeletConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetKubeletConfigOk() (*Kubeletconfig, bool) {
	if o == nil || isNil(o.KubeletConfig) {
		return nil, false
	}
	return o.KubeletConfig, true
}

// HasKubeletConfig returns a boolean if a field has been set.
func (o *NodePoolProperties) HasKubeletConfig() bool {
	if o != nil && !isNil(o.KubeletConfig) {
		return true
	}

	return false
}

// SetKubeletConfig gets a reference to the given Kubeletconfig and assigns it to the KubeletConfig field.
func (o *NodePoolProperties) SetKubeletConfig(v Kubeletconfig) {
	o.KubeletConfig = &v
}

// GetKubeletDiskType returns the KubeletDiskType field value if set, zero value otherwise.
func (o *NodePoolProperties) GetKubeletDiskType() string {
	if o == nil || isNil(o.KubeletDiskType) {
		var ret string
		return ret
	}
	return *o.KubeletDiskType
}

// GetKubeletDiskTypeOk returns a tuple with the KubeletDiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetKubeletDiskTypeOk() (*string, bool) {
	if o == nil || isNil(o.KubeletDiskType) {
		return nil, false
	}
	return o.KubeletDiskType, true
}

// HasKubeletDiskType returns a boolean if a field has been set.
func (o *NodePoolProperties) HasKubeletDiskType() bool {
	if o != nil && !isNil(o.KubeletDiskType) {
		return true
	}

	return false
}

// SetKubeletDiskType gets a reference to the given string and assigns it to the KubeletDiskType field.
func (o *NodePoolProperties) SetKubeletDiskType(v string) {
	o.KubeletDiskType = &v
}

// GetLinuxOSConfig returns the LinuxOSConfig field value if set, zero value otherwise.
func (o *NodePoolProperties) GetLinuxOSConfig() Linuxosconfig {
	if o == nil || isNil(o.LinuxOSConfig) {
		var ret Linuxosconfig
		return ret
	}
	return *o.LinuxOSConfig
}

// GetLinuxOSConfigOk returns a tuple with the LinuxOSConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetLinuxOSConfigOk() (*Linuxosconfig, bool) {
	if o == nil || isNil(o.LinuxOSConfig) {
		return nil, false
	}
	return o.LinuxOSConfig, true
}

// HasLinuxOSConfig returns a boolean if a field has been set.
func (o *NodePoolProperties) HasLinuxOSConfig() bool {
	if o != nil && !isNil(o.LinuxOSConfig) {
		return true
	}

	return false
}

// SetLinuxOSConfig gets a reference to the given Linuxosconfig and assigns it to the LinuxOSConfig field.
func (o *NodePoolProperties) SetLinuxOSConfig(v Linuxosconfig) {
	o.LinuxOSConfig = &v
}

// GetMaxCount returns the MaxCount field value if set, zero value otherwise.
func (o *NodePoolProperties) GetMaxCount() int32 {
	if o == nil || isNil(o.MaxCount) {
		var ret int32
		return ret
	}
	return *o.MaxCount
}

// GetMaxCountOk returns a tuple with the MaxCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetMaxCountOk() (*int32, bool) {
	if o == nil || isNil(o.MaxCount) {
		return nil, false
	}
	return o.MaxCount, true
}

// HasMaxCount returns a boolean if a field has been set.
func (o *NodePoolProperties) HasMaxCount() bool {
	if o != nil && !isNil(o.MaxCount) {
		return true
	}

	return false
}

// SetMaxCount gets a reference to the given int32 and assigns it to the MaxCount field.
func (o *NodePoolProperties) SetMaxCount(v int32) {
	o.MaxCount = &v
}

// GetMaxPods returns the MaxPods field value if set, zero value otherwise.
func (o *NodePoolProperties) GetMaxPods() int32 {
	if o == nil || isNil(o.MaxPods) {
		var ret int32
		return ret
	}
	return *o.MaxPods
}

// GetMaxPodsOk returns a tuple with the MaxPods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetMaxPodsOk() (*int32, bool) {
	if o == nil || isNil(o.MaxPods) {
		return nil, false
	}
	return o.MaxPods, true
}

// HasMaxPods returns a boolean if a field has been set.
func (o *NodePoolProperties) HasMaxPods() bool {
	if o != nil && !isNil(o.MaxPods) {
		return true
	}

	return false
}

// SetMaxPods gets a reference to the given int32 and assigns it to the MaxPods field.
func (o *NodePoolProperties) SetMaxPods(v int32) {
	o.MaxPods = &v
}

// GetMinCount returns the MinCount field value if set, zero value otherwise.
func (o *NodePoolProperties) GetMinCount() int32 {
	if o == nil || isNil(o.MinCount) {
		var ret int32
		return ret
	}
	return *o.MinCount
}

// GetMinCountOk returns a tuple with the MinCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetMinCountOk() (*int32, bool) {
	if o == nil || isNil(o.MinCount) {
		return nil, false
	}
	return o.MinCount, true
}

// HasMinCount returns a boolean if a field has been set.
func (o *NodePoolProperties) HasMinCount() bool {
	if o != nil && !isNil(o.MinCount) {
		return true
	}

	return false
}

// SetMinCount gets a reference to the given int32 and assigns it to the MinCount field.
func (o *NodePoolProperties) SetMinCount(v int32) {
	o.MinCount = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *NodePoolProperties) GetMode() string {
	if o == nil || isNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetModeOk() (*string, bool) {
	if o == nil || isNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *NodePoolProperties) HasMode() bool {
	if o != nil && !isNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *NodePoolProperties) SetMode(v string) {
	o.Mode = &v
}

// GetNodeLabels returns the NodeLabels field value if set, zero value otherwise.
func (o *NodePoolProperties) GetNodeLabels() map[string]string {
	if o == nil || isNil(o.NodeLabels) {
		var ret map[string]string
		return ret
	}
	return *o.NodeLabels
}

// GetNodeLabelsOk returns a tuple with the NodeLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetNodeLabelsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.NodeLabels) {
		return nil, false
	}
	return o.NodeLabels, true
}

// HasNodeLabels returns a boolean if a field has been set.
func (o *NodePoolProperties) HasNodeLabels() bool {
	if o != nil && !isNil(o.NodeLabels) {
		return true
	}

	return false
}

// SetNodeLabels gets a reference to the given map[string]string and assigns it to the NodeLabels field.
func (o *NodePoolProperties) SetNodeLabels(v map[string]string) {
	o.NodeLabels = &v
}

// GetNodePublicIPPrefixID returns the NodePublicIPPrefixID field value if set, zero value otherwise.
func (o *NodePoolProperties) GetNodePublicIPPrefixID() string {
	if o == nil || isNil(o.NodePublicIPPrefixID) {
		var ret string
		return ret
	}
	return *o.NodePublicIPPrefixID
}

// GetNodePublicIPPrefixIDOk returns a tuple with the NodePublicIPPrefixID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetNodePublicIPPrefixIDOk() (*string, bool) {
	if o == nil || isNil(o.NodePublicIPPrefixID) {
		return nil, false
	}
	return o.NodePublicIPPrefixID, true
}

// HasNodePublicIPPrefixID returns a boolean if a field has been set.
func (o *NodePoolProperties) HasNodePublicIPPrefixID() bool {
	if o != nil && !isNil(o.NodePublicIPPrefixID) {
		return true
	}

	return false
}

// SetNodePublicIPPrefixID gets a reference to the given string and assigns it to the NodePublicIPPrefixID field.
func (o *NodePoolProperties) SetNodePublicIPPrefixID(v string) {
	o.NodePublicIPPrefixID = &v
}

// GetNodeTaints returns the NodeTaints field value if set, zero value otherwise.
func (o *NodePoolProperties) GetNodeTaints() []string {
	if o == nil || isNil(o.NodeTaints) {
		var ret []string
		return ret
	}
	return o.NodeTaints
}

// GetNodeTaintsOk returns a tuple with the NodeTaints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetNodeTaintsOk() ([]string, bool) {
	if o == nil || isNil(o.NodeTaints) {
		return nil, false
	}
	return o.NodeTaints, true
}

// HasNodeTaints returns a boolean if a field has been set.
func (o *NodePoolProperties) HasNodeTaints() bool {
	if o != nil && !isNil(o.NodeTaints) {
		return true
	}

	return false
}

// SetNodeTaints gets a reference to the given []string and assigns it to the NodeTaints field.
func (o *NodePoolProperties) SetNodeTaints(v []string) {
	o.NodeTaints = v
}

// GetOrchestratorVersion returns the OrchestratorVersion field value if set, zero value otherwise.
func (o *NodePoolProperties) GetOrchestratorVersion() string {
	if o == nil || isNil(o.OrchestratorVersion) {
		var ret string
		return ret
	}
	return *o.OrchestratorVersion
}

// GetOrchestratorVersionOk returns a tuple with the OrchestratorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetOrchestratorVersionOk() (*string, bool) {
	if o == nil || isNil(o.OrchestratorVersion) {
		return nil, false
	}
	return o.OrchestratorVersion, true
}

// HasOrchestratorVersion returns a boolean if a field has been set.
func (o *NodePoolProperties) HasOrchestratorVersion() bool {
	if o != nil && !isNil(o.OrchestratorVersion) {
		return true
	}

	return false
}

// SetOrchestratorVersion gets a reference to the given string and assigns it to the OrchestratorVersion field.
func (o *NodePoolProperties) SetOrchestratorVersion(v string) {
	o.OrchestratorVersion = &v
}

// GetOsDiskSizeGB returns the OsDiskSizeGB field value if set, zero value otherwise.
func (o *NodePoolProperties) GetOsDiskSizeGB() int32 {
	if o == nil || isNil(o.OsDiskSizeGB) {
		var ret int32
		return ret
	}
	return *o.OsDiskSizeGB
}

// GetOsDiskSizeGBOk returns a tuple with the OsDiskSizeGB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetOsDiskSizeGBOk() (*int32, bool) {
	if o == nil || isNil(o.OsDiskSizeGB) {
		return nil, false
	}
	return o.OsDiskSizeGB, true
}

// HasOsDiskSizeGB returns a boolean if a field has been set.
func (o *NodePoolProperties) HasOsDiskSizeGB() bool {
	if o != nil && !isNil(o.OsDiskSizeGB) {
		return true
	}

	return false
}

// SetOsDiskSizeGB gets a reference to the given int32 and assigns it to the OsDiskSizeGB field.
func (o *NodePoolProperties) SetOsDiskSizeGB(v int32) {
	o.OsDiskSizeGB = &v
}

// GetOsDiskType returns the OsDiskType field value if set, zero value otherwise.
func (o *NodePoolProperties) GetOsDiskType() string {
	if o == nil || isNil(o.OsDiskType) {
		var ret string
		return ret
	}
	return *o.OsDiskType
}

// GetOsDiskTypeOk returns a tuple with the OsDiskType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetOsDiskTypeOk() (*string, bool) {
	if o == nil || isNil(o.OsDiskType) {
		return nil, false
	}
	return o.OsDiskType, true
}

// HasOsDiskType returns a boolean if a field has been set.
func (o *NodePoolProperties) HasOsDiskType() bool {
	if o != nil && !isNil(o.OsDiskType) {
		return true
	}

	return false
}

// SetOsDiskType gets a reference to the given string and assigns it to the OsDiskType field.
func (o *NodePoolProperties) SetOsDiskType(v string) {
	o.OsDiskType = &v
}

// GetOsSKU returns the OsSKU field value if set, zero value otherwise.
func (o *NodePoolProperties) GetOsSKU() string {
	if o == nil || isNil(o.OsSKU) {
		var ret string
		return ret
	}
	return *o.OsSKU
}

// GetOsSKUOk returns a tuple with the OsSKU field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetOsSKUOk() (*string, bool) {
	if o == nil || isNil(o.OsSKU) {
		return nil, false
	}
	return o.OsSKU, true
}

// HasOsSKU returns a boolean if a field has been set.
func (o *NodePoolProperties) HasOsSKU() bool {
	if o != nil && !isNil(o.OsSKU) {
		return true
	}

	return false
}

// SetOsSKU gets a reference to the given string and assigns it to the OsSKU field.
func (o *NodePoolProperties) SetOsSKU(v string) {
	o.OsSKU = &v
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *NodePoolProperties) GetOsType() string {
	if o == nil || isNil(o.OsType) {
		var ret string
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetOsTypeOk() (*string, bool) {
	if o == nil || isNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *NodePoolProperties) HasOsType() bool {
	if o != nil && !isNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given string and assigns it to the OsType field.
func (o *NodePoolProperties) SetOsType(v string) {
	o.OsType = &v
}

// GetPodSubnetID returns the PodSubnetID field value if set, zero value otherwise.
func (o *NodePoolProperties) GetPodSubnetID() string {
	if o == nil || isNil(o.PodSubnetID) {
		var ret string
		return ret
	}
	return *o.PodSubnetID
}

// GetPodSubnetIDOk returns a tuple with the PodSubnetID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetPodSubnetIDOk() (*string, bool) {
	if o == nil || isNil(o.PodSubnetID) {
		return nil, false
	}
	return o.PodSubnetID, true
}

// HasPodSubnetID returns a boolean if a field has been set.
func (o *NodePoolProperties) HasPodSubnetID() bool {
	if o != nil && !isNil(o.PodSubnetID) {
		return true
	}

	return false
}

// SetPodSubnetID gets a reference to the given string and assigns it to the PodSubnetID field.
func (o *NodePoolProperties) SetPodSubnetID(v string) {
	o.PodSubnetID = &v
}

// GetPowerState returns the PowerState field value if set, zero value otherwise.
func (o *NodePoolProperties) GetPowerState() Powerstate {
	if o == nil || isNil(o.PowerState) {
		var ret Powerstate
		return ret
	}
	return *o.PowerState
}

// GetPowerStateOk returns a tuple with the PowerState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetPowerStateOk() (*Powerstate, bool) {
	if o == nil || isNil(o.PowerState) {
		return nil, false
	}
	return o.PowerState, true
}

// HasPowerState returns a boolean if a field has been set.
func (o *NodePoolProperties) HasPowerState() bool {
	if o != nil && !isNil(o.PowerState) {
		return true
	}

	return false
}

// SetPowerState gets a reference to the given Powerstate and assigns it to the PowerState field.
func (o *NodePoolProperties) SetPowerState(v Powerstate) {
	o.PowerState = &v
}

// GetProximityPlacementGroupID returns the ProximityPlacementGroupID field value if set, zero value otherwise.
func (o *NodePoolProperties) GetProximityPlacementGroupID() string {
	if o == nil || isNil(o.ProximityPlacementGroupID) {
		var ret string
		return ret
	}
	return *o.ProximityPlacementGroupID
}

// GetProximityPlacementGroupIDOk returns a tuple with the ProximityPlacementGroupID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetProximityPlacementGroupIDOk() (*string, bool) {
	if o == nil || isNil(o.ProximityPlacementGroupID) {
		return nil, false
	}
	return o.ProximityPlacementGroupID, true
}

// HasProximityPlacementGroupID returns a boolean if a field has been set.
func (o *NodePoolProperties) HasProximityPlacementGroupID() bool {
	if o != nil && !isNil(o.ProximityPlacementGroupID) {
		return true
	}

	return false
}

// SetProximityPlacementGroupID gets a reference to the given string and assigns it to the ProximityPlacementGroupID field.
func (o *NodePoolProperties) SetProximityPlacementGroupID(v string) {
	o.ProximityPlacementGroupID = &v
}

// GetScaleDownMode returns the ScaleDownMode field value if set, zero value otherwise.
func (o *NodePoolProperties) GetScaleDownMode() string {
	if o == nil || isNil(o.ScaleDownMode) {
		var ret string
		return ret
	}
	return *o.ScaleDownMode
}

// GetScaleDownModeOk returns a tuple with the ScaleDownMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetScaleDownModeOk() (*string, bool) {
	if o == nil || isNil(o.ScaleDownMode) {
		return nil, false
	}
	return o.ScaleDownMode, true
}

// HasScaleDownMode returns a boolean if a field has been set.
func (o *NodePoolProperties) HasScaleDownMode() bool {
	if o != nil && !isNil(o.ScaleDownMode) {
		return true
	}

	return false
}

// SetScaleDownMode gets a reference to the given string and assigns it to the ScaleDownMode field.
func (o *NodePoolProperties) SetScaleDownMode(v string) {
	o.ScaleDownMode = &v
}

// GetScaleSetEvictionPolicy returns the ScaleSetEvictionPolicy field value if set, zero value otherwise.
func (o *NodePoolProperties) GetScaleSetEvictionPolicy() string {
	if o == nil || isNil(o.ScaleSetEvictionPolicy) {
		var ret string
		return ret
	}
	return *o.ScaleSetEvictionPolicy
}

// GetScaleSetEvictionPolicyOk returns a tuple with the ScaleSetEvictionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetScaleSetEvictionPolicyOk() (*string, bool) {
	if o == nil || isNil(o.ScaleSetEvictionPolicy) {
		return nil, false
	}
	return o.ScaleSetEvictionPolicy, true
}

// HasScaleSetEvictionPolicy returns a boolean if a field has been set.
func (o *NodePoolProperties) HasScaleSetEvictionPolicy() bool {
	if o != nil && !isNil(o.ScaleSetEvictionPolicy) {
		return true
	}

	return false
}

// SetScaleSetEvictionPolicy gets a reference to the given string and assigns it to the ScaleSetEvictionPolicy field.
func (o *NodePoolProperties) SetScaleSetEvictionPolicy(v string) {
	o.ScaleSetEvictionPolicy = &v
}

// GetScaleSetPriority returns the ScaleSetPriority field value if set, zero value otherwise.
func (o *NodePoolProperties) GetScaleSetPriority() string {
	if o == nil || isNil(o.ScaleSetPriority) {
		var ret string
		return ret
	}
	return *o.ScaleSetPriority
}

// GetScaleSetPriorityOk returns a tuple with the ScaleSetPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetScaleSetPriorityOk() (*string, bool) {
	if o == nil || isNil(o.ScaleSetPriority) {
		return nil, false
	}
	return o.ScaleSetPriority, true
}

// HasScaleSetPriority returns a boolean if a field has been set.
func (o *NodePoolProperties) HasScaleSetPriority() bool {
	if o != nil && !isNil(o.ScaleSetPriority) {
		return true
	}

	return false
}

// SetScaleSetPriority gets a reference to the given string and assigns it to the ScaleSetPriority field.
func (o *NodePoolProperties) SetScaleSetPriority(v string) {
	o.ScaleSetPriority = &v
}

// GetSpotMaxPrice returns the SpotMaxPrice field value if set, zero value otherwise.
func (o *NodePoolProperties) GetSpotMaxPrice() int32 {
	if o == nil || isNil(o.SpotMaxPrice) {
		var ret int32
		return ret
	}
	return *o.SpotMaxPrice
}

// GetSpotMaxPriceOk returns a tuple with the SpotMaxPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetSpotMaxPriceOk() (*int32, bool) {
	if o == nil || isNil(o.SpotMaxPrice) {
		return nil, false
	}
	return o.SpotMaxPrice, true
}

// HasSpotMaxPrice returns a boolean if a field has been set.
func (o *NodePoolProperties) HasSpotMaxPrice() bool {
	if o != nil && !isNil(o.SpotMaxPrice) {
		return true
	}

	return false
}

// SetSpotMaxPrice gets a reference to the given int32 and assigns it to the SpotMaxPrice field.
func (o *NodePoolProperties) SetSpotMaxPrice(v int32) {
	o.SpotMaxPrice = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *NodePoolProperties) GetTags() map[string]string {
	if o == nil || isNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetTagsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *NodePoolProperties) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *NodePoolProperties) SetTags(v map[string]string) {
	o.Tags = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NodePoolProperties) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NodePoolProperties) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NodePoolProperties) SetType(v string) {
	o.Type = &v
}

// GetUpgradeSettings returns the UpgradeSettings field value if set, zero value otherwise.
func (o *NodePoolProperties) GetUpgradeSettings() Upgradesettings {
	if o == nil || isNil(o.UpgradeSettings) {
		var ret Upgradesettings
		return ret
	}
	return *o.UpgradeSettings
}

// GetUpgradeSettingsOk returns a tuple with the UpgradeSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetUpgradeSettingsOk() (*Upgradesettings, bool) {
	if o == nil || isNil(o.UpgradeSettings) {
		return nil, false
	}
	return o.UpgradeSettings, true
}

// HasUpgradeSettings returns a boolean if a field has been set.
func (o *NodePoolProperties) HasUpgradeSettings() bool {
	if o != nil && !isNil(o.UpgradeSettings) {
		return true
	}

	return false
}

// SetUpgradeSettings gets a reference to the given Upgradesettings and assigns it to the UpgradeSettings field.
func (o *NodePoolProperties) SetUpgradeSettings(v Upgradesettings) {
	o.UpgradeSettings = &v
}

// GetVmSize returns the VmSize field value if set, zero value otherwise.
func (o *NodePoolProperties) GetVmSize() string {
	if o == nil || isNil(o.VmSize) {
		var ret string
		return ret
	}
	return *o.VmSize
}

// GetVmSizeOk returns a tuple with the VmSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetVmSizeOk() (*string, bool) {
	if o == nil || isNil(o.VmSize) {
		return nil, false
	}
	return o.VmSize, true
}

// HasVmSize returns a boolean if a field has been set.
func (o *NodePoolProperties) HasVmSize() bool {
	if o != nil && !isNil(o.VmSize) {
		return true
	}

	return false
}

// SetVmSize gets a reference to the given string and assigns it to the VmSize field.
func (o *NodePoolProperties) SetVmSize(v string) {
	o.VmSize = &v
}

// GetVnetSubnetID returns the VnetSubnetID field value if set, zero value otherwise.
func (o *NodePoolProperties) GetVnetSubnetID() string {
	if o == nil || isNil(o.VnetSubnetID) {
		var ret string
		return ret
	}
	return *o.VnetSubnetID
}

// GetVnetSubnetIDOk returns a tuple with the VnetSubnetID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetVnetSubnetIDOk() (*string, bool) {
	if o == nil || isNil(o.VnetSubnetID) {
		return nil, false
	}
	return o.VnetSubnetID, true
}

// HasVnetSubnetID returns a boolean if a field has been set.
func (o *NodePoolProperties) HasVnetSubnetID() bool {
	if o != nil && !isNil(o.VnetSubnetID) {
		return true
	}

	return false
}

// SetVnetSubnetID gets a reference to the given string and assigns it to the VnetSubnetID field.
func (o *NodePoolProperties) SetVnetSubnetID(v string) {
	o.VnetSubnetID = &v
}

// GetWorkloadRuntime returns the WorkloadRuntime field value if set, zero value otherwise.
func (o *NodePoolProperties) GetWorkloadRuntime() string {
	if o == nil || isNil(o.WorkloadRuntime) {
		var ret string
		return ret
	}
	return *o.WorkloadRuntime
}

// GetWorkloadRuntimeOk returns a tuple with the WorkloadRuntime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodePoolProperties) GetWorkloadRuntimeOk() (*string, bool) {
	if o == nil || isNil(o.WorkloadRuntime) {
		return nil, false
	}
	return o.WorkloadRuntime, true
}

// HasWorkloadRuntime returns a boolean if a field has been set.
func (o *NodePoolProperties) HasWorkloadRuntime() bool {
	if o != nil && !isNil(o.WorkloadRuntime) {
		return true
	}

	return false
}

// SetWorkloadRuntime gets a reference to the given string and assigns it to the WorkloadRuntime field.
func (o *NodePoolProperties) SetWorkloadRuntime(v string) {
	o.WorkloadRuntime = &v
}

func (o NodePoolProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodePoolProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AvailabilityZones) {
		toSerialize["availabilityZones"] = o.AvailabilityZones
	}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !isNil(o.CreationData) {
		toSerialize["creationData"] = o.CreationData
	}
	if !isNil(o.EnableAutoScaling) {
		toSerialize["enableAutoScaling"] = o.EnableAutoScaling
	}
	if !isNil(o.EnableEncryptionAtHost) {
		toSerialize["enableEncryptionAtHost"] = o.EnableEncryptionAtHost
	}
	if !isNil(o.EnableFIPS) {
		toSerialize["enableFIPS"] = o.EnableFIPS
	}
	if !isNil(o.EnableNodePublicIP) {
		toSerialize["enableNodePublicIP"] = o.EnableNodePublicIP
	}
	if !isNil(o.EnableUltraSSD) {
		toSerialize["enableUltraSSD"] = o.EnableUltraSSD
	}
	if !isNil(o.GpuInstanceProfile) {
		toSerialize["gpuInstanceProfile"] = o.GpuInstanceProfile
	}
	if !isNil(o.HostGroupID) {
		toSerialize["hostGroupID"] = o.HostGroupID
	}
	if !isNil(o.KubeletConfig) {
		toSerialize["kubeletConfig"] = o.KubeletConfig
	}
	if !isNil(o.KubeletDiskType) {
		toSerialize["kubeletDiskType"] = o.KubeletDiskType
	}
	if !isNil(o.LinuxOSConfig) {
		toSerialize["linuxOSConfig"] = o.LinuxOSConfig
	}
	if !isNil(o.MaxCount) {
		toSerialize["maxCount"] = o.MaxCount
	}
	if !isNil(o.MaxPods) {
		toSerialize["maxPods"] = o.MaxPods
	}
	if !isNil(o.MinCount) {
		toSerialize["minCount"] = o.MinCount
	}
	if !isNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !isNil(o.NodeLabels) {
		toSerialize["nodeLabels"] = o.NodeLabels
	}
	if !isNil(o.NodePublicIPPrefixID) {
		toSerialize["nodePublicIPPrefixID"] = o.NodePublicIPPrefixID
	}
	if !isNil(o.NodeTaints) {
		toSerialize["nodeTaints"] = o.NodeTaints
	}
	if !isNil(o.OrchestratorVersion) {
		toSerialize["orchestratorVersion"] = o.OrchestratorVersion
	}
	if !isNil(o.OsDiskSizeGB) {
		toSerialize["osDiskSizeGB"] = o.OsDiskSizeGB
	}
	if !isNil(o.OsDiskType) {
		toSerialize["osDiskType"] = o.OsDiskType
	}
	if !isNil(o.OsSKU) {
		toSerialize["osSKU"] = o.OsSKU
	}
	if !isNil(o.OsType) {
		toSerialize["osType"] = o.OsType
	}
	if !isNil(o.PodSubnetID) {
		toSerialize["podSubnetID"] = o.PodSubnetID
	}
	if !isNil(o.PowerState) {
		toSerialize["powerState"] = o.PowerState
	}
	if !isNil(o.ProximityPlacementGroupID) {
		toSerialize["proximityPlacementGroupID"] = o.ProximityPlacementGroupID
	}
	if !isNil(o.ScaleDownMode) {
		toSerialize["scaleDownMode"] = o.ScaleDownMode
	}
	if !isNil(o.ScaleSetEvictionPolicy) {
		toSerialize["scaleSetEvictionPolicy"] = o.ScaleSetEvictionPolicy
	}
	if !isNil(o.ScaleSetPriority) {
		toSerialize["scaleSetPriority"] = o.ScaleSetPriority
	}
	if !isNil(o.SpotMaxPrice) {
		toSerialize["spotMaxPrice"] = o.SpotMaxPrice
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.UpgradeSettings) {
		toSerialize["upgradeSettings"] = o.UpgradeSettings
	}
	if !isNil(o.VmSize) {
		toSerialize["vmSize"] = o.VmSize
	}
	if !isNil(o.VnetSubnetID) {
		toSerialize["vnetSubnetID"] = o.VnetSubnetID
	}
	if !isNil(o.WorkloadRuntime) {
		toSerialize["workloadRuntime"] = o.WorkloadRuntime
	}
	return toSerialize, nil
}

type NullableNodePoolProperties struct {
	value *NodePoolProperties
	isSet bool
}

func (v NullableNodePoolProperties) Get() *NodePoolProperties {
	return v.value
}

func (v *NullableNodePoolProperties) Set(val *NodePoolProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePoolProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePoolProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePoolProperties(val *NodePoolProperties) *NullableNodePoolProperties {
	return &NullableNodePoolProperties{value: val, isSet: true}
}

func (v NullableNodePoolProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePoolProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


