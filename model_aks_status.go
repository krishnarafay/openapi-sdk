/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the AKSStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AKSStatus{}

// AKSStatus struct for AKSStatus
type AKSStatus struct {
	IdentityProfile *IdentityProfile `json:"identityProfile,omitempty"`
	Nodepools []NodepoolStatus `json:"nodepools,omitempty"`
}

// NewAKSStatus instantiates a new AKSStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAKSStatus() *AKSStatus {
	this := AKSStatus{}
	return &this
}

// NewAKSStatusWithDefaults instantiates a new AKSStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAKSStatusWithDefaults() *AKSStatus {
	this := AKSStatus{}
	return &this
}

// GetIdentityProfile returns the IdentityProfile field value if set, zero value otherwise.
func (o *AKSStatus) GetIdentityProfile() IdentityProfile {
	if o == nil || isNil(o.IdentityProfile) {
		var ret IdentityProfile
		return ret
	}
	return *o.IdentityProfile
}

// GetIdentityProfileOk returns a tuple with the IdentityProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AKSStatus) GetIdentityProfileOk() (*IdentityProfile, bool) {
	if o == nil || isNil(o.IdentityProfile) {
		return nil, false
	}
	return o.IdentityProfile, true
}

// HasIdentityProfile returns a boolean if a field has been set.
func (o *AKSStatus) HasIdentityProfile() bool {
	if o != nil && !isNil(o.IdentityProfile) {
		return true
	}

	return false
}

// SetIdentityProfile gets a reference to the given IdentityProfile and assigns it to the IdentityProfile field.
func (o *AKSStatus) SetIdentityProfile(v IdentityProfile) {
	o.IdentityProfile = &v
}

// GetNodepools returns the Nodepools field value if set, zero value otherwise.
func (o *AKSStatus) GetNodepools() []NodepoolStatus {
	if o == nil || isNil(o.Nodepools) {
		var ret []NodepoolStatus
		return ret
	}
	return o.Nodepools
}

// GetNodepoolsOk returns a tuple with the Nodepools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AKSStatus) GetNodepoolsOk() ([]NodepoolStatus, bool) {
	if o == nil || isNil(o.Nodepools) {
		return nil, false
	}
	return o.Nodepools, true
}

// HasNodepools returns a boolean if a field has been set.
func (o *AKSStatus) HasNodepools() bool {
	if o != nil && !isNil(o.Nodepools) {
		return true
	}

	return false
}

// SetNodepools gets a reference to the given []NodepoolStatus and assigns it to the Nodepools field.
func (o *AKSStatus) SetNodepools(v []NodepoolStatus) {
	o.Nodepools = v
}

func (o AKSStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AKSStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.IdentityProfile) {
		toSerialize["identityProfile"] = o.IdentityProfile
	}
	if !isNil(o.Nodepools) {
		toSerialize["nodepools"] = o.Nodepools
	}
	return toSerialize, nil
}

type NullableAKSStatus struct {
	value *AKSStatus
	isSet bool
}

func (v NullableAKSStatus) Get() *AKSStatus {
	return v.value
}

func (v *NullableAKSStatus) Set(val *AKSStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAKSStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAKSStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAKSStatus(val *AKSStatus) *NullableAKSStatus {
	return &NullableAKSStatus{value: val, isSet: true}
}

func (v NullableAKSStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAKSStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


