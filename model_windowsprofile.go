/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Windowsprofile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Windowsprofile{}

// Windowsprofile struct for Windowsprofile
type Windowsprofile struct {
	// Specifies the name of the administrator account, Restriction: Cannot end in '.', Minimum-length: 1 character, Max-length: 20 characters
	AdminUsername *string `json:"adminUsername,omitempty"`
	// For more details on CSI proxy, see the CSI proxy GitHub repo.
	EnableCSIProxy *bool `json:"enableCSIProxy,omitempty"`
	GmsaProfile *Gmsaprofile `json:"gmsaProfile,omitempty"`
	// The license type to use for Windows VMs. See Azure Hybrid User Benefits for more details. Valid values are None, Windows_Server.
	LicenseType *string `json:"licenseType,omitempty"`
}

// NewWindowsprofile instantiates a new Windowsprofile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWindowsprofile() *Windowsprofile {
	this := Windowsprofile{}
	return &this
}

// NewWindowsprofileWithDefaults instantiates a new Windowsprofile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWindowsprofileWithDefaults() *Windowsprofile {
	this := Windowsprofile{}
	return &this
}

// GetAdminUsername returns the AdminUsername field value if set, zero value otherwise.
func (o *Windowsprofile) GetAdminUsername() string {
	if o == nil || isNil(o.AdminUsername) {
		var ret string
		return ret
	}
	return *o.AdminUsername
}

// GetAdminUsernameOk returns a tuple with the AdminUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Windowsprofile) GetAdminUsernameOk() (*string, bool) {
	if o == nil || isNil(o.AdminUsername) {
		return nil, false
	}
	return o.AdminUsername, true
}

// HasAdminUsername returns a boolean if a field has been set.
func (o *Windowsprofile) HasAdminUsername() bool {
	if o != nil && !isNil(o.AdminUsername) {
		return true
	}

	return false
}

// SetAdminUsername gets a reference to the given string and assigns it to the AdminUsername field.
func (o *Windowsprofile) SetAdminUsername(v string) {
	o.AdminUsername = &v
}

// GetEnableCSIProxy returns the EnableCSIProxy field value if set, zero value otherwise.
func (o *Windowsprofile) GetEnableCSIProxy() bool {
	if o == nil || isNil(o.EnableCSIProxy) {
		var ret bool
		return ret
	}
	return *o.EnableCSIProxy
}

// GetEnableCSIProxyOk returns a tuple with the EnableCSIProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Windowsprofile) GetEnableCSIProxyOk() (*bool, bool) {
	if o == nil || isNil(o.EnableCSIProxy) {
		return nil, false
	}
	return o.EnableCSIProxy, true
}

// HasEnableCSIProxy returns a boolean if a field has been set.
func (o *Windowsprofile) HasEnableCSIProxy() bool {
	if o != nil && !isNil(o.EnableCSIProxy) {
		return true
	}

	return false
}

// SetEnableCSIProxy gets a reference to the given bool and assigns it to the EnableCSIProxy field.
func (o *Windowsprofile) SetEnableCSIProxy(v bool) {
	o.EnableCSIProxy = &v
}

// GetGmsaProfile returns the GmsaProfile field value if set, zero value otherwise.
func (o *Windowsprofile) GetGmsaProfile() Gmsaprofile {
	if o == nil || isNil(o.GmsaProfile) {
		var ret Gmsaprofile
		return ret
	}
	return *o.GmsaProfile
}

// GetGmsaProfileOk returns a tuple with the GmsaProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Windowsprofile) GetGmsaProfileOk() (*Gmsaprofile, bool) {
	if o == nil || isNil(o.GmsaProfile) {
		return nil, false
	}
	return o.GmsaProfile, true
}

// HasGmsaProfile returns a boolean if a field has been set.
func (o *Windowsprofile) HasGmsaProfile() bool {
	if o != nil && !isNil(o.GmsaProfile) {
		return true
	}

	return false
}

// SetGmsaProfile gets a reference to the given Gmsaprofile and assigns it to the GmsaProfile field.
func (o *Windowsprofile) SetGmsaProfile(v Gmsaprofile) {
	o.GmsaProfile = &v
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *Windowsprofile) GetLicenseType() string {
	if o == nil || isNil(o.LicenseType) {
		var ret string
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Windowsprofile) GetLicenseTypeOk() (*string, bool) {
	if o == nil || isNil(o.LicenseType) {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *Windowsprofile) HasLicenseType() bool {
	if o != nil && !isNil(o.LicenseType) {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given string and assigns it to the LicenseType field.
func (o *Windowsprofile) SetLicenseType(v string) {
	o.LicenseType = &v
}

func (o Windowsprofile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Windowsprofile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AdminUsername) {
		toSerialize["adminUsername"] = o.AdminUsername
	}
	if !isNil(o.EnableCSIProxy) {
		toSerialize["enableCSIProxy"] = o.EnableCSIProxy
	}
	if !isNil(o.GmsaProfile) {
		toSerialize["gmsaProfile"] = o.GmsaProfile
	}
	if !isNil(o.LicenseType) {
		toSerialize["licenseType"] = o.LicenseType
	}
	return toSerialize, nil
}

type NullableWindowsprofile struct {
	value *Windowsprofile
	isSet bool
}

func (v NullableWindowsprofile) Get() *Windowsprofile {
	return v.value
}

func (v *NullableWindowsprofile) Set(val *Windowsprofile) {
	v.value = val
	v.isSet = true
}

func (v NullableWindowsprofile) IsSet() bool {
	return v.isSet
}

func (v *NullableWindowsprofile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWindowsprofile(val *Windowsprofile) *NullableWindowsprofile {
	return &NullableWindowsprofile{value: val, isSet: true}
}

func (v NullableWindowsprofile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWindowsprofile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


