/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Sharing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sharing{}

// Sharing struct for Sharing
type Sharing struct {
	Enabled *bool `json:"enabled,omitempty"`
	Projects []Projects `json:"projects,omitempty"`
}

// NewSharing instantiates a new Sharing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharing() *Sharing {
	this := Sharing{}
	return &this
}

// NewSharingWithDefaults instantiates a new Sharing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharingWithDefaults() *Sharing {
	this := Sharing{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *Sharing) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharing) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *Sharing) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *Sharing) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *Sharing) GetProjects() []Projects {
	if o == nil || isNil(o.Projects) {
		var ret []Projects
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sharing) GetProjectsOk() ([]Projects, bool) {
	if o == nil || isNil(o.Projects) {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *Sharing) HasProjects() bool {
	if o != nil && !isNil(o.Projects) {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []Projects and assigns it to the Projects field.
func (o *Sharing) SetProjects(v []Projects) {
	o.Projects = v
}

func (o Sharing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sharing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Projects) {
		toSerialize["projects"] = o.Projects
	}
	return toSerialize, nil
}

type NullableSharing struct {
	value *Sharing
	isSet bool
}

func (v NullableSharing) Get() *Sharing {
	return v.value
}

func (v *NullableSharing) Set(val *Sharing) {
	v.value = val
	v.isSet = true
}

func (v NullableSharing) IsSet() bool {
	return v.isSet
}

func (v *NullableSharing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharing(val *Sharing) *NullableSharing {
	return &NullableSharing{value: val, isSet: true}
}

func (v NullableSharing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


