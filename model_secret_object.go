/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the SecretObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretObject{}

// SecretObject struct for SecretObject
type SecretObject struct {
	Annotations *map[string]string `json:"annotations,omitempty"`
	Data []SecretObjectData `json:"data,omitempty"`
	Labels *map[string]string `json:"labels,omitempty"`
	SecretName *string `json:"secretName,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewSecretObject instantiates a new SecretObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretObject() *SecretObject {
	this := SecretObject{}
	return &this
}

// NewSecretObjectWithDefaults instantiates a new SecretObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretObjectWithDefaults() *SecretObject {
	this := SecretObject{}
	return &this
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *SecretObject) GetAnnotations() map[string]string {
	if o == nil || isNil(o.Annotations) {
		var ret map[string]string
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretObject) GetAnnotationsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Annotations) {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *SecretObject) HasAnnotations() bool {
	if o != nil && !isNil(o.Annotations) {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given map[string]string and assigns it to the Annotations field.
func (o *SecretObject) SetAnnotations(v map[string]string) {
	o.Annotations = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *SecretObject) GetData() []SecretObjectData {
	if o == nil || isNil(o.Data) {
		var ret []SecretObjectData
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretObject) GetDataOk() ([]SecretObjectData, bool) {
	if o == nil || isNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *SecretObject) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []SecretObjectData and assigns it to the Data field.
func (o *SecretObject) SetData(v []SecretObjectData) {
	o.Data = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *SecretObject) GetLabels() map[string]string {
	if o == nil || isNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretObject) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *SecretObject) HasLabels() bool {
	if o != nil && !isNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *SecretObject) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetSecretName returns the SecretName field value if set, zero value otherwise.
func (o *SecretObject) GetSecretName() string {
	if o == nil || isNil(o.SecretName) {
		var ret string
		return ret
	}
	return *o.SecretName
}

// GetSecretNameOk returns a tuple with the SecretName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretObject) GetSecretNameOk() (*string, bool) {
	if o == nil || isNil(o.SecretName) {
		return nil, false
	}
	return o.SecretName, true
}

// HasSecretName returns a boolean if a field has been set.
func (o *SecretObject) HasSecretName() bool {
	if o != nil && !isNil(o.SecretName) {
		return true
	}

	return false
}

// SetSecretName gets a reference to the given string and assigns it to the SecretName field.
func (o *SecretObject) SetSecretName(v string) {
	o.SecretName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SecretObject) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretObject) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SecretObject) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SecretObject) SetType(v string) {
	o.Type = &v
}

func (o SecretObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Annotations) {
		toSerialize["annotations"] = o.Annotations
	}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !isNil(o.SecretName) {
		toSerialize["secretName"] = o.SecretName
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableSecretObject struct {
	value *SecretObject
	isSet bool
}

func (v NullableSecretObject) Get() *SecretObject {
	return v.value
}

func (v *NullableSecretObject) Set(val *SecretObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretObject(val *SecretObject) *NullableSecretObject {
	return &NullableSecretObject{value: val, isSet: true}
}

func (v NullableSecretObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


