/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the TerraformDeployHooks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformDeployHooks{}

// TerraformDeployHooks struct for TerraformDeployHooks
type TerraformDeployHooks struct {
	Apply *LifecycleEventHooks `json:"apply,omitempty"`
	Init *LifecycleEventHooks `json:"init,omitempty"`
	Output *LifecycleEventHooks `json:"output,omitempty"`
	Plan *LifecycleEventHooks `json:"plan,omitempty"`
	StoreState *LifecycleEventHooks `json:"storeState,omitempty"`
}

// NewTerraformDeployHooks instantiates a new TerraformDeployHooks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformDeployHooks() *TerraformDeployHooks {
	this := TerraformDeployHooks{}
	return &this
}

// NewTerraformDeployHooksWithDefaults instantiates a new TerraformDeployHooks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformDeployHooksWithDefaults() *TerraformDeployHooks {
	this := TerraformDeployHooks{}
	return &this
}

// GetApply returns the Apply field value if set, zero value otherwise.
func (o *TerraformDeployHooks) GetApply() LifecycleEventHooks {
	if o == nil || isNil(o.Apply) {
		var ret LifecycleEventHooks
		return ret
	}
	return *o.Apply
}

// GetApplyOk returns a tuple with the Apply field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeployHooks) GetApplyOk() (*LifecycleEventHooks, bool) {
	if o == nil || isNil(o.Apply) {
		return nil, false
	}
	return o.Apply, true
}

// HasApply returns a boolean if a field has been set.
func (o *TerraformDeployHooks) HasApply() bool {
	if o != nil && !isNil(o.Apply) {
		return true
	}

	return false
}

// SetApply gets a reference to the given LifecycleEventHooks and assigns it to the Apply field.
func (o *TerraformDeployHooks) SetApply(v LifecycleEventHooks) {
	o.Apply = &v
}

// GetInit returns the Init field value if set, zero value otherwise.
func (o *TerraformDeployHooks) GetInit() LifecycleEventHooks {
	if o == nil || isNil(o.Init) {
		var ret LifecycleEventHooks
		return ret
	}
	return *o.Init
}

// GetInitOk returns a tuple with the Init field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeployHooks) GetInitOk() (*LifecycleEventHooks, bool) {
	if o == nil || isNil(o.Init) {
		return nil, false
	}
	return o.Init, true
}

// HasInit returns a boolean if a field has been set.
func (o *TerraformDeployHooks) HasInit() bool {
	if o != nil && !isNil(o.Init) {
		return true
	}

	return false
}

// SetInit gets a reference to the given LifecycleEventHooks and assigns it to the Init field.
func (o *TerraformDeployHooks) SetInit(v LifecycleEventHooks) {
	o.Init = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *TerraformDeployHooks) GetOutput() LifecycleEventHooks {
	if o == nil || isNil(o.Output) {
		var ret LifecycleEventHooks
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeployHooks) GetOutputOk() (*LifecycleEventHooks, bool) {
	if o == nil || isNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *TerraformDeployHooks) HasOutput() bool {
	if o != nil && !isNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given LifecycleEventHooks and assigns it to the Output field.
func (o *TerraformDeployHooks) SetOutput(v LifecycleEventHooks) {
	o.Output = &v
}

// GetPlan returns the Plan field value if set, zero value otherwise.
func (o *TerraformDeployHooks) GetPlan() LifecycleEventHooks {
	if o == nil || isNil(o.Plan) {
		var ret LifecycleEventHooks
		return ret
	}
	return *o.Plan
}

// GetPlanOk returns a tuple with the Plan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeployHooks) GetPlanOk() (*LifecycleEventHooks, bool) {
	if o == nil || isNil(o.Plan) {
		return nil, false
	}
	return o.Plan, true
}

// HasPlan returns a boolean if a field has been set.
func (o *TerraformDeployHooks) HasPlan() bool {
	if o != nil && !isNil(o.Plan) {
		return true
	}

	return false
}

// SetPlan gets a reference to the given LifecycleEventHooks and assigns it to the Plan field.
func (o *TerraformDeployHooks) SetPlan(v LifecycleEventHooks) {
	o.Plan = &v
}

// GetStoreState returns the StoreState field value if set, zero value otherwise.
func (o *TerraformDeployHooks) GetStoreState() LifecycleEventHooks {
	if o == nil || isNil(o.StoreState) {
		var ret LifecycleEventHooks
		return ret
	}
	return *o.StoreState
}

// GetStoreStateOk returns a tuple with the StoreState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformDeployHooks) GetStoreStateOk() (*LifecycleEventHooks, bool) {
	if o == nil || isNil(o.StoreState) {
		return nil, false
	}
	return o.StoreState, true
}

// HasStoreState returns a boolean if a field has been set.
func (o *TerraformDeployHooks) HasStoreState() bool {
	if o != nil && !isNil(o.StoreState) {
		return true
	}

	return false
}

// SetStoreState gets a reference to the given LifecycleEventHooks and assigns it to the StoreState field.
func (o *TerraformDeployHooks) SetStoreState(v LifecycleEventHooks) {
	o.StoreState = &v
}

func (o TerraformDeployHooks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformDeployHooks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Apply) {
		toSerialize["apply"] = o.Apply
	}
	if !isNil(o.Init) {
		toSerialize["init"] = o.Init
	}
	if !isNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !isNil(o.Plan) {
		toSerialize["plan"] = o.Plan
	}
	if !isNil(o.StoreState) {
		toSerialize["storeState"] = o.StoreState
	}
	return toSerialize, nil
}

type NullableTerraformDeployHooks struct {
	value *TerraformDeployHooks
	isSet bool
}

func (v NullableTerraformDeployHooks) Get() *TerraformDeployHooks {
	return v.value
}

func (v *NullableTerraformDeployHooks) Set(val *TerraformDeployHooks) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformDeployHooks) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformDeployHooks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformDeployHooks(val *TerraformDeployHooks) *NullableTerraformDeployHooks {
	return &NullableTerraformDeployHooks{value: val, isSet: true}
}

func (v NullableTerraformDeployHooks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformDeployHooks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


