/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Managedoutboundips type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Managedoutboundips{}

// Managedoutboundips struct for Managedoutboundips
type Managedoutboundips struct {
	// The desired number of IPv4 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 1.
	Count *int32 `json:"count,omitempty"`
	// The desired number of IPv6 outbound IPs created/managed by Azure for the cluster load balancer. Allowed values must be in the range of 1 to 100 (inclusive). The default value is 0 for single-stack and 1 for dual-stack.
	CountIPv6 *int32 `json:"countIPv6,omitempty"`
}

// NewManagedoutboundips instantiates a new Managedoutboundips object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedoutboundips() *Managedoutboundips {
	this := Managedoutboundips{}
	return &this
}

// NewManagedoutboundipsWithDefaults instantiates a new Managedoutboundips object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedoutboundipsWithDefaults() *Managedoutboundips {
	this := Managedoutboundips{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *Managedoutboundips) GetCount() int32 {
	if o == nil || isNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Managedoutboundips) GetCountOk() (*int32, bool) {
	if o == nil || isNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *Managedoutboundips) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *Managedoutboundips) SetCount(v int32) {
	o.Count = &v
}

// GetCountIPv6 returns the CountIPv6 field value if set, zero value otherwise.
func (o *Managedoutboundips) GetCountIPv6() int32 {
	if o == nil || isNil(o.CountIPv6) {
		var ret int32
		return ret
	}
	return *o.CountIPv6
}

// GetCountIPv6Ok returns a tuple with the CountIPv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Managedoutboundips) GetCountIPv6Ok() (*int32, bool) {
	if o == nil || isNil(o.CountIPv6) {
		return nil, false
	}
	return o.CountIPv6, true
}

// HasCountIPv6 returns a boolean if a field has been set.
func (o *Managedoutboundips) HasCountIPv6() bool {
	if o != nil && !isNil(o.CountIPv6) {
		return true
	}

	return false
}

// SetCountIPv6 gets a reference to the given int32 and assigns it to the CountIPv6 field.
func (o *Managedoutboundips) SetCountIPv6(v int32) {
	o.CountIPv6 = &v
}

func (o Managedoutboundips) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Managedoutboundips) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !isNil(o.CountIPv6) {
		toSerialize["countIPv6"] = o.CountIPv6
	}
	return toSerialize, nil
}

type NullableManagedoutboundips struct {
	value *Managedoutboundips
	isSet bool
}

func (v NullableManagedoutboundips) Get() *Managedoutboundips {
	return v.value
}

func (v *NullableManagedoutboundips) Set(val *Managedoutboundips) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedoutboundips) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedoutboundips) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedoutboundips(val *Managedoutboundips) *NullableManagedoutboundips {
	return &NullableManagedoutboundips{value: val, isSet: true}
}

func (v NullableManagedoutboundips) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedoutboundips) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


