/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the ServiceMesh type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceMesh{}

// ServiceMesh Service Mesh Profile and Policies details
type ServiceMesh struct {
	// flag to specify if service mesh is enabled for blueprint
	Enabled *bool `json:"enabled,omitempty"`
	// name and version of cluster mesh policy
	Policies []ResourceNameAndVersionRef `json:"policies,omitempty"`
	Profile *ResourceNameAndVersionRef `json:"profile,omitempty"`
}

// NewServiceMesh instantiates a new ServiceMesh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceMesh() *ServiceMesh {
	this := ServiceMesh{}
	return &this
}

// NewServiceMeshWithDefaults instantiates a new ServiceMesh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceMeshWithDefaults() *ServiceMesh {
	this := ServiceMesh{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *ServiceMesh) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMesh) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *ServiceMesh) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *ServiceMesh) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetPolicies returns the Policies field value if set, zero value otherwise.
func (o *ServiceMesh) GetPolicies() []ResourceNameAndVersionRef {
	if o == nil || isNil(o.Policies) {
		var ret []ResourceNameAndVersionRef
		return ret
	}
	return o.Policies
}

// GetPoliciesOk returns a tuple with the Policies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMesh) GetPoliciesOk() ([]ResourceNameAndVersionRef, bool) {
	if o == nil || isNil(o.Policies) {
		return nil, false
	}
	return o.Policies, true
}

// HasPolicies returns a boolean if a field has been set.
func (o *ServiceMesh) HasPolicies() bool {
	if o != nil && !isNil(o.Policies) {
		return true
	}

	return false
}

// SetPolicies gets a reference to the given []ResourceNameAndVersionRef and assigns it to the Policies field.
func (o *ServiceMesh) SetPolicies(v []ResourceNameAndVersionRef) {
	o.Policies = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *ServiceMesh) GetProfile() ResourceNameAndVersionRef {
	if o == nil || isNil(o.Profile) {
		var ret ResourceNameAndVersionRef
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceMesh) GetProfileOk() (*ResourceNameAndVersionRef, bool) {
	if o == nil || isNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *ServiceMesh) HasProfile() bool {
	if o != nil && !isNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given ResourceNameAndVersionRef and assigns it to the Profile field.
func (o *ServiceMesh) SetProfile(v ResourceNameAndVersionRef) {
	o.Profile = &v
}

func (o ServiceMesh) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceMesh) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.Policies) {
		toSerialize["policies"] = o.Policies
	}
	if !isNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	return toSerialize, nil
}

type NullableServiceMesh struct {
	value *ServiceMesh
	isSet bool
}

func (v NullableServiceMesh) Get() *ServiceMesh {
	return v.value
}

func (v *NullableServiceMesh) Set(val *ServiceMesh) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceMesh) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceMesh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceMesh(val *ServiceMesh) *NullableServiceMesh {
	return &NullableServiceMesh{value: val, isSet: true}
}

func (v NullableServiceMesh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceMesh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


