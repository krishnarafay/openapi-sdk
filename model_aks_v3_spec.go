/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the AksV3Spec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AksV3Spec{}

// AksV3Spec struct for AksV3Spec
type AksV3Spec struct {
	ManagedCluster *Managedcluster `json:"managedCluster,omitempty"`
	NodePools []Nodepool `json:"nodePools,omitempty"`
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`
	SubscriptionID *string `json:"subscriptionID,omitempty"`
}

// NewAksV3Spec instantiates a new AksV3Spec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAksV3Spec() *AksV3Spec {
	this := AksV3Spec{}
	return &this
}

// NewAksV3SpecWithDefaults instantiates a new AksV3Spec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAksV3SpecWithDefaults() *AksV3Spec {
	this := AksV3Spec{}
	return &this
}

// GetManagedCluster returns the ManagedCluster field value if set, zero value otherwise.
func (o *AksV3Spec) GetManagedCluster() Managedcluster {
	if o == nil || isNil(o.ManagedCluster) {
		var ret Managedcluster
		return ret
	}
	return *o.ManagedCluster
}

// GetManagedClusterOk returns a tuple with the ManagedCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AksV3Spec) GetManagedClusterOk() (*Managedcluster, bool) {
	if o == nil || isNil(o.ManagedCluster) {
		return nil, false
	}
	return o.ManagedCluster, true
}

// HasManagedCluster returns a boolean if a field has been set.
func (o *AksV3Spec) HasManagedCluster() bool {
	if o != nil && !isNil(o.ManagedCluster) {
		return true
	}

	return false
}

// SetManagedCluster gets a reference to the given Managedcluster and assigns it to the ManagedCluster field.
func (o *AksV3Spec) SetManagedCluster(v Managedcluster) {
	o.ManagedCluster = &v
}

// GetNodePools returns the NodePools field value if set, zero value otherwise.
func (o *AksV3Spec) GetNodePools() []Nodepool {
	if o == nil || isNil(o.NodePools) {
		var ret []Nodepool
		return ret
	}
	return o.NodePools
}

// GetNodePoolsOk returns a tuple with the NodePools field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AksV3Spec) GetNodePoolsOk() ([]Nodepool, bool) {
	if o == nil || isNil(o.NodePools) {
		return nil, false
	}
	return o.NodePools, true
}

// HasNodePools returns a boolean if a field has been set.
func (o *AksV3Spec) HasNodePools() bool {
	if o != nil && !isNil(o.NodePools) {
		return true
	}

	return false
}

// SetNodePools gets a reference to the given []Nodepool and assigns it to the NodePools field.
func (o *AksV3Spec) SetNodePools(v []Nodepool) {
	o.NodePools = v
}

// GetResourceGroupName returns the ResourceGroupName field value if set, zero value otherwise.
func (o *AksV3Spec) GetResourceGroupName() string {
	if o == nil || isNil(o.ResourceGroupName) {
		var ret string
		return ret
	}
	return *o.ResourceGroupName
}

// GetResourceGroupNameOk returns a tuple with the ResourceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AksV3Spec) GetResourceGroupNameOk() (*string, bool) {
	if o == nil || isNil(o.ResourceGroupName) {
		return nil, false
	}
	return o.ResourceGroupName, true
}

// HasResourceGroupName returns a boolean if a field has been set.
func (o *AksV3Spec) HasResourceGroupName() bool {
	if o != nil && !isNil(o.ResourceGroupName) {
		return true
	}

	return false
}

// SetResourceGroupName gets a reference to the given string and assigns it to the ResourceGroupName field.
func (o *AksV3Spec) SetResourceGroupName(v string) {
	o.ResourceGroupName = &v
}

// GetSubscriptionID returns the SubscriptionID field value if set, zero value otherwise.
func (o *AksV3Spec) GetSubscriptionID() string {
	if o == nil || isNil(o.SubscriptionID) {
		var ret string
		return ret
	}
	return *o.SubscriptionID
}

// GetSubscriptionIDOk returns a tuple with the SubscriptionID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AksV3Spec) GetSubscriptionIDOk() (*string, bool) {
	if o == nil || isNil(o.SubscriptionID) {
		return nil, false
	}
	return o.SubscriptionID, true
}

// HasSubscriptionID returns a boolean if a field has been set.
func (o *AksV3Spec) HasSubscriptionID() bool {
	if o != nil && !isNil(o.SubscriptionID) {
		return true
	}

	return false
}

// SetSubscriptionID gets a reference to the given string and assigns it to the SubscriptionID field.
func (o *AksV3Spec) SetSubscriptionID(v string) {
	o.SubscriptionID = &v
}

func (o AksV3Spec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AksV3Spec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ManagedCluster) {
		toSerialize["managedCluster"] = o.ManagedCluster
	}
	if !isNil(o.NodePools) {
		toSerialize["nodePools"] = o.NodePools
	}
	if !isNil(o.ResourceGroupName) {
		toSerialize["resourceGroupName"] = o.ResourceGroupName
	}
	if !isNil(o.SubscriptionID) {
		toSerialize["subscriptionID"] = o.SubscriptionID
	}
	return toSerialize, nil
}

type NullableAksV3Spec struct {
	value *AksV3Spec
	isSet bool
}

func (v NullableAksV3Spec) Get() *AksV3Spec {
	return v.value
}

func (v *NullableAksV3Spec) Set(val *AksV3Spec) {
	v.value = val
	v.isSet = true
}

func (v NullableAksV3Spec) IsSet() bool {
	return v.isSet
}

func (v *NullableAksV3Spec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAksV3Spec(val *AksV3Spec) *NullableAksV3Spec {
	return &NullableAksV3Spec{value: val, isSet: true}
}

func (v NullableAksV3Spec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAksV3Spec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


