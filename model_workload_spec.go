/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the WorkloadSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadSpec{}

// WorkloadSpec workload specification
type WorkloadSpec struct {
	Artifact *ArtifactSpec `json:"artifact,omitempty"`
	Drift *DriftSpec `json:"drift,omitempty"`
	// namespace of the workload resource
	Namespace *string `json:"namespace,omitempty"`
	Placement *PlacementSpec `json:"placement,omitempty"`
	// version of the workload resource
	Version *string `json:"version,omitempty"`
}

// NewWorkloadSpec instantiates a new WorkloadSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadSpec() *WorkloadSpec {
	this := WorkloadSpec{}
	return &this
}

// NewWorkloadSpecWithDefaults instantiates a new WorkloadSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadSpecWithDefaults() *WorkloadSpec {
	this := WorkloadSpec{}
	return &this
}

// GetArtifact returns the Artifact field value if set, zero value otherwise.
func (o *WorkloadSpec) GetArtifact() ArtifactSpec {
	if o == nil || isNil(o.Artifact) {
		var ret ArtifactSpec
		return ret
	}
	return *o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadSpec) GetArtifactOk() (*ArtifactSpec, bool) {
	if o == nil || isNil(o.Artifact) {
		return nil, false
	}
	return o.Artifact, true
}

// HasArtifact returns a boolean if a field has been set.
func (o *WorkloadSpec) HasArtifact() bool {
	if o != nil && !isNil(o.Artifact) {
		return true
	}

	return false
}

// SetArtifact gets a reference to the given ArtifactSpec and assigns it to the Artifact field.
func (o *WorkloadSpec) SetArtifact(v ArtifactSpec) {
	o.Artifact = &v
}

// GetDrift returns the Drift field value if set, zero value otherwise.
func (o *WorkloadSpec) GetDrift() DriftSpec {
	if o == nil || isNil(o.Drift) {
		var ret DriftSpec
		return ret
	}
	return *o.Drift
}

// GetDriftOk returns a tuple with the Drift field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadSpec) GetDriftOk() (*DriftSpec, bool) {
	if o == nil || isNil(o.Drift) {
		return nil, false
	}
	return o.Drift, true
}

// HasDrift returns a boolean if a field has been set.
func (o *WorkloadSpec) HasDrift() bool {
	if o != nil && !isNil(o.Drift) {
		return true
	}

	return false
}

// SetDrift gets a reference to the given DriftSpec and assigns it to the Drift field.
func (o *WorkloadSpec) SetDrift(v DriftSpec) {
	o.Drift = &v
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *WorkloadSpec) GetNamespace() string {
	if o == nil || isNil(o.Namespace) {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadSpec) GetNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.Namespace) {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *WorkloadSpec) HasNamespace() bool {
	if o != nil && !isNil(o.Namespace) {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *WorkloadSpec) SetNamespace(v string) {
	o.Namespace = &v
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *WorkloadSpec) GetPlacement() PlacementSpec {
	if o == nil || isNil(o.Placement) {
		var ret PlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadSpec) GetPlacementOk() (*PlacementSpec, bool) {
	if o == nil || isNil(o.Placement) {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *WorkloadSpec) HasPlacement() bool {
	if o != nil && !isNil(o.Placement) {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given PlacementSpec and assigns it to the Placement field.
func (o *WorkloadSpec) SetPlacement(v PlacementSpec) {
	o.Placement = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *WorkloadSpec) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkloadSpec) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *WorkloadSpec) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *WorkloadSpec) SetVersion(v string) {
	o.Version = &v
}

func (o WorkloadSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Artifact) {
		toSerialize["artifact"] = o.Artifact
	}
	if !isNil(o.Drift) {
		toSerialize["drift"] = o.Drift
	}
	if !isNil(o.Namespace) {
		toSerialize["namespace"] = o.Namespace
	}
	if !isNil(o.Placement) {
		toSerialize["placement"] = o.Placement
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableWorkloadSpec struct {
	value *WorkloadSpec
	isSet bool
}

func (v NullableWorkloadSpec) Get() *WorkloadSpec {
	return v.value
}

func (v *NullableWorkloadSpec) Set(val *WorkloadSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadSpec(val *WorkloadSpec) *NullableWorkloadSpec {
	return &NullableWorkloadSpec{value: val, isSet: true}
}

func (v NullableWorkloadSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


