/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Extendedlocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Extendedlocation{}

// Extendedlocation struct for Extendedlocation
type Extendedlocation struct {
	// The name of the extended location.
	Name *string `json:"name,omitempty"`
	// The type of the extended location.
	Type *string `json:"type,omitempty"`
}

// NewExtendedlocation instantiates a new Extendedlocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedlocation() *Extendedlocation {
	this := Extendedlocation{}
	return &this
}

// NewExtendedlocationWithDefaults instantiates a new Extendedlocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedlocationWithDefaults() *Extendedlocation {
	this := Extendedlocation{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Extendedlocation) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extendedlocation) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Extendedlocation) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Extendedlocation) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Extendedlocation) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Extendedlocation) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Extendedlocation) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Extendedlocation) SetType(v string) {
	o.Type = &v
}

func (o Extendedlocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Extendedlocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableExtendedlocation struct {
	value *Extendedlocation
	isSet bool
}

func (v NullableExtendedlocation) Get() *Extendedlocation {
	return v.value
}

func (v *NullableExtendedlocation) Set(val *Extendedlocation) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedlocation) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedlocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedlocation(val *Extendedlocation) *NullableExtendedlocation {
	return &NullableExtendedlocation{value: val, isSet: true}
}

func (v NullableExtendedlocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedlocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


