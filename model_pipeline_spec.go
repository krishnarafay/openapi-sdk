/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the PipelineSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineSpec{}

// PipelineSpec pipeline specification
type PipelineSpec struct {
	// flag to indicate if pipeline is active
	Active *bool `json:"active,omitempty"`
	Secret *File `json:"secret,omitempty"`
	Sharing *SharingSpec `json:"sharing,omitempty"`
	// stages in the pipeline
	Stages []StageSpec `json:"stages"`
	// triggers for the pipeline
	Triggers []TriggerSpec `json:"triggers,omitempty"`
	// pipeline scoped variables
	Variables []VariableSpec `json:"variables,omitempty"`
}

// NewPipelineSpec instantiates a new PipelineSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineSpec(stages []StageSpec) *PipelineSpec {
	this := PipelineSpec{}
	this.Stages = stages
	return &this
}

// NewPipelineSpecWithDefaults instantiates a new PipelineSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineSpecWithDefaults() *PipelineSpec {
	this := PipelineSpec{}
	return &this
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *PipelineSpec) GetActive() bool {
	if o == nil || isNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineSpec) GetActiveOk() (*bool, bool) {
	if o == nil || isNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *PipelineSpec) HasActive() bool {
	if o != nil && !isNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *PipelineSpec) SetActive(v bool) {
	o.Active = &v
}

// GetSecret returns the Secret field value if set, zero value otherwise.
func (o *PipelineSpec) GetSecret() File {
	if o == nil || isNil(o.Secret) {
		var ret File
		return ret
	}
	return *o.Secret
}

// GetSecretOk returns a tuple with the Secret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineSpec) GetSecretOk() (*File, bool) {
	if o == nil || isNil(o.Secret) {
		return nil, false
	}
	return o.Secret, true
}

// HasSecret returns a boolean if a field has been set.
func (o *PipelineSpec) HasSecret() bool {
	if o != nil && !isNil(o.Secret) {
		return true
	}

	return false
}

// SetSecret gets a reference to the given File and assigns it to the Secret field.
func (o *PipelineSpec) SetSecret(v File) {
	o.Secret = &v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *PipelineSpec) GetSharing() SharingSpec {
	if o == nil || isNil(o.Sharing) {
		var ret SharingSpec
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineSpec) GetSharingOk() (*SharingSpec, bool) {
	if o == nil || isNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *PipelineSpec) HasSharing() bool {
	if o != nil && !isNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given SharingSpec and assigns it to the Sharing field.
func (o *PipelineSpec) SetSharing(v SharingSpec) {
	o.Sharing = &v
}

// GetStages returns the Stages field value
func (o *PipelineSpec) GetStages() []StageSpec {
	if o == nil {
		var ret []StageSpec
		return ret
	}

	return o.Stages
}

// GetStagesOk returns a tuple with the Stages field value
// and a boolean to check if the value has been set.
func (o *PipelineSpec) GetStagesOk() ([]StageSpec, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stages, true
}

// SetStages sets field value
func (o *PipelineSpec) SetStages(v []StageSpec) {
	o.Stages = v
}

// GetTriggers returns the Triggers field value if set, zero value otherwise.
func (o *PipelineSpec) GetTriggers() []TriggerSpec {
	if o == nil || isNil(o.Triggers) {
		var ret []TriggerSpec
		return ret
	}
	return o.Triggers
}

// GetTriggersOk returns a tuple with the Triggers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineSpec) GetTriggersOk() ([]TriggerSpec, bool) {
	if o == nil || isNil(o.Triggers) {
		return nil, false
	}
	return o.Triggers, true
}

// HasTriggers returns a boolean if a field has been set.
func (o *PipelineSpec) HasTriggers() bool {
	if o != nil && !isNil(o.Triggers) {
		return true
	}

	return false
}

// SetTriggers gets a reference to the given []TriggerSpec and assigns it to the Triggers field.
func (o *PipelineSpec) SetTriggers(v []TriggerSpec) {
	o.Triggers = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *PipelineSpec) GetVariables() []VariableSpec {
	if o == nil || isNil(o.Variables) {
		var ret []VariableSpec
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineSpec) GetVariablesOk() ([]VariableSpec, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *PipelineSpec) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []VariableSpec and assigns it to the Variables field.
func (o *PipelineSpec) SetVariables(v []VariableSpec) {
	o.Variables = v
}

func (o PipelineSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	if !isNil(o.Secret) {
		toSerialize["secret"] = o.Secret
	}
	if !isNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	toSerialize["stages"] = o.Stages
	if !isNil(o.Triggers) {
		toSerialize["triggers"] = o.Triggers
	}
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

type NullablePipelineSpec struct {
	value *PipelineSpec
	isSet bool
}

func (v NullablePipelineSpec) Get() *PipelineSpec {
	return v.value
}

func (v *NullablePipelineSpec) Set(val *PipelineSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineSpec(val *PipelineSpec) *NullablePipelineSpec {
	return &NullablePipelineSpec{value: val, isSet: true}
}

func (v NullablePipelineSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


