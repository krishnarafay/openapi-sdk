/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Hook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Hook{}

// Hook struct for Hook
type Hook struct {
	// Specify the resource ref agents
	Agents []ResourceNameAndVersionRef `json:"agents,omitempty"`
	// Specify the on failure action
	OnFailure *string `json:"onFailure,omitempty"`
	Options *HookOptions `json:"options,omitempty"`
	Retry *RetryOptions `json:"retry,omitempty"`
	// Specify the timeout in seconds
	TimeoutSeconds *int64 `json:"timeoutSeconds,omitempty"`
	// Specify the type of hook
	Type *string `json:"type,omitempty"`
}

// NewHook instantiates a new Hook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHook() *Hook {
	this := Hook{}
	return &this
}

// NewHookWithDefaults instantiates a new Hook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHookWithDefaults() *Hook {
	this := Hook{}
	return &this
}

// GetAgents returns the Agents field value if set, zero value otherwise.
func (o *Hook) GetAgents() []ResourceNameAndVersionRef {
	if o == nil || isNil(o.Agents) {
		var ret []ResourceNameAndVersionRef
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetAgentsOk() ([]ResourceNameAndVersionRef, bool) {
	if o == nil || isNil(o.Agents) {
		return nil, false
	}
	return o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *Hook) HasAgents() bool {
	if o != nil && !isNil(o.Agents) {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []ResourceNameAndVersionRef and assigns it to the Agents field.
func (o *Hook) SetAgents(v []ResourceNameAndVersionRef) {
	o.Agents = v
}

// GetOnFailure returns the OnFailure field value if set, zero value otherwise.
func (o *Hook) GetOnFailure() string {
	if o == nil || isNil(o.OnFailure) {
		var ret string
		return ret
	}
	return *o.OnFailure
}

// GetOnFailureOk returns a tuple with the OnFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetOnFailureOk() (*string, bool) {
	if o == nil || isNil(o.OnFailure) {
		return nil, false
	}
	return o.OnFailure, true
}

// HasOnFailure returns a boolean if a field has been set.
func (o *Hook) HasOnFailure() bool {
	if o != nil && !isNil(o.OnFailure) {
		return true
	}

	return false
}

// SetOnFailure gets a reference to the given string and assigns it to the OnFailure field.
func (o *Hook) SetOnFailure(v string) {
	o.OnFailure = &v
}

// GetOptions returns the Options field value if set, zero value otherwise.
func (o *Hook) GetOptions() HookOptions {
	if o == nil || isNil(o.Options) {
		var ret HookOptions
		return ret
	}
	return *o.Options
}

// GetOptionsOk returns a tuple with the Options field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetOptionsOk() (*HookOptions, bool) {
	if o == nil || isNil(o.Options) {
		return nil, false
	}
	return o.Options, true
}

// HasOptions returns a boolean if a field has been set.
func (o *Hook) HasOptions() bool {
	if o != nil && !isNil(o.Options) {
		return true
	}

	return false
}

// SetOptions gets a reference to the given HookOptions and assigns it to the Options field.
func (o *Hook) SetOptions(v HookOptions) {
	o.Options = &v
}

// GetRetry returns the Retry field value if set, zero value otherwise.
func (o *Hook) GetRetry() RetryOptions {
	if o == nil || isNil(o.Retry) {
		var ret RetryOptions
		return ret
	}
	return *o.Retry
}

// GetRetryOk returns a tuple with the Retry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetRetryOk() (*RetryOptions, bool) {
	if o == nil || isNil(o.Retry) {
		return nil, false
	}
	return o.Retry, true
}

// HasRetry returns a boolean if a field has been set.
func (o *Hook) HasRetry() bool {
	if o != nil && !isNil(o.Retry) {
		return true
	}

	return false
}

// SetRetry gets a reference to the given RetryOptions and assigns it to the Retry field.
func (o *Hook) SetRetry(v RetryOptions) {
	o.Retry = &v
}

// GetTimeoutSeconds returns the TimeoutSeconds field value if set, zero value otherwise.
func (o *Hook) GetTimeoutSeconds() int64 {
	if o == nil || isNil(o.TimeoutSeconds) {
		var ret int64
		return ret
	}
	return *o.TimeoutSeconds
}

// GetTimeoutSecondsOk returns a tuple with the TimeoutSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetTimeoutSecondsOk() (*int64, bool) {
	if o == nil || isNil(o.TimeoutSeconds) {
		return nil, false
	}
	return o.TimeoutSeconds, true
}

// HasTimeoutSeconds returns a boolean if a field has been set.
func (o *Hook) HasTimeoutSeconds() bool {
	if o != nil && !isNil(o.TimeoutSeconds) {
		return true
	}

	return false
}

// SetTimeoutSeconds gets a reference to the given int64 and assigns it to the TimeoutSeconds field.
func (o *Hook) SetTimeoutSeconds(v int64) {
	o.TimeoutSeconds = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Hook) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Hook) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Hook) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Hook) SetType(v string) {
	o.Type = &v
}

func (o Hook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Hook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Agents) {
		toSerialize["agents"] = o.Agents
	}
	if !isNil(o.OnFailure) {
		toSerialize["onFailure"] = o.OnFailure
	}
	if !isNil(o.Options) {
		toSerialize["options"] = o.Options
	}
	if !isNil(o.Retry) {
		toSerialize["retry"] = o.Retry
	}
	if !isNil(o.TimeoutSeconds) {
		toSerialize["timeoutSeconds"] = o.TimeoutSeconds
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableHook struct {
	value *Hook
	isSet bool
}

func (v NullableHook) Get() *Hook {
	return v.value
}

func (v *NullableHook) Set(val *Hook) {
	v.value = val
	v.isSet = true
}

func (v NullableHook) IsSet() bool {
	return v.isSet
}

func (v *NullableHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHook(val *Hook) *NullableHook {
	return &NullableHook{value: val, isSet: true}
}

func (v NullableHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


