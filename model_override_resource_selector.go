/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the OverrideResourceSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverrideResourceSelector{}

// OverrideResourceSelector override resource selector
type OverrideResourceSelector struct {
	// map of key value labels
	Labels *map[string]string `json:"labels,omitempty"`
	// select resource by name
	Name *string `json:"name,omitempty"`
	// kubernetes style resource selector
	Selector *string `json:"selector,omitempty"`
}

// NewOverrideResourceSelector instantiates a new OverrideResourceSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverrideResourceSelector() *OverrideResourceSelector {
	this := OverrideResourceSelector{}
	return &this
}

// NewOverrideResourceSelectorWithDefaults instantiates a new OverrideResourceSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverrideResourceSelectorWithDefaults() *OverrideResourceSelector {
	this := OverrideResourceSelector{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *OverrideResourceSelector) GetLabels() map[string]string {
	if o == nil || isNil(o.Labels) {
		var ret map[string]string
		return ret
	}
	return *o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideResourceSelector) GetLabelsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *OverrideResourceSelector) HasLabels() bool {
	if o != nil && !isNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given map[string]string and assigns it to the Labels field.
func (o *OverrideResourceSelector) SetLabels(v map[string]string) {
	o.Labels = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OverrideResourceSelector) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideResourceSelector) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OverrideResourceSelector) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OverrideResourceSelector) SetName(v string) {
	o.Name = &v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *OverrideResourceSelector) GetSelector() string {
	if o == nil || isNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideResourceSelector) GetSelectorOk() (*string, bool) {
	if o == nil || isNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *OverrideResourceSelector) HasSelector() bool {
	if o != nil && !isNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *OverrideResourceSelector) SetSelector(v string) {
	o.Selector = &v
}

func (o OverrideResourceSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverrideResourceSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	return toSerialize, nil
}

type NullableOverrideResourceSelector struct {
	value *OverrideResourceSelector
	isSet bool
}

func (v NullableOverrideResourceSelector) Get() *OverrideResourceSelector {
	return v.value
}

func (v *NullableOverrideResourceSelector) Set(val *OverrideResourceSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableOverrideResourceSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableOverrideResourceSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverrideResourceSelector(val *OverrideResourceSelector) *NullableOverrideResourceSelector {
	return &NullableOverrideResourceSelector{value: val, isSet: true}
}

func (v NullableOverrideResourceSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverrideResourceSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


