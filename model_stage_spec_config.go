/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
	"fmt"
)

// StageSpecConfig - struct for StageSpecConfig
type StageSpecConfig struct {
	ApprovalConfiguration *ApprovalConfiguration
	DeployWorkloadConfiguration *DeployWorkloadConfiguration
	DeployWorkloadTemplateConfig *DeployWorkloadTemplateConfig
	InfrastructreProvisionerConfiguration *InfrastructreProvisionerConfiguration
	SystemSyncConfig *SystemSyncConfig
}

// ApprovalConfigurationAsStageSpecConfig is a convenience function that returns ApprovalConfiguration wrapped in StageSpecConfig
func ApprovalConfigurationAsStageSpecConfig(v *ApprovalConfiguration) StageSpecConfig {
	return StageSpecConfig{
		ApprovalConfiguration: v,
	}
}

// DeployWorkloadConfigurationAsStageSpecConfig is a convenience function that returns DeployWorkloadConfiguration wrapped in StageSpecConfig
func DeployWorkloadConfigurationAsStageSpecConfig(v *DeployWorkloadConfiguration) StageSpecConfig {
	return StageSpecConfig{
		DeployWorkloadConfiguration: v,
	}
}

// DeployWorkloadTemplateConfigAsStageSpecConfig is a convenience function that returns DeployWorkloadTemplateConfig wrapped in StageSpecConfig
func DeployWorkloadTemplateConfigAsStageSpecConfig(v *DeployWorkloadTemplateConfig) StageSpecConfig {
	return StageSpecConfig{
		DeployWorkloadTemplateConfig: v,
	}
}

// InfrastructreProvisionerConfigurationAsStageSpecConfig is a convenience function that returns InfrastructreProvisionerConfiguration wrapped in StageSpecConfig
func InfrastructreProvisionerConfigurationAsStageSpecConfig(v *InfrastructreProvisionerConfiguration) StageSpecConfig {
	return StageSpecConfig{
		InfrastructreProvisionerConfiguration: v,
	}
}

// SystemSyncConfigAsStageSpecConfig is a convenience function that returns SystemSyncConfig wrapped in StageSpecConfig
func SystemSyncConfigAsStageSpecConfig(v *SystemSyncConfig) StageSpecConfig {
	return StageSpecConfig{
		SystemSyncConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *StageSpecConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ApprovalConfiguration
	err = newStrictDecoder(data).Decode(&dst.ApprovalConfiguration)
	if err == nil {
		jsonApprovalConfiguration, _ := json.Marshal(dst.ApprovalConfiguration)
		if string(jsonApprovalConfiguration) == "{}" { // empty struct
			dst.ApprovalConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.ApprovalConfiguration = nil
	}

	// try to unmarshal data into DeployWorkloadConfiguration
	err = newStrictDecoder(data).Decode(&dst.DeployWorkloadConfiguration)
	if err == nil {
		jsonDeployWorkloadConfiguration, _ := json.Marshal(dst.DeployWorkloadConfiguration)
		if string(jsonDeployWorkloadConfiguration) == "{}" { // empty struct
			dst.DeployWorkloadConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.DeployWorkloadConfiguration = nil
	}

	// try to unmarshal data into DeployWorkloadTemplateConfig
	err = newStrictDecoder(data).Decode(&dst.DeployWorkloadTemplateConfig)
	if err == nil {
		jsonDeployWorkloadTemplateConfig, _ := json.Marshal(dst.DeployWorkloadTemplateConfig)
		if string(jsonDeployWorkloadTemplateConfig) == "{}" { // empty struct
			dst.DeployWorkloadTemplateConfig = nil
		} else {
			match++
		}
	} else {
		dst.DeployWorkloadTemplateConfig = nil
	}

	// try to unmarshal data into InfrastructreProvisionerConfiguration
	err = newStrictDecoder(data).Decode(&dst.InfrastructreProvisionerConfiguration)
	if err == nil {
		jsonInfrastructreProvisionerConfiguration, _ := json.Marshal(dst.InfrastructreProvisionerConfiguration)
		if string(jsonInfrastructreProvisionerConfiguration) == "{}" { // empty struct
			dst.InfrastructreProvisionerConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.InfrastructreProvisionerConfiguration = nil
	}

	// try to unmarshal data into SystemSyncConfig
	err = newStrictDecoder(data).Decode(&dst.SystemSyncConfig)
	if err == nil {
		jsonSystemSyncConfig, _ := json.Marshal(dst.SystemSyncConfig)
		if string(jsonSystemSyncConfig) == "{}" { // empty struct
			dst.SystemSyncConfig = nil
		} else {
			match++
		}
	} else {
		dst.SystemSyncConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ApprovalConfiguration = nil
		dst.DeployWorkloadConfiguration = nil
		dst.DeployWorkloadTemplateConfig = nil
		dst.InfrastructreProvisionerConfiguration = nil
		dst.SystemSyncConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(StageSpecConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(StageSpecConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src StageSpecConfig) MarshalJSON() ([]byte, error) {
	if src.ApprovalConfiguration != nil {
		return json.Marshal(&src.ApprovalConfiguration)
	}

	if src.DeployWorkloadConfiguration != nil {
		return json.Marshal(&src.DeployWorkloadConfiguration)
	}

	if src.DeployWorkloadTemplateConfig != nil {
		return json.Marshal(&src.DeployWorkloadTemplateConfig)
	}

	if src.InfrastructreProvisionerConfiguration != nil {
		return json.Marshal(&src.InfrastructreProvisionerConfiguration)
	}

	if src.SystemSyncConfig != nil {
		return json.Marshal(&src.SystemSyncConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *StageSpecConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ApprovalConfiguration != nil {
		return obj.ApprovalConfiguration
	}

	if obj.DeployWorkloadConfiguration != nil {
		return obj.DeployWorkloadConfiguration
	}

	if obj.DeployWorkloadTemplateConfig != nil {
		return obj.DeployWorkloadTemplateConfig
	}

	if obj.InfrastructreProvisionerConfiguration != nil {
		return obj.InfrastructreProvisionerConfiguration
	}

	if obj.SystemSyncConfig != nil {
		return obj.SystemSyncConfig
	}

	// all schemas are nil
	return nil
}

type NullableStageSpecConfig struct {
	value *StageSpecConfig
	isSet bool
}

func (v NullableStageSpecConfig) Get() *StageSpecConfig {
	return v.value
}

func (v *NullableStageSpecConfig) Set(val *StageSpecConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStageSpecConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStageSpecConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStageSpecConfig(val *StageSpecConfig) *NullableStageSpecConfig {
	return &NullableStageSpecConfig{value: val, isSet: true}
}

func (v NullableStageSpecConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStageSpecConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


