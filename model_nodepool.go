/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Nodepool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Nodepool{}

// Nodepool struct for Nodepool
type Nodepool struct {
	// Azure Api Version
	ApiVersion *string `json:"apiVersion,omitempty"`
	// The geo-location where the resource lives
	Location *string `json:"location,omitempty"`
	// The name of the agent pool.
	Name *string `json:"name,omitempty"`
	Properties *NodePoolProperties `json:"properties,omitempty"`
	// Nodepool azure resource type
	Type *string `json:"type,omitempty"`
}

// NewNodepool instantiates a new Nodepool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodepool() *Nodepool {
	this := Nodepool{}
	var type_ string = "Microsoft.ContainerService/managedClusters/agentPools"
	this.Type = &type_
	return &this
}

// NewNodepoolWithDefaults instantiates a new Nodepool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodepoolWithDefaults() *Nodepool {
	this := Nodepool{}
	var type_ string = "Microsoft.ContainerService/managedClusters/agentPools"
	this.Type = &type_
	return &this
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise.
func (o *Nodepool) GetApiVersion() string {
	if o == nil || isNil(o.ApiVersion) {
		var ret string
		return ret
	}
	return *o.ApiVersion
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nodepool) GetApiVersionOk() (*string, bool) {
	if o == nil || isNil(o.ApiVersion) {
		return nil, false
	}
	return o.ApiVersion, true
}

// HasApiVersion returns a boolean if a field has been set.
func (o *Nodepool) HasApiVersion() bool {
	if o != nil && !isNil(o.ApiVersion) {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given string and assigns it to the ApiVersion field.
func (o *Nodepool) SetApiVersion(v string) {
	o.ApiVersion = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *Nodepool) GetLocation() string {
	if o == nil || isNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nodepool) GetLocationOk() (*string, bool) {
	if o == nil || isNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *Nodepool) HasLocation() bool {
	if o != nil && !isNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *Nodepool) SetLocation(v string) {
	o.Location = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Nodepool) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nodepool) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Nodepool) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Nodepool) SetName(v string) {
	o.Name = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *Nodepool) GetProperties() NodePoolProperties {
	if o == nil || isNil(o.Properties) {
		var ret NodePoolProperties
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nodepool) GetPropertiesOk() (*NodePoolProperties, bool) {
	if o == nil || isNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *Nodepool) HasProperties() bool {
	if o != nil && !isNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given NodePoolProperties and assigns it to the Properties field.
func (o *Nodepool) SetProperties(v NodePoolProperties) {
	o.Properties = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Nodepool) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Nodepool) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Nodepool) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Nodepool) SetType(v string) {
	o.Type = &v
}

func (o Nodepool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Nodepool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ApiVersion) {
		toSerialize["apiVersion"] = o.ApiVersion
	}
	if !isNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableNodepool struct {
	value *Nodepool
	isSet bool
}

func (v NullableNodepool) Get() *Nodepool {
	return v.value
}

func (v *NullableNodepool) Set(val *Nodepool) {
	v.value = val
	v.isSet = true
}

func (v NullableNodepool) IsSet() bool {
	return v.isSet
}

func (v *NullableNodepool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodepool(val *Nodepool) *NullableNodepool {
	return &NullableNodepool{value: val, isSet: true}
}

func (v NullableNodepool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodepool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


