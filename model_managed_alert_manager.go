/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the ManagedAlertManager type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ManagedAlertManager{}

// ManagedAlertManager represents managed alert manager
type ManagedAlertManager struct {
	Configmap File `json:"configmap"`
	Configuration File `json:"configuration"`
	Secret File `json:"secret"`
	Statefulset File `json:"statefulset"`
}

// NewManagedAlertManager instantiates a new ManagedAlertManager object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManagedAlertManager(configmap File, configuration File, secret File, statefulset File) *ManagedAlertManager {
	this := ManagedAlertManager{}
	this.Configmap = configmap
	this.Configuration = configuration
	this.Secret = secret
	this.Statefulset = statefulset
	return &this
}

// NewManagedAlertManagerWithDefaults instantiates a new ManagedAlertManager object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManagedAlertManagerWithDefaults() *ManagedAlertManager {
	this := ManagedAlertManager{}
	return &this
}

// GetConfigmap returns the Configmap field value
func (o *ManagedAlertManager) GetConfigmap() File {
	if o == nil {
		var ret File
		return ret
	}

	return o.Configmap
}

// GetConfigmapOk returns a tuple with the Configmap field value
// and a boolean to check if the value has been set.
func (o *ManagedAlertManager) GetConfigmapOk() (*File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configmap, true
}

// SetConfigmap sets field value
func (o *ManagedAlertManager) SetConfigmap(v File) {
	o.Configmap = v
}

// GetConfiguration returns the Configuration field value
func (o *ManagedAlertManager) GetConfiguration() File {
	if o == nil {
		var ret File
		return ret
	}

	return o.Configuration
}

// GetConfigurationOk returns a tuple with the Configuration field value
// and a boolean to check if the value has been set.
func (o *ManagedAlertManager) GetConfigurationOk() (*File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Configuration, true
}

// SetConfiguration sets field value
func (o *ManagedAlertManager) SetConfiguration(v File) {
	o.Configuration = v
}

// GetSecret returns the Secret field value
func (o *ManagedAlertManager) GetSecret() File {
	if o == nil {
		var ret File
		return ret
	}

	return o.Secret
}

// GetSecretOk returns a tuple with the Secret field value
// and a boolean to check if the value has been set.
func (o *ManagedAlertManager) GetSecretOk() (*File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Secret, true
}

// SetSecret sets field value
func (o *ManagedAlertManager) SetSecret(v File) {
	o.Secret = v
}

// GetStatefulset returns the Statefulset field value
func (o *ManagedAlertManager) GetStatefulset() File {
	if o == nil {
		var ret File
		return ret
	}

	return o.Statefulset
}

// GetStatefulsetOk returns a tuple with the Statefulset field value
// and a boolean to check if the value has been set.
func (o *ManagedAlertManager) GetStatefulsetOk() (*File, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Statefulset, true
}

// SetStatefulset sets field value
func (o *ManagedAlertManager) SetStatefulset(v File) {
	o.Statefulset = v
}

func (o ManagedAlertManager) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ManagedAlertManager) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["configmap"] = o.Configmap
	toSerialize["configuration"] = o.Configuration
	toSerialize["secret"] = o.Secret
	toSerialize["statefulset"] = o.Statefulset
	return toSerialize, nil
}

type NullableManagedAlertManager struct {
	value *ManagedAlertManager
	isSet bool
}

func (v NullableManagedAlertManager) Get() *ManagedAlertManager {
	return v.value
}

func (v *NullableManagedAlertManager) Set(val *ManagedAlertManager) {
	v.value = val
	v.isSet = true
}

func (v NullableManagedAlertManager) IsSet() bool {
	return v.isSet
}

func (v *NullableManagedAlertManager) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManagedAlertManager(val *ManagedAlertManager) *NullableManagedAlertManager {
	return &NullableManagedAlertManager{value: val, isSet: true}
}

func (v NullableManagedAlertManager) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManagedAlertManager) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


