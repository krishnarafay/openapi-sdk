/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Powerstate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Powerstate{}

// Powerstate struct for Powerstate
type Powerstate struct {
	// Tells whether the cluster is Running or Stopped.
	Code *string `json:"code,omitempty"`
}

// NewPowerstate instantiates a new Powerstate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPowerstate() *Powerstate {
	this := Powerstate{}
	return &this
}

// NewPowerstateWithDefaults instantiates a new Powerstate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPowerstateWithDefaults() *Powerstate {
	this := Powerstate{}
	return &this
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *Powerstate) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Powerstate) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
		return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *Powerstate) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *Powerstate) SetCode(v string) {
	o.Code = &v
}

func (o Powerstate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Powerstate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	return toSerialize, nil
}

type NullablePowerstate struct {
	value *Powerstate
	isSet bool
}

func (v NullablePowerstate) Get() *Powerstate {
	return v.value
}

func (v *NullablePowerstate) Set(val *Powerstate) {
	v.value = val
	v.isSet = true
}

func (v NullablePowerstate) IsSet() bool {
	return v.isSet
}

func (v *NullablePowerstate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePowerstate(val *Powerstate) *NullablePowerstate {
	return &NullablePowerstate{value: val, isSet: true}
}

func (v NullablePowerstate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePowerstate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


