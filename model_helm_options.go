/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the HelmOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HelmOptions{}

// HelmOptions options for deploying Helm artifacts
type HelmOptions struct {
	// deploy Helm artifact with atomic flag
	Atomic *bool `json:"atomic,omitempty"`
	// cleanup deployed resources when chart fails to deploy
	CleanUpOnFail *bool `json:"cleanUpOnFail,omitempty"`
	// custom description for the release
	Description *string `json:"description,omitempty"`
	// disable OpenAPI validation while deploying the chart
	DisableOpenAPIValidation *bool `json:"disableOpenAPIValidation,omitempty"`
	// deploy Helm artifact with force flag
	Force *bool `json:"force,omitempty"`
	// keep release history after uninstalling
	KeepHistory *bool `json:"keepHistory,omitempty"`
	// limit Helm artifact history
	MaxHistory *int32 `json:"maxHistory,omitempty"`
	// deploy Helm artifact without hooks
	NoHooks *bool `json:"noHooks,omitempty"`
	// render sub chart notes
	RenderSubChartNotes *bool `json:"renderSubChartNotes,omitempty"`
	// reset existing helm values
	ResetValues *bool `json:"resetValues,omitempty"`
	// reuse existing values
	ReuseValues *bool `json:"reuseValues,omitempty"`
	// pass custom helm values as key=value
	SetString []string `json:"setString,omitempty"`
	// skip deploying crds
	SkipCRDs *bool `json:"skipCRDs,omitempty"`
	// timeout for waiting for the resources to become ready
	Timeout *string `json:"timeout,omitempty"`
	// deploy Helm artifact with wait flag
	Wait *bool `json:"wait,omitempty"`
}

// NewHelmOptions instantiates a new HelmOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHelmOptions() *HelmOptions {
	this := HelmOptions{}
	return &this
}

// NewHelmOptionsWithDefaults instantiates a new HelmOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHelmOptionsWithDefaults() *HelmOptions {
	this := HelmOptions{}
	return &this
}

// GetAtomic returns the Atomic field value if set, zero value otherwise.
func (o *HelmOptions) GetAtomic() bool {
	if o == nil || isNil(o.Atomic) {
		var ret bool
		return ret
	}
	return *o.Atomic
}

// GetAtomicOk returns a tuple with the Atomic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetAtomicOk() (*bool, bool) {
	if o == nil || isNil(o.Atomic) {
		return nil, false
	}
	return o.Atomic, true
}

// HasAtomic returns a boolean if a field has been set.
func (o *HelmOptions) HasAtomic() bool {
	if o != nil && !isNil(o.Atomic) {
		return true
	}

	return false
}

// SetAtomic gets a reference to the given bool and assigns it to the Atomic field.
func (o *HelmOptions) SetAtomic(v bool) {
	o.Atomic = &v
}

// GetCleanUpOnFail returns the CleanUpOnFail field value if set, zero value otherwise.
func (o *HelmOptions) GetCleanUpOnFail() bool {
	if o == nil || isNil(o.CleanUpOnFail) {
		var ret bool
		return ret
	}
	return *o.CleanUpOnFail
}

// GetCleanUpOnFailOk returns a tuple with the CleanUpOnFail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetCleanUpOnFailOk() (*bool, bool) {
	if o == nil || isNil(o.CleanUpOnFail) {
		return nil, false
	}
	return o.CleanUpOnFail, true
}

// HasCleanUpOnFail returns a boolean if a field has been set.
func (o *HelmOptions) HasCleanUpOnFail() bool {
	if o != nil && !isNil(o.CleanUpOnFail) {
		return true
	}

	return false
}

// SetCleanUpOnFail gets a reference to the given bool and assigns it to the CleanUpOnFail field.
func (o *HelmOptions) SetCleanUpOnFail(v bool) {
	o.CleanUpOnFail = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *HelmOptions) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *HelmOptions) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *HelmOptions) SetDescription(v string) {
	o.Description = &v
}

// GetDisableOpenAPIValidation returns the DisableOpenAPIValidation field value if set, zero value otherwise.
func (o *HelmOptions) GetDisableOpenAPIValidation() bool {
	if o == nil || isNil(o.DisableOpenAPIValidation) {
		var ret bool
		return ret
	}
	return *o.DisableOpenAPIValidation
}

// GetDisableOpenAPIValidationOk returns a tuple with the DisableOpenAPIValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetDisableOpenAPIValidationOk() (*bool, bool) {
	if o == nil || isNil(o.DisableOpenAPIValidation) {
		return nil, false
	}
	return o.DisableOpenAPIValidation, true
}

// HasDisableOpenAPIValidation returns a boolean if a field has been set.
func (o *HelmOptions) HasDisableOpenAPIValidation() bool {
	if o != nil && !isNil(o.DisableOpenAPIValidation) {
		return true
	}

	return false
}

// SetDisableOpenAPIValidation gets a reference to the given bool and assigns it to the DisableOpenAPIValidation field.
func (o *HelmOptions) SetDisableOpenAPIValidation(v bool) {
	o.DisableOpenAPIValidation = &v
}

// GetForce returns the Force field value if set, zero value otherwise.
func (o *HelmOptions) GetForce() bool {
	if o == nil || isNil(o.Force) {
		var ret bool
		return ret
	}
	return *o.Force
}

// GetForceOk returns a tuple with the Force field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetForceOk() (*bool, bool) {
	if o == nil || isNil(o.Force) {
		return nil, false
	}
	return o.Force, true
}

// HasForce returns a boolean if a field has been set.
func (o *HelmOptions) HasForce() bool {
	if o != nil && !isNil(o.Force) {
		return true
	}

	return false
}

// SetForce gets a reference to the given bool and assigns it to the Force field.
func (o *HelmOptions) SetForce(v bool) {
	o.Force = &v
}

// GetKeepHistory returns the KeepHistory field value if set, zero value otherwise.
func (o *HelmOptions) GetKeepHistory() bool {
	if o == nil || isNil(o.KeepHistory) {
		var ret bool
		return ret
	}
	return *o.KeepHistory
}

// GetKeepHistoryOk returns a tuple with the KeepHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetKeepHistoryOk() (*bool, bool) {
	if o == nil || isNil(o.KeepHistory) {
		return nil, false
	}
	return o.KeepHistory, true
}

// HasKeepHistory returns a boolean if a field has been set.
func (o *HelmOptions) HasKeepHistory() bool {
	if o != nil && !isNil(o.KeepHistory) {
		return true
	}

	return false
}

// SetKeepHistory gets a reference to the given bool and assigns it to the KeepHistory field.
func (o *HelmOptions) SetKeepHistory(v bool) {
	o.KeepHistory = &v
}

// GetMaxHistory returns the MaxHistory field value if set, zero value otherwise.
func (o *HelmOptions) GetMaxHistory() int32 {
	if o == nil || isNil(o.MaxHistory) {
		var ret int32
		return ret
	}
	return *o.MaxHistory
}

// GetMaxHistoryOk returns a tuple with the MaxHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetMaxHistoryOk() (*int32, bool) {
	if o == nil || isNil(o.MaxHistory) {
		return nil, false
	}
	return o.MaxHistory, true
}

// HasMaxHistory returns a boolean if a field has been set.
func (o *HelmOptions) HasMaxHistory() bool {
	if o != nil && !isNil(o.MaxHistory) {
		return true
	}

	return false
}

// SetMaxHistory gets a reference to the given int32 and assigns it to the MaxHistory field.
func (o *HelmOptions) SetMaxHistory(v int32) {
	o.MaxHistory = &v
}

// GetNoHooks returns the NoHooks field value if set, zero value otherwise.
func (o *HelmOptions) GetNoHooks() bool {
	if o == nil || isNil(o.NoHooks) {
		var ret bool
		return ret
	}
	return *o.NoHooks
}

// GetNoHooksOk returns a tuple with the NoHooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetNoHooksOk() (*bool, bool) {
	if o == nil || isNil(o.NoHooks) {
		return nil, false
	}
	return o.NoHooks, true
}

// HasNoHooks returns a boolean if a field has been set.
func (o *HelmOptions) HasNoHooks() bool {
	if o != nil && !isNil(o.NoHooks) {
		return true
	}

	return false
}

// SetNoHooks gets a reference to the given bool and assigns it to the NoHooks field.
func (o *HelmOptions) SetNoHooks(v bool) {
	o.NoHooks = &v
}

// GetRenderSubChartNotes returns the RenderSubChartNotes field value if set, zero value otherwise.
func (o *HelmOptions) GetRenderSubChartNotes() bool {
	if o == nil || isNil(o.RenderSubChartNotes) {
		var ret bool
		return ret
	}
	return *o.RenderSubChartNotes
}

// GetRenderSubChartNotesOk returns a tuple with the RenderSubChartNotes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetRenderSubChartNotesOk() (*bool, bool) {
	if o == nil || isNil(o.RenderSubChartNotes) {
		return nil, false
	}
	return o.RenderSubChartNotes, true
}

// HasRenderSubChartNotes returns a boolean if a field has been set.
func (o *HelmOptions) HasRenderSubChartNotes() bool {
	if o != nil && !isNil(o.RenderSubChartNotes) {
		return true
	}

	return false
}

// SetRenderSubChartNotes gets a reference to the given bool and assigns it to the RenderSubChartNotes field.
func (o *HelmOptions) SetRenderSubChartNotes(v bool) {
	o.RenderSubChartNotes = &v
}

// GetResetValues returns the ResetValues field value if set, zero value otherwise.
func (o *HelmOptions) GetResetValues() bool {
	if o == nil || isNil(o.ResetValues) {
		var ret bool
		return ret
	}
	return *o.ResetValues
}

// GetResetValuesOk returns a tuple with the ResetValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetResetValuesOk() (*bool, bool) {
	if o == nil || isNil(o.ResetValues) {
		return nil, false
	}
	return o.ResetValues, true
}

// HasResetValues returns a boolean if a field has been set.
func (o *HelmOptions) HasResetValues() bool {
	if o != nil && !isNil(o.ResetValues) {
		return true
	}

	return false
}

// SetResetValues gets a reference to the given bool and assigns it to the ResetValues field.
func (o *HelmOptions) SetResetValues(v bool) {
	o.ResetValues = &v
}

// GetReuseValues returns the ReuseValues field value if set, zero value otherwise.
func (o *HelmOptions) GetReuseValues() bool {
	if o == nil || isNil(o.ReuseValues) {
		var ret bool
		return ret
	}
	return *o.ReuseValues
}

// GetReuseValuesOk returns a tuple with the ReuseValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetReuseValuesOk() (*bool, bool) {
	if o == nil || isNil(o.ReuseValues) {
		return nil, false
	}
	return o.ReuseValues, true
}

// HasReuseValues returns a boolean if a field has been set.
func (o *HelmOptions) HasReuseValues() bool {
	if o != nil && !isNil(o.ReuseValues) {
		return true
	}

	return false
}

// SetReuseValues gets a reference to the given bool and assigns it to the ReuseValues field.
func (o *HelmOptions) SetReuseValues(v bool) {
	o.ReuseValues = &v
}

// GetSetString returns the SetString field value if set, zero value otherwise.
func (o *HelmOptions) GetSetString() []string {
	if o == nil || isNil(o.SetString) {
		var ret []string
		return ret
	}
	return o.SetString
}

// GetSetStringOk returns a tuple with the SetString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetSetStringOk() ([]string, bool) {
	if o == nil || isNil(o.SetString) {
		return nil, false
	}
	return o.SetString, true
}

// HasSetString returns a boolean if a field has been set.
func (o *HelmOptions) HasSetString() bool {
	if o != nil && !isNil(o.SetString) {
		return true
	}

	return false
}

// SetSetString gets a reference to the given []string and assigns it to the SetString field.
func (o *HelmOptions) SetSetString(v []string) {
	o.SetString = v
}

// GetSkipCRDs returns the SkipCRDs field value if set, zero value otherwise.
func (o *HelmOptions) GetSkipCRDs() bool {
	if o == nil || isNil(o.SkipCRDs) {
		var ret bool
		return ret
	}
	return *o.SkipCRDs
}

// GetSkipCRDsOk returns a tuple with the SkipCRDs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetSkipCRDsOk() (*bool, bool) {
	if o == nil || isNil(o.SkipCRDs) {
		return nil, false
	}
	return o.SkipCRDs, true
}

// HasSkipCRDs returns a boolean if a field has been set.
func (o *HelmOptions) HasSkipCRDs() bool {
	if o != nil && !isNil(o.SkipCRDs) {
		return true
	}

	return false
}

// SetSkipCRDs gets a reference to the given bool and assigns it to the SkipCRDs field.
func (o *HelmOptions) SetSkipCRDs(v bool) {
	o.SkipCRDs = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *HelmOptions) GetTimeout() string {
	if o == nil || isNil(o.Timeout) {
		var ret string
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetTimeoutOk() (*string, bool) {
	if o == nil || isNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *HelmOptions) HasTimeout() bool {
	if o != nil && !isNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given string and assigns it to the Timeout field.
func (o *HelmOptions) SetTimeout(v string) {
	o.Timeout = &v
}

// GetWait returns the Wait field value if set, zero value otherwise.
func (o *HelmOptions) GetWait() bool {
	if o == nil || isNil(o.Wait) {
		var ret bool
		return ret
	}
	return *o.Wait
}

// GetWaitOk returns a tuple with the Wait field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HelmOptions) GetWaitOk() (*bool, bool) {
	if o == nil || isNil(o.Wait) {
		return nil, false
	}
	return o.Wait, true
}

// HasWait returns a boolean if a field has been set.
func (o *HelmOptions) HasWait() bool {
	if o != nil && !isNil(o.Wait) {
		return true
	}

	return false
}

// SetWait gets a reference to the given bool and assigns it to the Wait field.
func (o *HelmOptions) SetWait(v bool) {
	o.Wait = &v
}

func (o HelmOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HelmOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Atomic) {
		toSerialize["atomic"] = o.Atomic
	}
	if !isNil(o.CleanUpOnFail) {
		toSerialize["cleanUpOnFail"] = o.CleanUpOnFail
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.DisableOpenAPIValidation) {
		toSerialize["disableOpenAPIValidation"] = o.DisableOpenAPIValidation
	}
	if !isNil(o.Force) {
		toSerialize["force"] = o.Force
	}
	if !isNil(o.KeepHistory) {
		toSerialize["keepHistory"] = o.KeepHistory
	}
	if !isNil(o.MaxHistory) {
		toSerialize["maxHistory"] = o.MaxHistory
	}
	if !isNil(o.NoHooks) {
		toSerialize["noHooks"] = o.NoHooks
	}
	if !isNil(o.RenderSubChartNotes) {
		toSerialize["renderSubChartNotes"] = o.RenderSubChartNotes
	}
	if !isNil(o.ResetValues) {
		toSerialize["resetValues"] = o.ResetValues
	}
	if !isNil(o.ReuseValues) {
		toSerialize["reuseValues"] = o.ReuseValues
	}
	if !isNil(o.SetString) {
		toSerialize["setString"] = o.SetString
	}
	if !isNil(o.SkipCRDs) {
		toSerialize["skipCRDs"] = o.SkipCRDs
	}
	if !isNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !isNil(o.Wait) {
		toSerialize["wait"] = o.Wait
	}
	return toSerialize, nil
}

type NullableHelmOptions struct {
	value *HelmOptions
	isSet bool
}

func (v NullableHelmOptions) Get() *HelmOptions {
	return v.value
}

func (v *NullableHelmOptions) Set(val *HelmOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableHelmOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableHelmOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHelmOptions(val *HelmOptions) *NullableHelmOptions {
	return &NullableHelmOptions{value: val, isSet: true}
}

func (v NullableHelmOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHelmOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


