/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the ListMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListMetadata{}

// ListMetadata struct for ListMetadata
type ListMetadata struct {
	Count *int64 `json:"count,omitempty"`
	Limit *int64 `json:"limit,omitempty"`
	Offset *int64 `json:"offset,omitempty"`
}

// NewListMetadata instantiates a new ListMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListMetadata() *ListMetadata {
	this := ListMetadata{}
	return &this
}

// NewListMetadataWithDefaults instantiates a new ListMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListMetadataWithDefaults() *ListMetadata {
	this := ListMetadata{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *ListMetadata) GetCount() int64 {
	if o == nil || isNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMetadata) GetCountOk() (*int64, bool) {
	if o == nil || isNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *ListMetadata) HasCount() bool {
	if o != nil && !isNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *ListMetadata) SetCount(v int64) {
	o.Count = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ListMetadata) GetLimit() int64 {
	if o == nil || isNil(o.Limit) {
		var ret int64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMetadata) GetLimitOk() (*int64, bool) {
	if o == nil || isNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ListMetadata) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int64 and assigns it to the Limit field.
func (o *ListMetadata) SetLimit(v int64) {
	o.Limit = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *ListMetadata) GetOffset() int64 {
	if o == nil || isNil(o.Offset) {
		var ret int64
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListMetadata) GetOffsetOk() (*int64, bool) {
	if o == nil || isNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *ListMetadata) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int64 and assigns it to the Offset field.
func (o *ListMetadata) SetOffset(v int64) {
	o.Offset = &v
}

func (o ListMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	return toSerialize, nil
}

type NullableListMetadata struct {
	value *ListMetadata
	isSet bool
}

func (v NullableListMetadata) Get() *ListMetadata {
	return v.value
}

func (v *NullableListMetadata) Set(val *ListMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableListMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableListMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListMetadata(val *ListMetadata) *NullableListMetadata {
	return &NullableListMetadata{value: val, isSet: true}
}

func (v NullableListMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


