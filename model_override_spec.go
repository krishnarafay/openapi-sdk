/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the OverrideSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverrideSpec{}

// OverrideSpec workload specification
type OverrideSpec struct {
	Placement *PlacementSpec `json:"placement,omitempty"`
	Repo *RepoOverride `json:"repo,omitempty"`
	Resource *OverrideResource `json:"resource,omitempty"`
	// Override Type 
	Type *string `json:"type,omitempty"`
	ValuesPath *File `json:"valuesPath,omitempty"`
}

// NewOverrideSpec instantiates a new OverrideSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverrideSpec() *OverrideSpec {
	this := OverrideSpec{}
	return &this
}

// NewOverrideSpecWithDefaults instantiates a new OverrideSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverrideSpecWithDefaults() *OverrideSpec {
	this := OverrideSpec{}
	return &this
}

// GetPlacement returns the Placement field value if set, zero value otherwise.
func (o *OverrideSpec) GetPlacement() PlacementSpec {
	if o == nil || isNil(o.Placement) {
		var ret PlacementSpec
		return ret
	}
	return *o.Placement
}

// GetPlacementOk returns a tuple with the Placement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideSpec) GetPlacementOk() (*PlacementSpec, bool) {
	if o == nil || isNil(o.Placement) {
		return nil, false
	}
	return o.Placement, true
}

// HasPlacement returns a boolean if a field has been set.
func (o *OverrideSpec) HasPlacement() bool {
	if o != nil && !isNil(o.Placement) {
		return true
	}

	return false
}

// SetPlacement gets a reference to the given PlacementSpec and assigns it to the Placement field.
func (o *OverrideSpec) SetPlacement(v PlacementSpec) {
	o.Placement = &v
}

// GetRepo returns the Repo field value if set, zero value otherwise.
func (o *OverrideSpec) GetRepo() RepoOverride {
	if o == nil || isNil(o.Repo) {
		var ret RepoOverride
		return ret
	}
	return *o.Repo
}

// GetRepoOk returns a tuple with the Repo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideSpec) GetRepoOk() (*RepoOverride, bool) {
	if o == nil || isNil(o.Repo) {
		return nil, false
	}
	return o.Repo, true
}

// HasRepo returns a boolean if a field has been set.
func (o *OverrideSpec) HasRepo() bool {
	if o != nil && !isNil(o.Repo) {
		return true
	}

	return false
}

// SetRepo gets a reference to the given RepoOverride and assigns it to the Repo field.
func (o *OverrideSpec) SetRepo(v RepoOverride) {
	o.Repo = &v
}

// GetResource returns the Resource field value if set, zero value otherwise.
func (o *OverrideSpec) GetResource() OverrideResource {
	if o == nil || isNil(o.Resource) {
		var ret OverrideResource
		return ret
	}
	return *o.Resource
}

// GetResourceOk returns a tuple with the Resource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideSpec) GetResourceOk() (*OverrideResource, bool) {
	if o == nil || isNil(o.Resource) {
		return nil, false
	}
	return o.Resource, true
}

// HasResource returns a boolean if a field has been set.
func (o *OverrideSpec) HasResource() bool {
	if o != nil && !isNil(o.Resource) {
		return true
	}

	return false
}

// SetResource gets a reference to the given OverrideResource and assigns it to the Resource field.
func (o *OverrideSpec) SetResource(v OverrideResource) {
	o.Resource = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *OverrideSpec) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideSpec) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *OverrideSpec) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *OverrideSpec) SetType(v string) {
	o.Type = &v
}

// GetValuesPath returns the ValuesPath field value if set, zero value otherwise.
func (o *OverrideSpec) GetValuesPath() File {
	if o == nil || isNil(o.ValuesPath) {
		var ret File
		return ret
	}
	return *o.ValuesPath
}

// GetValuesPathOk returns a tuple with the ValuesPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverrideSpec) GetValuesPathOk() (*File, bool) {
	if o == nil || isNil(o.ValuesPath) {
		return nil, false
	}
	return o.ValuesPath, true
}

// HasValuesPath returns a boolean if a field has been set.
func (o *OverrideSpec) HasValuesPath() bool {
	if o != nil && !isNil(o.ValuesPath) {
		return true
	}

	return false
}

// SetValuesPath gets a reference to the given File and assigns it to the ValuesPath field.
func (o *OverrideSpec) SetValuesPath(v File) {
	o.ValuesPath = &v
}

func (o OverrideSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverrideSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Placement) {
		toSerialize["placement"] = o.Placement
	}
	if !isNil(o.Repo) {
		toSerialize["repo"] = o.Repo
	}
	if !isNil(o.Resource) {
		toSerialize["resource"] = o.Resource
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.ValuesPath) {
		toSerialize["valuesPath"] = o.ValuesPath
	}
	return toSerialize, nil
}

type NullableOverrideSpec struct {
	value *OverrideSpec
	isSet bool
}

func (v NullableOverrideSpec) Get() *OverrideSpec {
	return v.value
}

func (v *NullableOverrideSpec) Set(val *OverrideSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableOverrideSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableOverrideSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverrideSpec(val *OverrideSpec) *NullableOverrideSpec {
	return &NullableOverrideSpec{value: val, isSet: true}
}

func (v NullableOverrideSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverrideSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


