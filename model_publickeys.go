/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Publickeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Publickeys{}

// Publickeys struct for Publickeys
type Publickeys struct {
	// Certificate public key used to authenticate with VMs through SSH. The certificate must be in PEM format with or without headers.
	KeyData *string `json:"keyData,omitempty"`
}

// NewPublickeys instantiates a new Publickeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublickeys() *Publickeys {
	this := Publickeys{}
	return &this
}

// NewPublickeysWithDefaults instantiates a new Publickeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublickeysWithDefaults() *Publickeys {
	this := Publickeys{}
	return &this
}

// GetKeyData returns the KeyData field value if set, zero value otherwise.
func (o *Publickeys) GetKeyData() string {
	if o == nil || isNil(o.KeyData) {
		var ret string
		return ret
	}
	return *o.KeyData
}

// GetKeyDataOk returns a tuple with the KeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Publickeys) GetKeyDataOk() (*string, bool) {
	if o == nil || isNil(o.KeyData) {
		return nil, false
	}
	return o.KeyData, true
}

// HasKeyData returns a boolean if a field has been set.
func (o *Publickeys) HasKeyData() bool {
	if o != nil && !isNil(o.KeyData) {
		return true
	}

	return false
}

// SetKeyData gets a reference to the given string and assigns it to the KeyData field.
func (o *Publickeys) SetKeyData(v string) {
	o.KeyData = &v
}

func (o Publickeys) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Publickeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.KeyData) {
		toSerialize["keyData"] = o.KeyData
	}
	return toSerialize, nil
}

type NullablePublickeys struct {
	value *Publickeys
	isSet bool
}

func (v NullablePublickeys) Get() *Publickeys {
	return v.value
}

func (v *NullablePublickeys) Set(val *Publickeys) {
	v.value = val
	v.isSet = true
}

func (v NullablePublickeys) IsSet() bool {
	return v.isSet
}

func (v *NullablePublickeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublickeys(val *Publickeys) *NullablePublickeys {
	return &NullablePublickeys{value: val, isSet: true}
}

func (v NullablePublickeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublickeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


