/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the PlacementSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlacementSpec{}

// PlacementSpec placement specification for a resource
type PlacementSpec struct {
	// list of labels for placement
	Labels []PlacementLabel `json:"labels,omitempty"`
	// Kubernetes style label selector
	Selector *string `json:"selector,omitempty"`
}

// NewPlacementSpec instantiates a new PlacementSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlacementSpec() *PlacementSpec {
	this := PlacementSpec{}
	return &this
}

// NewPlacementSpecWithDefaults instantiates a new PlacementSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlacementSpecWithDefaults() *PlacementSpec {
	this := PlacementSpec{}
	return &this
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *PlacementSpec) GetLabels() []PlacementLabel {
	if o == nil || isNil(o.Labels) {
		var ret []PlacementLabel
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementSpec) GetLabelsOk() ([]PlacementLabel, bool) {
	if o == nil || isNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *PlacementSpec) HasLabels() bool {
	if o != nil && !isNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []PlacementLabel and assigns it to the Labels field.
func (o *PlacementSpec) SetLabels(v []PlacementLabel) {
	o.Labels = v
}

// GetSelector returns the Selector field value if set, zero value otherwise.
func (o *PlacementSpec) GetSelector() string {
	if o == nil || isNil(o.Selector) {
		var ret string
		return ret
	}
	return *o.Selector
}

// GetSelectorOk returns a tuple with the Selector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlacementSpec) GetSelectorOk() (*string, bool) {
	if o == nil || isNil(o.Selector) {
		return nil, false
	}
	return o.Selector, true
}

// HasSelector returns a boolean if a field has been set.
func (o *PlacementSpec) HasSelector() bool {
	if o != nil && !isNil(o.Selector) {
		return true
	}

	return false
}

// SetSelector gets a reference to the given string and assigns it to the Selector field.
func (o *PlacementSpec) SetSelector(v string) {
	o.Selector = &v
}

func (o PlacementSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlacementSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !isNil(o.Selector) {
		toSerialize["selector"] = o.Selector
	}
	return toSerialize, nil
}

type NullablePlacementSpec struct {
	value *PlacementSpec
	isSet bool
}

func (v NullablePlacementSpec) Get() *PlacementSpec {
	return v.value
}

func (v *NullablePlacementSpec) Set(val *PlacementSpec) {
	v.value = val
	v.isSet = true
}

func (v NullablePlacementSpec) IsSet() bool {
	return v.isSet
}

func (v *NullablePlacementSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlacementSpec(val *PlacementSpec) *NullablePlacementSpec {
	return &NullablePlacementSpec{value: val, isSet: true}
}

func (v NullablePlacementSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlacementSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


