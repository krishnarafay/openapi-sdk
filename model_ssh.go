/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Ssh type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ssh{}

// Ssh struct for Ssh
type Ssh struct {
	// The list of SSH public keys used to authenticate with Linux-based VMs. A maximum of 1 key may be specified.
	PublicKeys []Publickeys `json:"publicKeys,omitempty"`
}

// NewSsh instantiates a new Ssh object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSsh() *Ssh {
	this := Ssh{}
	return &this
}

// NewSshWithDefaults instantiates a new Ssh object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSshWithDefaults() *Ssh {
	this := Ssh{}
	return &this
}

// GetPublicKeys returns the PublicKeys field value if set, zero value otherwise.
func (o *Ssh) GetPublicKeys() []Publickeys {
	if o == nil || isNil(o.PublicKeys) {
		var ret []Publickeys
		return ret
	}
	return o.PublicKeys
}

// GetPublicKeysOk returns a tuple with the PublicKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Ssh) GetPublicKeysOk() ([]Publickeys, bool) {
	if o == nil || isNil(o.PublicKeys) {
		return nil, false
	}
	return o.PublicKeys, true
}

// HasPublicKeys returns a boolean if a field has been set.
func (o *Ssh) HasPublicKeys() bool {
	if o != nil && !isNil(o.PublicKeys) {
		return true
	}

	return false
}

// SetPublicKeys gets a reference to the given []Publickeys and assigns it to the PublicKeys field.
func (o *Ssh) SetPublicKeys(v []Publickeys) {
	o.PublicKeys = v
}

func (o Ssh) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ssh) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.PublicKeys) {
		toSerialize["publicKeys"] = o.PublicKeys
	}
	return toSerialize, nil
}

type NullableSsh struct {
	value *Ssh
	isSet bool
}

func (v NullableSsh) Get() *Ssh {
	return v.value
}

func (v *NullableSsh) Set(val *Ssh) {
	v.value = val
	v.isSet = true
}

func (v NullableSsh) IsSet() bool {
	return v.isSet
}

func (v *NullableSsh) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSsh(val *Ssh) *NullableSsh {
	return &NullableSsh{value: val, isSet: true}
}

func (v NullableSsh) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSsh) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


