/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the VaultClusterStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultClusterStatus{}

// VaultClusterStatus struct for VaultClusterStatus
type VaultClusterStatus struct {
	AuxiliaryTask *string `json:"auxiliaryTask,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	SecretStore *string `json:"secretStore,omitempty"`
}

// NewVaultClusterStatus instantiates a new VaultClusterStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultClusterStatus() *VaultClusterStatus {
	this := VaultClusterStatus{}
	return &this
}

// NewVaultClusterStatusWithDefaults instantiates a new VaultClusterStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultClusterStatusWithDefaults() *VaultClusterStatus {
	this := VaultClusterStatus{}
	return &this
}

// GetAuxiliaryTask returns the AuxiliaryTask field value if set, zero value otherwise.
func (o *VaultClusterStatus) GetAuxiliaryTask() string {
	if o == nil || isNil(o.AuxiliaryTask) {
		var ret string
		return ret
	}
	return *o.AuxiliaryTask
}

// GetAuxiliaryTaskOk returns a tuple with the AuxiliaryTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultClusterStatus) GetAuxiliaryTaskOk() (*string, bool) {
	if o == nil || isNil(o.AuxiliaryTask) {
		return nil, false
	}
	return o.AuxiliaryTask, true
}

// HasAuxiliaryTask returns a boolean if a field has been set.
func (o *VaultClusterStatus) HasAuxiliaryTask() bool {
	if o != nil && !isNil(o.AuxiliaryTask) {
		return true
	}

	return false
}

// SetAuxiliaryTask gets a reference to the given string and assigns it to the AuxiliaryTask field.
func (o *VaultClusterStatus) SetAuxiliaryTask(v string) {
	o.AuxiliaryTask = &v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *VaultClusterStatus) GetEnabled() bool {
	if o == nil || isNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultClusterStatus) GetEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *VaultClusterStatus) HasEnabled() bool {
	if o != nil && !isNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *VaultClusterStatus) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetSecretStore returns the SecretStore field value if set, zero value otherwise.
func (o *VaultClusterStatus) GetSecretStore() string {
	if o == nil || isNil(o.SecretStore) {
		var ret string
		return ret
	}
	return *o.SecretStore
}

// GetSecretStoreOk returns a tuple with the SecretStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultClusterStatus) GetSecretStoreOk() (*string, bool) {
	if o == nil || isNil(o.SecretStore) {
		return nil, false
	}
	return o.SecretStore, true
}

// HasSecretStore returns a boolean if a field has been set.
func (o *VaultClusterStatus) HasSecretStore() bool {
	if o != nil && !isNil(o.SecretStore) {
		return true
	}

	return false
}

// SetSecretStore gets a reference to the given string and assigns it to the SecretStore field.
func (o *VaultClusterStatus) SetSecretStore(v string) {
	o.SecretStore = &v
}

func (o VaultClusterStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultClusterStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AuxiliaryTask) {
		toSerialize["auxiliaryTask"] = o.AuxiliaryTask
	}
	if !isNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !isNil(o.SecretStore) {
		toSerialize["secretStore"] = o.SecretStore
	}
	return toSerialize, nil
}

type NullableVaultClusterStatus struct {
	value *VaultClusterStatus
	isSet bool
}

func (v NullableVaultClusterStatus) Get() *VaultClusterStatus {
	return v.value
}

func (v *NullableVaultClusterStatus) Set(val *VaultClusterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultClusterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultClusterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultClusterStatus(val *VaultClusterStatus) *NullableVaultClusterStatus {
	return &NullableVaultClusterStatus{value: val, isSet: true}
}

func (v NullableVaultClusterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultClusterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


