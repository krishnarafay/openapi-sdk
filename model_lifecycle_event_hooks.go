/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the LifecycleEventHooks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleEventHooks{}

// LifecycleEventHooks struct for LifecycleEventHooks
type LifecycleEventHooks struct {
	// Specify all the after lifecycle hook
	After []Hook `json:"after,omitempty"`
	// Specify all the before lifecycle hook
	Before []Hook `json:"before,omitempty"`
}

// NewLifecycleEventHooks instantiates a new LifecycleEventHooks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleEventHooks() *LifecycleEventHooks {
	this := LifecycleEventHooks{}
	return &this
}

// NewLifecycleEventHooksWithDefaults instantiates a new LifecycleEventHooks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleEventHooksWithDefaults() *LifecycleEventHooks {
	this := LifecycleEventHooks{}
	return &this
}

// GetAfter returns the After field value if set, zero value otherwise.
func (o *LifecycleEventHooks) GetAfter() []Hook {
	if o == nil || isNil(o.After) {
		var ret []Hook
		return ret
	}
	return o.After
}

// GetAfterOk returns a tuple with the After field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleEventHooks) GetAfterOk() ([]Hook, bool) {
	if o == nil || isNil(o.After) {
		return nil, false
	}
	return o.After, true
}

// HasAfter returns a boolean if a field has been set.
func (o *LifecycleEventHooks) HasAfter() bool {
	if o != nil && !isNil(o.After) {
		return true
	}

	return false
}

// SetAfter gets a reference to the given []Hook and assigns it to the After field.
func (o *LifecycleEventHooks) SetAfter(v []Hook) {
	o.After = v
}

// GetBefore returns the Before field value if set, zero value otherwise.
func (o *LifecycleEventHooks) GetBefore() []Hook {
	if o == nil || isNil(o.Before) {
		var ret []Hook
		return ret
	}
	return o.Before
}

// GetBeforeOk returns a tuple with the Before field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleEventHooks) GetBeforeOk() ([]Hook, bool) {
	if o == nil || isNil(o.Before) {
		return nil, false
	}
	return o.Before, true
}

// HasBefore returns a boolean if a field has been set.
func (o *LifecycleEventHooks) HasBefore() bool {
	if o != nil && !isNil(o.Before) {
		return true
	}

	return false
}

// SetBefore gets a reference to the given []Hook and assigns it to the Before field.
func (o *LifecycleEventHooks) SetBefore(v []Hook) {
	o.Before = v
}

func (o LifecycleEventHooks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleEventHooks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.After) {
		toSerialize["after"] = o.After
	}
	if !isNil(o.Before) {
		toSerialize["before"] = o.Before
	}
	return toSerialize, nil
}

type NullableLifecycleEventHooks struct {
	value *LifecycleEventHooks
	isSet bool
}

func (v NullableLifecycleEventHooks) Get() *LifecycleEventHooks {
	return v.value
}

func (v *NullableLifecycleEventHooks) Set(val *LifecycleEventHooks) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleEventHooks) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleEventHooks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleEventHooks(val *LifecycleEventHooks) *NullableLifecycleEventHooks {
	return &NullableLifecycleEventHooks{value: val, isSet: true}
}

func (v NullableLifecycleEventHooks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleEventHooks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


