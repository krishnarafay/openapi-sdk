/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
	"fmt"
)

// ContainerRegistrySpecCredentials - struct for ContainerRegistrySpecCredentials
type ContainerRegistrySpecCredentials struct {
	ContainerRegistrySpecCredentialsOneOf *ContainerRegistrySpecCredentialsOneOf
	ContainerRegistrySpecCredentialsOneOf1 *ContainerRegistrySpecCredentialsOneOf1
	ContainerRegistrySpecCredentialsOneOf2 *ContainerRegistrySpecCredentialsOneOf2
	ContainerRegistrySpecCredentialsOneOf3 *ContainerRegistrySpecCredentialsOneOf3
}

// ContainerRegistrySpecCredentialsOneOfAsContainerRegistrySpecCredentials is a convenience function that returns ContainerRegistrySpecCredentialsOneOf wrapped in ContainerRegistrySpecCredentials
func ContainerRegistrySpecCredentialsOneOfAsContainerRegistrySpecCredentials(v *ContainerRegistrySpecCredentialsOneOf) ContainerRegistrySpecCredentials {
	return ContainerRegistrySpecCredentials{
		ContainerRegistrySpecCredentialsOneOf: v,
	}
}

// ContainerRegistrySpecCredentialsOneOf1AsContainerRegistrySpecCredentials is a convenience function that returns ContainerRegistrySpecCredentialsOneOf1 wrapped in ContainerRegistrySpecCredentials
func ContainerRegistrySpecCredentialsOneOf1AsContainerRegistrySpecCredentials(v *ContainerRegistrySpecCredentialsOneOf1) ContainerRegistrySpecCredentials {
	return ContainerRegistrySpecCredentials{
		ContainerRegistrySpecCredentialsOneOf1: v,
	}
}

// ContainerRegistrySpecCredentialsOneOf2AsContainerRegistrySpecCredentials is a convenience function that returns ContainerRegistrySpecCredentialsOneOf2 wrapped in ContainerRegistrySpecCredentials
func ContainerRegistrySpecCredentialsOneOf2AsContainerRegistrySpecCredentials(v *ContainerRegistrySpecCredentialsOneOf2) ContainerRegistrySpecCredentials {
	return ContainerRegistrySpecCredentials{
		ContainerRegistrySpecCredentialsOneOf2: v,
	}
}

// ContainerRegistrySpecCredentialsOneOf3AsContainerRegistrySpecCredentials is a convenience function that returns ContainerRegistrySpecCredentialsOneOf3 wrapped in ContainerRegistrySpecCredentials
func ContainerRegistrySpecCredentialsOneOf3AsContainerRegistrySpecCredentials(v *ContainerRegistrySpecCredentialsOneOf3) ContainerRegistrySpecCredentials {
	return ContainerRegistrySpecCredentials{
		ContainerRegistrySpecCredentialsOneOf3: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ContainerRegistrySpecCredentials) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ContainerRegistrySpecCredentialsOneOf
	err = newStrictDecoder(data).Decode(&dst.ContainerRegistrySpecCredentialsOneOf)
	if err == nil {
		jsonContainerRegistrySpecCredentialsOneOf, _ := json.Marshal(dst.ContainerRegistrySpecCredentialsOneOf)
		if string(jsonContainerRegistrySpecCredentialsOneOf) == "{}" { // empty struct
			dst.ContainerRegistrySpecCredentialsOneOf = nil
		} else {
			match++
		}
	} else {
		dst.ContainerRegistrySpecCredentialsOneOf = nil
	}

	// try to unmarshal data into ContainerRegistrySpecCredentialsOneOf1
	err = newStrictDecoder(data).Decode(&dst.ContainerRegistrySpecCredentialsOneOf1)
	if err == nil {
		jsonContainerRegistrySpecCredentialsOneOf1, _ := json.Marshal(dst.ContainerRegistrySpecCredentialsOneOf1)
		if string(jsonContainerRegistrySpecCredentialsOneOf1) == "{}" { // empty struct
			dst.ContainerRegistrySpecCredentialsOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.ContainerRegistrySpecCredentialsOneOf1 = nil
	}

	// try to unmarshal data into ContainerRegistrySpecCredentialsOneOf2
	err = newStrictDecoder(data).Decode(&dst.ContainerRegistrySpecCredentialsOneOf2)
	if err == nil {
		jsonContainerRegistrySpecCredentialsOneOf2, _ := json.Marshal(dst.ContainerRegistrySpecCredentialsOneOf2)
		if string(jsonContainerRegistrySpecCredentialsOneOf2) == "{}" { // empty struct
			dst.ContainerRegistrySpecCredentialsOneOf2 = nil
		} else {
			match++
		}
	} else {
		dst.ContainerRegistrySpecCredentialsOneOf2 = nil
	}

	// try to unmarshal data into ContainerRegistrySpecCredentialsOneOf3
	err = newStrictDecoder(data).Decode(&dst.ContainerRegistrySpecCredentialsOneOf3)
	if err == nil {
		jsonContainerRegistrySpecCredentialsOneOf3, _ := json.Marshal(dst.ContainerRegistrySpecCredentialsOneOf3)
		if string(jsonContainerRegistrySpecCredentialsOneOf3) == "{}" { // empty struct
			dst.ContainerRegistrySpecCredentialsOneOf3 = nil
		} else {
			match++
		}
	} else {
		dst.ContainerRegistrySpecCredentialsOneOf3 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ContainerRegistrySpecCredentialsOneOf = nil
		dst.ContainerRegistrySpecCredentialsOneOf1 = nil
		dst.ContainerRegistrySpecCredentialsOneOf2 = nil
		dst.ContainerRegistrySpecCredentialsOneOf3 = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ContainerRegistrySpecCredentials)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ContainerRegistrySpecCredentials)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ContainerRegistrySpecCredentials) MarshalJSON() ([]byte, error) {
	if src.ContainerRegistrySpecCredentialsOneOf != nil {
		return json.Marshal(&src.ContainerRegistrySpecCredentialsOneOf)
	}

	if src.ContainerRegistrySpecCredentialsOneOf1 != nil {
		return json.Marshal(&src.ContainerRegistrySpecCredentialsOneOf1)
	}

	if src.ContainerRegistrySpecCredentialsOneOf2 != nil {
		return json.Marshal(&src.ContainerRegistrySpecCredentialsOneOf2)
	}

	if src.ContainerRegistrySpecCredentialsOneOf3 != nil {
		return json.Marshal(&src.ContainerRegistrySpecCredentialsOneOf3)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ContainerRegistrySpecCredentials) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ContainerRegistrySpecCredentialsOneOf != nil {
		return obj.ContainerRegistrySpecCredentialsOneOf
	}

	if obj.ContainerRegistrySpecCredentialsOneOf1 != nil {
		return obj.ContainerRegistrySpecCredentialsOneOf1
	}

	if obj.ContainerRegistrySpecCredentialsOneOf2 != nil {
		return obj.ContainerRegistrySpecCredentialsOneOf2
	}

	if obj.ContainerRegistrySpecCredentialsOneOf3 != nil {
		return obj.ContainerRegistrySpecCredentialsOneOf3
	}

	// all schemas are nil
	return nil
}

type NullableContainerRegistrySpecCredentials struct {
	value *ContainerRegistrySpecCredentials
	isSet bool
}

func (v NullableContainerRegistrySpecCredentials) Get() *ContainerRegistrySpecCredentials {
	return v.value
}

func (v *NullableContainerRegistrySpecCredentials) Set(val *ContainerRegistrySpecCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerRegistrySpecCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerRegistrySpecCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerRegistrySpecCredentials(val *ContainerRegistrySpecCredentials) *NullableContainerRegistrySpecCredentials {
	return &NullableContainerRegistrySpecCredentials{value: val, isSet: true}
}

func (v NullableContainerRegistrySpecCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerRegistrySpecCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


