/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
	"fmt"
)

// TriggerSpecConfig - struct for TriggerSpecConfig
type TriggerSpecConfig struct {
	CronTrigerConfiguration *CronTrigerConfiguration
	WebhookTrigerConfiguration *WebhookTrigerConfiguration
}

// CronTrigerConfigurationAsTriggerSpecConfig is a convenience function that returns CronTrigerConfiguration wrapped in TriggerSpecConfig
func CronTrigerConfigurationAsTriggerSpecConfig(v *CronTrigerConfiguration) TriggerSpecConfig {
	return TriggerSpecConfig{
		CronTrigerConfiguration: v,
	}
}

// WebhookTrigerConfigurationAsTriggerSpecConfig is a convenience function that returns WebhookTrigerConfiguration wrapped in TriggerSpecConfig
func WebhookTrigerConfigurationAsTriggerSpecConfig(v *WebhookTrigerConfiguration) TriggerSpecConfig {
	return TriggerSpecConfig{
		WebhookTrigerConfiguration: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *TriggerSpecConfig) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CronTrigerConfiguration
	err = newStrictDecoder(data).Decode(&dst.CronTrigerConfiguration)
	if err == nil {
		jsonCronTrigerConfiguration, _ := json.Marshal(dst.CronTrigerConfiguration)
		if string(jsonCronTrigerConfiguration) == "{}" { // empty struct
			dst.CronTrigerConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.CronTrigerConfiguration = nil
	}

	// try to unmarshal data into WebhookTrigerConfiguration
	err = newStrictDecoder(data).Decode(&dst.WebhookTrigerConfiguration)
	if err == nil {
		jsonWebhookTrigerConfiguration, _ := json.Marshal(dst.WebhookTrigerConfiguration)
		if string(jsonWebhookTrigerConfiguration) == "{}" { // empty struct
			dst.WebhookTrigerConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.WebhookTrigerConfiguration = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CronTrigerConfiguration = nil
		dst.WebhookTrigerConfiguration = nil

		return fmt.Errorf("data matches more than one schema in oneOf(TriggerSpecConfig)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(TriggerSpecConfig)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src TriggerSpecConfig) MarshalJSON() ([]byte, error) {
	if src.CronTrigerConfiguration != nil {
		return json.Marshal(&src.CronTrigerConfiguration)
	}

	if src.WebhookTrigerConfiguration != nil {
		return json.Marshal(&src.WebhookTrigerConfiguration)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *TriggerSpecConfig) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CronTrigerConfiguration != nil {
		return obj.CronTrigerConfiguration
	}

	if obj.WebhookTrigerConfiguration != nil {
		return obj.WebhookTrigerConfiguration
	}

	// all schemas are nil
	return nil
}

type NullableTriggerSpecConfig struct {
	value *TriggerSpecConfig
	isSet bool
}

func (v NullableTriggerSpecConfig) Get() *TriggerSpecConfig {
	return v.value
}

func (v *NullableTriggerSpecConfig) Set(val *TriggerSpecConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTriggerSpecConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTriggerSpecConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTriggerSpecConfig(val *TriggerSpecConfig) *NullableTriggerSpecConfig {
	return &NullableTriggerSpecConfig{value: val, isSet: true}
}

func (v NullableTriggerSpecConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTriggerSpecConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


