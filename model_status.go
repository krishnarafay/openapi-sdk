/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Status type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Status{}

// Status status of a resource
type Status struct {
	// status of the condition
	ConditionStatus *string `json:"conditionStatus,omitempty"`
	// type of the status condition
	ConditionType *string `json:"conditionType,omitempty"`
	Extra *Extra `json:"extra,omitempty"`
	LastUpdated *LastUpdated `json:"lastUpdated,omitempty"`
	// reason of the last condition status
	Reason *string `json:"reason,omitempty"`
}

// NewStatus instantiates a new Status object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatus() *Status {
	this := Status{}
	return &this
}

// NewStatusWithDefaults instantiates a new Status object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatusWithDefaults() *Status {
	this := Status{}
	return &this
}

// GetConditionStatus returns the ConditionStatus field value if set, zero value otherwise.
func (o *Status) GetConditionStatus() string {
	if o == nil || isNil(o.ConditionStatus) {
		var ret string
		return ret
	}
	return *o.ConditionStatus
}

// GetConditionStatusOk returns a tuple with the ConditionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetConditionStatusOk() (*string, bool) {
	if o == nil || isNil(o.ConditionStatus) {
		return nil, false
	}
	return o.ConditionStatus, true
}

// HasConditionStatus returns a boolean if a field has been set.
func (o *Status) HasConditionStatus() bool {
	if o != nil && !isNil(o.ConditionStatus) {
		return true
	}

	return false
}

// SetConditionStatus gets a reference to the given string and assigns it to the ConditionStatus field.
func (o *Status) SetConditionStatus(v string) {
	o.ConditionStatus = &v
}

// GetConditionType returns the ConditionType field value if set, zero value otherwise.
func (o *Status) GetConditionType() string {
	if o == nil || isNil(o.ConditionType) {
		var ret string
		return ret
	}
	return *o.ConditionType
}

// GetConditionTypeOk returns a tuple with the ConditionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetConditionTypeOk() (*string, bool) {
	if o == nil || isNil(o.ConditionType) {
		return nil, false
	}
	return o.ConditionType, true
}

// HasConditionType returns a boolean if a field has been set.
func (o *Status) HasConditionType() bool {
	if o != nil && !isNil(o.ConditionType) {
		return true
	}

	return false
}

// SetConditionType gets a reference to the given string and assigns it to the ConditionType field.
func (o *Status) SetConditionType(v string) {
	o.ConditionType = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *Status) GetExtra() Extra {
	if o == nil || isNil(o.Extra) {
		var ret Extra
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetExtraOk() (*Extra, bool) {
	if o == nil || isNil(o.Extra) {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *Status) HasExtra() bool {
	if o != nil && !isNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given Extra and assigns it to the Extra field.
func (o *Status) SetExtra(v Extra) {
	o.Extra = &v
}

// GetLastUpdated returns the LastUpdated field value if set, zero value otherwise.
func (o *Status) GetLastUpdated() LastUpdated {
	if o == nil || isNil(o.LastUpdated) {
		var ret LastUpdated
		return ret
	}
	return *o.LastUpdated
}

// GetLastUpdatedOk returns a tuple with the LastUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetLastUpdatedOk() (*LastUpdated, bool) {
	if o == nil || isNil(o.LastUpdated) {
		return nil, false
	}
	return o.LastUpdated, true
}

// HasLastUpdated returns a boolean if a field has been set.
func (o *Status) HasLastUpdated() bool {
	if o != nil && !isNil(o.LastUpdated) {
		return true
	}

	return false
}

// SetLastUpdated gets a reference to the given LastUpdated and assigns it to the LastUpdated field.
func (o *Status) SetLastUpdated(v LastUpdated) {
	o.LastUpdated = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *Status) GetReason() string {
	if o == nil || isNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Status) GetReasonOk() (*string, bool) {
	if o == nil || isNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *Status) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *Status) SetReason(v string) {
	o.Reason = &v
}

func (o Status) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Status) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	// skip: conditionStatus is readOnly
	// skip: conditionType is readOnly
	if !isNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}
	if !isNil(o.LastUpdated) {
		toSerialize["lastUpdated"] = o.LastUpdated
	}
	// skip: reason is readOnly
	return toSerialize, nil
}

type NullableStatus struct {
	value *Status
	isSet bool
}

func (v NullableStatus) Get() *Status {
	return v.value
}

func (v *NullableStatus) Set(val *Status) {
	v.value = val
	v.isSet = true
}

func (v NullableStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatus(val *Status) *NullableStatus {
	return &NullableStatus{value: val, isSet: true}
}

func (v NullableStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


