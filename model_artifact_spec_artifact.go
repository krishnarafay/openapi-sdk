/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
	"fmt"
)

// ArtifactSpecArtifact - struct for ArtifactSpecArtifact
type ArtifactSpecArtifact struct {
	HelmInCatalog *HelmInCatalog
	HelmInGitRepoArtifact *HelmInGitRepoArtifact
	HelmInHelmRepo *HelmInHelmRepo
	ManagedAlertManager *ManagedAlertManager
	UploadedHelmArtifact *UploadedHelmArtifact
	UploadedYAMLArtifact *UploadedYAMLArtifact
	YAMLInGitRepoArtifact *YAMLInGitRepoArtifact
}

// HelmInCatalogAsArtifactSpecArtifact is a convenience function that returns HelmInCatalog wrapped in ArtifactSpecArtifact
func HelmInCatalogAsArtifactSpecArtifact(v *HelmInCatalog) ArtifactSpecArtifact {
	return ArtifactSpecArtifact{
		HelmInCatalog: v,
	}
}

// HelmInGitRepoArtifactAsArtifactSpecArtifact is a convenience function that returns HelmInGitRepoArtifact wrapped in ArtifactSpecArtifact
func HelmInGitRepoArtifactAsArtifactSpecArtifact(v *HelmInGitRepoArtifact) ArtifactSpecArtifact {
	return ArtifactSpecArtifact{
		HelmInGitRepoArtifact: v,
	}
}

// HelmInHelmRepoAsArtifactSpecArtifact is a convenience function that returns HelmInHelmRepo wrapped in ArtifactSpecArtifact
func HelmInHelmRepoAsArtifactSpecArtifact(v *HelmInHelmRepo) ArtifactSpecArtifact {
	return ArtifactSpecArtifact{
		HelmInHelmRepo: v,
	}
}

// ManagedAlertManagerAsArtifactSpecArtifact is a convenience function that returns ManagedAlertManager wrapped in ArtifactSpecArtifact
func ManagedAlertManagerAsArtifactSpecArtifact(v *ManagedAlertManager) ArtifactSpecArtifact {
	return ArtifactSpecArtifact{
		ManagedAlertManager: v,
	}
}

// UploadedHelmArtifactAsArtifactSpecArtifact is a convenience function that returns UploadedHelmArtifact wrapped in ArtifactSpecArtifact
func UploadedHelmArtifactAsArtifactSpecArtifact(v *UploadedHelmArtifact) ArtifactSpecArtifact {
	return ArtifactSpecArtifact{
		UploadedHelmArtifact: v,
	}
}

// UploadedYAMLArtifactAsArtifactSpecArtifact is a convenience function that returns UploadedYAMLArtifact wrapped in ArtifactSpecArtifact
func UploadedYAMLArtifactAsArtifactSpecArtifact(v *UploadedYAMLArtifact) ArtifactSpecArtifact {
	return ArtifactSpecArtifact{
		UploadedYAMLArtifact: v,
	}
}

// YAMLInGitRepoArtifactAsArtifactSpecArtifact is a convenience function that returns YAMLInGitRepoArtifact wrapped in ArtifactSpecArtifact
func YAMLInGitRepoArtifactAsArtifactSpecArtifact(v *YAMLInGitRepoArtifact) ArtifactSpecArtifact {
	return ArtifactSpecArtifact{
		YAMLInGitRepoArtifact: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ArtifactSpecArtifact) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HelmInCatalog
	err = newStrictDecoder(data).Decode(&dst.HelmInCatalog)
	if err == nil {
		jsonHelmInCatalog, _ := json.Marshal(dst.HelmInCatalog)
		if string(jsonHelmInCatalog) == "{}" { // empty struct
			dst.HelmInCatalog = nil
		} else {
			match++
		}
	} else {
		dst.HelmInCatalog = nil
	}

	// try to unmarshal data into HelmInGitRepoArtifact
	err = newStrictDecoder(data).Decode(&dst.HelmInGitRepoArtifact)
	if err == nil {
		jsonHelmInGitRepoArtifact, _ := json.Marshal(dst.HelmInGitRepoArtifact)
		if string(jsonHelmInGitRepoArtifact) == "{}" { // empty struct
			dst.HelmInGitRepoArtifact = nil
		} else {
			match++
		}
	} else {
		dst.HelmInGitRepoArtifact = nil
	}

	// try to unmarshal data into HelmInHelmRepo
	err = newStrictDecoder(data).Decode(&dst.HelmInHelmRepo)
	if err == nil {
		jsonHelmInHelmRepo, _ := json.Marshal(dst.HelmInHelmRepo)
		if string(jsonHelmInHelmRepo) == "{}" { // empty struct
			dst.HelmInHelmRepo = nil
		} else {
			match++
		}
	} else {
		dst.HelmInHelmRepo = nil
	}

	// try to unmarshal data into ManagedAlertManager
	err = newStrictDecoder(data).Decode(&dst.ManagedAlertManager)
	if err == nil {
		jsonManagedAlertManager, _ := json.Marshal(dst.ManagedAlertManager)
		if string(jsonManagedAlertManager) == "{}" { // empty struct
			dst.ManagedAlertManager = nil
		} else {
			match++
		}
	} else {
		dst.ManagedAlertManager = nil
	}

	// try to unmarshal data into UploadedHelmArtifact
	err = newStrictDecoder(data).Decode(&dst.UploadedHelmArtifact)
	if err == nil {
		jsonUploadedHelmArtifact, _ := json.Marshal(dst.UploadedHelmArtifact)
		if string(jsonUploadedHelmArtifact) == "{}" { // empty struct
			dst.UploadedHelmArtifact = nil
		} else {
			match++
		}
	} else {
		dst.UploadedHelmArtifact = nil
	}

	// try to unmarshal data into UploadedYAMLArtifact
	err = newStrictDecoder(data).Decode(&dst.UploadedYAMLArtifact)
	if err == nil {
		jsonUploadedYAMLArtifact, _ := json.Marshal(dst.UploadedYAMLArtifact)
		if string(jsonUploadedYAMLArtifact) == "{}" { // empty struct
			dst.UploadedYAMLArtifact = nil
		} else {
			match++
		}
	} else {
		dst.UploadedYAMLArtifact = nil
	}

	// try to unmarshal data into YAMLInGitRepoArtifact
	err = newStrictDecoder(data).Decode(&dst.YAMLInGitRepoArtifact)
	if err == nil {
		jsonYAMLInGitRepoArtifact, _ := json.Marshal(dst.YAMLInGitRepoArtifact)
		if string(jsonYAMLInGitRepoArtifact) == "{}" { // empty struct
			dst.YAMLInGitRepoArtifact = nil
		} else {
			match++
		}
	} else {
		dst.YAMLInGitRepoArtifact = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HelmInCatalog = nil
		dst.HelmInGitRepoArtifact = nil
		dst.HelmInHelmRepo = nil
		dst.ManagedAlertManager = nil
		dst.UploadedHelmArtifact = nil
		dst.UploadedYAMLArtifact = nil
		dst.YAMLInGitRepoArtifact = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ArtifactSpecArtifact)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ArtifactSpecArtifact)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ArtifactSpecArtifact) MarshalJSON() ([]byte, error) {
	if src.HelmInCatalog != nil {
		return json.Marshal(&src.HelmInCatalog)
	}

	if src.HelmInGitRepoArtifact != nil {
		return json.Marshal(&src.HelmInGitRepoArtifact)
	}

	if src.HelmInHelmRepo != nil {
		return json.Marshal(&src.HelmInHelmRepo)
	}

	if src.ManagedAlertManager != nil {
		return json.Marshal(&src.ManagedAlertManager)
	}

	if src.UploadedHelmArtifact != nil {
		return json.Marshal(&src.UploadedHelmArtifact)
	}

	if src.UploadedYAMLArtifact != nil {
		return json.Marshal(&src.UploadedYAMLArtifact)
	}

	if src.YAMLInGitRepoArtifact != nil {
		return json.Marshal(&src.YAMLInGitRepoArtifact)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ArtifactSpecArtifact) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.HelmInCatalog != nil {
		return obj.HelmInCatalog
	}

	if obj.HelmInGitRepoArtifact != nil {
		return obj.HelmInGitRepoArtifact
	}

	if obj.HelmInHelmRepo != nil {
		return obj.HelmInHelmRepo
	}

	if obj.ManagedAlertManager != nil {
		return obj.ManagedAlertManager
	}

	if obj.UploadedHelmArtifact != nil {
		return obj.UploadedHelmArtifact
	}

	if obj.UploadedYAMLArtifact != nil {
		return obj.UploadedYAMLArtifact
	}

	if obj.YAMLInGitRepoArtifact != nil {
		return obj.YAMLInGitRepoArtifact
	}

	// all schemas are nil
	return nil
}

type NullableArtifactSpecArtifact struct {
	value *ArtifactSpecArtifact
	isSet bool
}

func (v NullableArtifactSpecArtifact) Get() *ArtifactSpecArtifact {
	return v.value
}

func (v *NullableArtifactSpecArtifact) Set(val *ArtifactSpecArtifact) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactSpecArtifact) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactSpecArtifact) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactSpecArtifact(val *ArtifactSpecArtifact) *NullableArtifactSpecArtifact {
	return &NullableArtifactSpecArtifact{value: val, isSet: true}
}

func (v NullableArtifactSpecArtifact) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactSpecArtifact) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


