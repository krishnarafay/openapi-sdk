/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the EnvironmentSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentSpec{}

// EnvironmentSpec Environment context
type EnvironmentSpec struct {
	Sharing *SharingSpec `json:"sharing,omitempty"`
	Template ResourceNameAndVersionRef `json:"template"`
	// Variables data for config context
	Variables []Variable `json:"variables,omitempty"`
}

// NewEnvironmentSpec instantiates a new EnvironmentSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentSpec(template ResourceNameAndVersionRef) *EnvironmentSpec {
	this := EnvironmentSpec{}
	this.Template = template
	return &this
}

// NewEnvironmentSpecWithDefaults instantiates a new EnvironmentSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentSpecWithDefaults() *EnvironmentSpec {
	this := EnvironmentSpec{}
	return &this
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *EnvironmentSpec) GetSharing() SharingSpec {
	if o == nil || isNil(o.Sharing) {
		var ret SharingSpec
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSpec) GetSharingOk() (*SharingSpec, bool) {
	if o == nil || isNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *EnvironmentSpec) HasSharing() bool {
	if o != nil && !isNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given SharingSpec and assigns it to the Sharing field.
func (o *EnvironmentSpec) SetSharing(v SharingSpec) {
	o.Sharing = &v
}

// GetTemplate returns the Template field value
func (o *EnvironmentSpec) GetTemplate() ResourceNameAndVersionRef {
	if o == nil {
		var ret ResourceNameAndVersionRef
		return ret
	}

	return o.Template
}

// GetTemplateOk returns a tuple with the Template field value
// and a boolean to check if the value has been set.
func (o *EnvironmentSpec) GetTemplateOk() (*ResourceNameAndVersionRef, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Template, true
}

// SetTemplate sets field value
func (o *EnvironmentSpec) SetTemplate(v ResourceNameAndVersionRef) {
	o.Template = v
}

// GetVariables returns the Variables field value if set, zero value otherwise.
func (o *EnvironmentSpec) GetVariables() []Variable {
	if o == nil || isNil(o.Variables) {
		var ret []Variable
		return ret
	}
	return o.Variables
}

// GetVariablesOk returns a tuple with the Variables field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentSpec) GetVariablesOk() ([]Variable, bool) {
	if o == nil || isNil(o.Variables) {
		return nil, false
	}
	return o.Variables, true
}

// HasVariables returns a boolean if a field has been set.
func (o *EnvironmentSpec) HasVariables() bool {
	if o != nil && !isNil(o.Variables) {
		return true
	}

	return false
}

// SetVariables gets a reference to the given []Variable and assigns it to the Variables field.
func (o *EnvironmentSpec) SetVariables(v []Variable) {
	o.Variables = v
}

func (o EnvironmentSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	toSerialize["template"] = o.Template
	if !isNil(o.Variables) {
		toSerialize["variables"] = o.Variables
	}
	return toSerialize, nil
}

type NullableEnvironmentSpec struct {
	value *EnvironmentSpec
	isSet bool
}

func (v NullableEnvironmentSpec) Get() *EnvironmentSpec {
	return v.value
}

func (v *NullableEnvironmentSpec) Set(val *EnvironmentSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentSpec(val *EnvironmentSpec) *NullableEnvironmentSpec {
	return &NullableEnvironmentSpec{value: val, isSet: true}
}

func (v NullableEnvironmentSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


