/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the TerraformConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TerraformConfig{}

// TerraformConfig terraform configuration
type TerraformConfig struct {
	BackendFilePath *File `json:"backendFilePath,omitempty"`
	// terraform state store backend variables
	BackendVars []KeyValue `json:"backendVars,omitempty"`
	// environment variables
	EnvVars []KeyValue `json:"envVars,omitempty"`
	// terraform input variables
	InputVars []KeyValue `json:"inputVars,omitempty"`
	// Pipeline secrets groups
	SecretGroups []string `json:"secretGroups,omitempty"`
	TfVarsFilePath *File `json:"tfVarsFilePath,omitempty"`
	// terraform version
	Version string `json:"version"`
}

// NewTerraformConfig instantiates a new TerraformConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTerraformConfig(version string) *TerraformConfig {
	this := TerraformConfig{}
	this.Version = version
	return &this
}

// NewTerraformConfigWithDefaults instantiates a new TerraformConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTerraformConfigWithDefaults() *TerraformConfig {
	this := TerraformConfig{}
	return &this
}

// GetBackendFilePath returns the BackendFilePath field value if set, zero value otherwise.
func (o *TerraformConfig) GetBackendFilePath() File {
	if o == nil || isNil(o.BackendFilePath) {
		var ret File
		return ret
	}
	return *o.BackendFilePath
}

// GetBackendFilePathOk returns a tuple with the BackendFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformConfig) GetBackendFilePathOk() (*File, bool) {
	if o == nil || isNil(o.BackendFilePath) {
		return nil, false
	}
	return o.BackendFilePath, true
}

// HasBackendFilePath returns a boolean if a field has been set.
func (o *TerraformConfig) HasBackendFilePath() bool {
	if o != nil && !isNil(o.BackendFilePath) {
		return true
	}

	return false
}

// SetBackendFilePath gets a reference to the given File and assigns it to the BackendFilePath field.
func (o *TerraformConfig) SetBackendFilePath(v File) {
	o.BackendFilePath = &v
}

// GetBackendVars returns the BackendVars field value if set, zero value otherwise.
func (o *TerraformConfig) GetBackendVars() []KeyValue {
	if o == nil || isNil(o.BackendVars) {
		var ret []KeyValue
		return ret
	}
	return o.BackendVars
}

// GetBackendVarsOk returns a tuple with the BackendVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformConfig) GetBackendVarsOk() ([]KeyValue, bool) {
	if o == nil || isNil(o.BackendVars) {
		return nil, false
	}
	return o.BackendVars, true
}

// HasBackendVars returns a boolean if a field has been set.
func (o *TerraformConfig) HasBackendVars() bool {
	if o != nil && !isNil(o.BackendVars) {
		return true
	}

	return false
}

// SetBackendVars gets a reference to the given []KeyValue and assigns it to the BackendVars field.
func (o *TerraformConfig) SetBackendVars(v []KeyValue) {
	o.BackendVars = v
}

// GetEnvVars returns the EnvVars field value if set, zero value otherwise.
func (o *TerraformConfig) GetEnvVars() []KeyValue {
	if o == nil || isNil(o.EnvVars) {
		var ret []KeyValue
		return ret
	}
	return o.EnvVars
}

// GetEnvVarsOk returns a tuple with the EnvVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformConfig) GetEnvVarsOk() ([]KeyValue, bool) {
	if o == nil || isNil(o.EnvVars) {
		return nil, false
	}
	return o.EnvVars, true
}

// HasEnvVars returns a boolean if a field has been set.
func (o *TerraformConfig) HasEnvVars() bool {
	if o != nil && !isNil(o.EnvVars) {
		return true
	}

	return false
}

// SetEnvVars gets a reference to the given []KeyValue and assigns it to the EnvVars field.
func (o *TerraformConfig) SetEnvVars(v []KeyValue) {
	o.EnvVars = v
}

// GetInputVars returns the InputVars field value if set, zero value otherwise.
func (o *TerraformConfig) GetInputVars() []KeyValue {
	if o == nil || isNil(o.InputVars) {
		var ret []KeyValue
		return ret
	}
	return o.InputVars
}

// GetInputVarsOk returns a tuple with the InputVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformConfig) GetInputVarsOk() ([]KeyValue, bool) {
	if o == nil || isNil(o.InputVars) {
		return nil, false
	}
	return o.InputVars, true
}

// HasInputVars returns a boolean if a field has been set.
func (o *TerraformConfig) HasInputVars() bool {
	if o != nil && !isNil(o.InputVars) {
		return true
	}

	return false
}

// SetInputVars gets a reference to the given []KeyValue and assigns it to the InputVars field.
func (o *TerraformConfig) SetInputVars(v []KeyValue) {
	o.InputVars = v
}

// GetSecretGroups returns the SecretGroups field value if set, zero value otherwise.
func (o *TerraformConfig) GetSecretGroups() []string {
	if o == nil || isNil(o.SecretGroups) {
		var ret []string
		return ret
	}
	return o.SecretGroups
}

// GetSecretGroupsOk returns a tuple with the SecretGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformConfig) GetSecretGroupsOk() ([]string, bool) {
	if o == nil || isNil(o.SecretGroups) {
		return nil, false
	}
	return o.SecretGroups, true
}

// HasSecretGroups returns a boolean if a field has been set.
func (o *TerraformConfig) HasSecretGroups() bool {
	if o != nil && !isNil(o.SecretGroups) {
		return true
	}

	return false
}

// SetSecretGroups gets a reference to the given []string and assigns it to the SecretGroups field.
func (o *TerraformConfig) SetSecretGroups(v []string) {
	o.SecretGroups = v
}

// GetTfVarsFilePath returns the TfVarsFilePath field value if set, zero value otherwise.
func (o *TerraformConfig) GetTfVarsFilePath() File {
	if o == nil || isNil(o.TfVarsFilePath) {
		var ret File
		return ret
	}
	return *o.TfVarsFilePath
}

// GetTfVarsFilePathOk returns a tuple with the TfVarsFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TerraformConfig) GetTfVarsFilePathOk() (*File, bool) {
	if o == nil || isNil(o.TfVarsFilePath) {
		return nil, false
	}
	return o.TfVarsFilePath, true
}

// HasTfVarsFilePath returns a boolean if a field has been set.
func (o *TerraformConfig) HasTfVarsFilePath() bool {
	if o != nil && !isNil(o.TfVarsFilePath) {
		return true
	}

	return false
}

// SetTfVarsFilePath gets a reference to the given File and assigns it to the TfVarsFilePath field.
func (o *TerraformConfig) SetTfVarsFilePath(v File) {
	o.TfVarsFilePath = &v
}

// GetVersion returns the Version field value
func (o *TerraformConfig) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *TerraformConfig) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *TerraformConfig) SetVersion(v string) {
	o.Version = v
}

func (o TerraformConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TerraformConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BackendFilePath) {
		toSerialize["backendFilePath"] = o.BackendFilePath
	}
	if !isNil(o.BackendVars) {
		toSerialize["backendVars"] = o.BackendVars
	}
	if !isNil(o.EnvVars) {
		toSerialize["envVars"] = o.EnvVars
	}
	if !isNil(o.InputVars) {
		toSerialize["inputVars"] = o.InputVars
	}
	if !isNil(o.SecretGroups) {
		toSerialize["secretGroups"] = o.SecretGroups
	}
	if !isNil(o.TfVarsFilePath) {
		toSerialize["tfVarsFilePath"] = o.TfVarsFilePath
	}
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableTerraformConfig struct {
	value *TerraformConfig
	isSet bool
}

func (v NullableTerraformConfig) Get() *TerraformConfig {
	return v.value
}

func (v *NullableTerraformConfig) Set(val *TerraformConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTerraformConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTerraformConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTerraformConfig(val *TerraformConfig) *NullableTerraformConfig {
	return &NullableTerraformConfig{value: val, isSet: true}
}

func (v NullableTerraformConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTerraformConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


