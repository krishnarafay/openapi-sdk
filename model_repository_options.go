/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the RepositoryOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RepositoryOptions{}

// RepositoryOptions repository options
type RepositoryOptions struct {
	CaCert *File `json:"caCert,omitempty"`
	// enable git large file support
	EnableLFS *bool `json:"enableLFS,omitempty"`
	// enable git submodules
	EnableSubmodules *bool `json:"enableSubmodules,omitempty"`
	// insecure
	Insecure *bool `json:"insecure,omitempty"`
	// max retries
	MaxRetires *int32 `json:"maxRetires,omitempty"`
}

// NewRepositoryOptions instantiates a new RepositoryOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRepositoryOptions() *RepositoryOptions {
	this := RepositoryOptions{}
	return &this
}

// NewRepositoryOptionsWithDefaults instantiates a new RepositoryOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRepositoryOptionsWithDefaults() *RepositoryOptions {
	this := RepositoryOptions{}
	return &this
}

// GetCaCert returns the CaCert field value if set, zero value otherwise.
func (o *RepositoryOptions) GetCaCert() File {
	if o == nil || isNil(o.CaCert) {
		var ret File
		return ret
	}
	return *o.CaCert
}

// GetCaCertOk returns a tuple with the CaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryOptions) GetCaCertOk() (*File, bool) {
	if o == nil || isNil(o.CaCert) {
		return nil, false
	}
	return o.CaCert, true
}

// HasCaCert returns a boolean if a field has been set.
func (o *RepositoryOptions) HasCaCert() bool {
	if o != nil && !isNil(o.CaCert) {
		return true
	}

	return false
}

// SetCaCert gets a reference to the given File and assigns it to the CaCert field.
func (o *RepositoryOptions) SetCaCert(v File) {
	o.CaCert = &v
}

// GetEnableLFS returns the EnableLFS field value if set, zero value otherwise.
func (o *RepositoryOptions) GetEnableLFS() bool {
	if o == nil || isNil(o.EnableLFS) {
		var ret bool
		return ret
	}
	return *o.EnableLFS
}

// GetEnableLFSOk returns a tuple with the EnableLFS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryOptions) GetEnableLFSOk() (*bool, bool) {
	if o == nil || isNil(o.EnableLFS) {
		return nil, false
	}
	return o.EnableLFS, true
}

// HasEnableLFS returns a boolean if a field has been set.
func (o *RepositoryOptions) HasEnableLFS() bool {
	if o != nil && !isNil(o.EnableLFS) {
		return true
	}

	return false
}

// SetEnableLFS gets a reference to the given bool and assigns it to the EnableLFS field.
func (o *RepositoryOptions) SetEnableLFS(v bool) {
	o.EnableLFS = &v
}

// GetEnableSubmodules returns the EnableSubmodules field value if set, zero value otherwise.
func (o *RepositoryOptions) GetEnableSubmodules() bool {
	if o == nil || isNil(o.EnableSubmodules) {
		var ret bool
		return ret
	}
	return *o.EnableSubmodules
}

// GetEnableSubmodulesOk returns a tuple with the EnableSubmodules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryOptions) GetEnableSubmodulesOk() (*bool, bool) {
	if o == nil || isNil(o.EnableSubmodules) {
		return nil, false
	}
	return o.EnableSubmodules, true
}

// HasEnableSubmodules returns a boolean if a field has been set.
func (o *RepositoryOptions) HasEnableSubmodules() bool {
	if o != nil && !isNil(o.EnableSubmodules) {
		return true
	}

	return false
}

// SetEnableSubmodules gets a reference to the given bool and assigns it to the EnableSubmodules field.
func (o *RepositoryOptions) SetEnableSubmodules(v bool) {
	o.EnableSubmodules = &v
}

// GetInsecure returns the Insecure field value if set, zero value otherwise.
func (o *RepositoryOptions) GetInsecure() bool {
	if o == nil || isNil(o.Insecure) {
		var ret bool
		return ret
	}
	return *o.Insecure
}

// GetInsecureOk returns a tuple with the Insecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryOptions) GetInsecureOk() (*bool, bool) {
	if o == nil || isNil(o.Insecure) {
		return nil, false
	}
	return o.Insecure, true
}

// HasInsecure returns a boolean if a field has been set.
func (o *RepositoryOptions) HasInsecure() bool {
	if o != nil && !isNil(o.Insecure) {
		return true
	}

	return false
}

// SetInsecure gets a reference to the given bool and assigns it to the Insecure field.
func (o *RepositoryOptions) SetInsecure(v bool) {
	o.Insecure = &v
}

// GetMaxRetires returns the MaxRetires field value if set, zero value otherwise.
func (o *RepositoryOptions) GetMaxRetires() int32 {
	if o == nil || isNil(o.MaxRetires) {
		var ret int32
		return ret
	}
	return *o.MaxRetires
}

// GetMaxRetiresOk returns a tuple with the MaxRetires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RepositoryOptions) GetMaxRetiresOk() (*int32, bool) {
	if o == nil || isNil(o.MaxRetires) {
		return nil, false
	}
	return o.MaxRetires, true
}

// HasMaxRetires returns a boolean if a field has been set.
func (o *RepositoryOptions) HasMaxRetires() bool {
	if o != nil && !isNil(o.MaxRetires) {
		return true
	}

	return false
}

// SetMaxRetires gets a reference to the given int32 and assigns it to the MaxRetires field.
func (o *RepositoryOptions) SetMaxRetires(v int32) {
	o.MaxRetires = &v
}

func (o RepositoryOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RepositoryOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CaCert) {
		toSerialize["caCert"] = o.CaCert
	}
	if !isNil(o.EnableLFS) {
		toSerialize["enableLFS"] = o.EnableLFS
	}
	if !isNil(o.EnableSubmodules) {
		toSerialize["enableSubmodules"] = o.EnableSubmodules
	}
	if !isNil(o.Insecure) {
		toSerialize["insecure"] = o.Insecure
	}
	if !isNil(o.MaxRetires) {
		toSerialize["maxRetires"] = o.MaxRetires
	}
	return toSerialize, nil
}

type NullableRepositoryOptions struct {
	value *RepositoryOptions
	isSet bool
}

func (v NullableRepositoryOptions) Get() *RepositoryOptions {
	return v.value
}

func (v *NullableRepositoryOptions) Set(val *RepositoryOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableRepositoryOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableRepositoryOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRepositoryOptions(val *RepositoryOptions) *NullableRepositoryOptions {
	return &NullableRepositoryOptions{value: val, isSet: true}
}

func (v NullableRepositoryOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRepositoryOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


