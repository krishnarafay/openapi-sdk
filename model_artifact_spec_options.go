/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
	"fmt"
)

// ArtifactSpecOptions - struct for ArtifactSpecOptions
type ArtifactSpecOptions struct {
	HelmOptions *HelmOptions
	YAMLOptions *YAMLOptions
}

// HelmOptionsAsArtifactSpecOptions is a convenience function that returns HelmOptions wrapped in ArtifactSpecOptions
func HelmOptionsAsArtifactSpecOptions(v *HelmOptions) ArtifactSpecOptions {
	return ArtifactSpecOptions{
		HelmOptions: v,
	}
}

// YAMLOptionsAsArtifactSpecOptions is a convenience function that returns YAMLOptions wrapped in ArtifactSpecOptions
func YAMLOptionsAsArtifactSpecOptions(v *YAMLOptions) ArtifactSpecOptions {
	return ArtifactSpecOptions{
		YAMLOptions: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ArtifactSpecOptions) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into HelmOptions
	err = newStrictDecoder(data).Decode(&dst.HelmOptions)
	if err == nil {
		jsonHelmOptions, _ := json.Marshal(dst.HelmOptions)
		if string(jsonHelmOptions) == "{}" { // empty struct
			dst.HelmOptions = nil
		} else {
			match++
		}
	} else {
		dst.HelmOptions = nil
	}

	// try to unmarshal data into YAMLOptions
	err = newStrictDecoder(data).Decode(&dst.YAMLOptions)
	if err == nil {
		jsonYAMLOptions, _ := json.Marshal(dst.YAMLOptions)
		if string(jsonYAMLOptions) == "{}" { // empty struct
			dst.YAMLOptions = nil
		} else {
			match++
		}
	} else {
		dst.YAMLOptions = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.HelmOptions = nil
		dst.YAMLOptions = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ArtifactSpecOptions)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ArtifactSpecOptions)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ArtifactSpecOptions) MarshalJSON() ([]byte, error) {
	if src.HelmOptions != nil {
		return json.Marshal(&src.HelmOptions)
	}

	if src.YAMLOptions != nil {
		return json.Marshal(&src.YAMLOptions)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ArtifactSpecOptions) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.HelmOptions != nil {
		return obj.HelmOptions
	}

	if obj.YAMLOptions != nil {
		return obj.YAMLOptions
	}

	// all schemas are nil
	return nil
}

type NullableArtifactSpecOptions struct {
	value *ArtifactSpecOptions
	isSet bool
}

func (v NullableArtifactSpecOptions) Get() *ArtifactSpecOptions {
	return v.value
}

func (v *NullableArtifactSpecOptions) Set(val *ArtifactSpecOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactSpecOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactSpecOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactSpecOptions(val *ArtifactSpecOptions) *NullableArtifactSpecOptions {
	return &NullableArtifactSpecOptions{value: val, isSet: true}
}

func (v NullableArtifactSpecOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactSpecOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


