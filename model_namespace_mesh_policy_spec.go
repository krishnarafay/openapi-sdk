/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the NamespaceMeshPolicySpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceMeshPolicySpec{}

// NamespaceMeshPolicySpec namespace policy specification
type NamespaceMeshPolicySpec struct {
	// Group of namespace mesh rules
	Rules []ResourceNameAndVersionRef `json:"rules,omitempty"`
	Sharing *SharingSpec `json:"sharing,omitempty"`
	// version of the namespace policy
	Version *string `json:"version,omitempty"`
}

// NewNamespaceMeshPolicySpec instantiates a new NamespaceMeshPolicySpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceMeshPolicySpec() *NamespaceMeshPolicySpec {
	this := NamespaceMeshPolicySpec{}
	return &this
}

// NewNamespaceMeshPolicySpecWithDefaults instantiates a new NamespaceMeshPolicySpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceMeshPolicySpecWithDefaults() *NamespaceMeshPolicySpec {
	this := NamespaceMeshPolicySpec{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *NamespaceMeshPolicySpec) GetRules() []ResourceNameAndVersionRef {
	if o == nil || isNil(o.Rules) {
		var ret []ResourceNameAndVersionRef
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceMeshPolicySpec) GetRulesOk() ([]ResourceNameAndVersionRef, bool) {
	if o == nil || isNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *NamespaceMeshPolicySpec) HasRules() bool {
	if o != nil && !isNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []ResourceNameAndVersionRef and assigns it to the Rules field.
func (o *NamespaceMeshPolicySpec) SetRules(v []ResourceNameAndVersionRef) {
	o.Rules = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *NamespaceMeshPolicySpec) GetSharing() SharingSpec {
	if o == nil || isNil(o.Sharing) {
		var ret SharingSpec
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceMeshPolicySpec) GetSharingOk() (*SharingSpec, bool) {
	if o == nil || isNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *NamespaceMeshPolicySpec) HasSharing() bool {
	if o != nil && !isNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given SharingSpec and assigns it to the Sharing field.
func (o *NamespaceMeshPolicySpec) SetSharing(v SharingSpec) {
	o.Sharing = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *NamespaceMeshPolicySpec) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceMeshPolicySpec) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *NamespaceMeshPolicySpec) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *NamespaceMeshPolicySpec) SetVersion(v string) {
	o.Version = &v
}

func (o NamespaceMeshPolicySpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceMeshPolicySpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !isNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	if !isNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableNamespaceMeshPolicySpec struct {
	value *NamespaceMeshPolicySpec
	isSet bool
}

func (v NullableNamespaceMeshPolicySpec) Get() *NamespaceMeshPolicySpec {
	return v.value
}

func (v *NullableNamespaceMeshPolicySpec) Set(val *NamespaceMeshPolicySpec) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceMeshPolicySpec) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceMeshPolicySpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceMeshPolicySpec(val *NamespaceMeshPolicySpec) *NullableNamespaceMeshPolicySpec {
	return &NullableNamespaceMeshPolicySpec{value: val, isSet: true}
}

func (v NullableNamespaceMeshPolicySpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceMeshPolicySpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


