/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
	"fmt"
)

// CronTriggerConfigRepo - struct for CronTriggerConfigRepo
type CronTriggerConfigRepo struct {
	TriggerGitRepoConfiguration *TriggerGitRepoConfiguration
	TriggerHelmRepoConfiguration *TriggerHelmRepoConfiguration
}

// TriggerGitRepoConfigurationAsCronTriggerConfigRepo is a convenience function that returns TriggerGitRepoConfiguration wrapped in CronTriggerConfigRepo
func TriggerGitRepoConfigurationAsCronTriggerConfigRepo(v *TriggerGitRepoConfiguration) CronTriggerConfigRepo {
	return CronTriggerConfigRepo{
		TriggerGitRepoConfiguration: v,
	}
}

// TriggerHelmRepoConfigurationAsCronTriggerConfigRepo is a convenience function that returns TriggerHelmRepoConfiguration wrapped in CronTriggerConfigRepo
func TriggerHelmRepoConfigurationAsCronTriggerConfigRepo(v *TriggerHelmRepoConfiguration) CronTriggerConfigRepo {
	return CronTriggerConfigRepo{
		TriggerHelmRepoConfiguration: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CronTriggerConfigRepo) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into TriggerGitRepoConfiguration
	err = newStrictDecoder(data).Decode(&dst.TriggerGitRepoConfiguration)
	if err == nil {
		jsonTriggerGitRepoConfiguration, _ := json.Marshal(dst.TriggerGitRepoConfiguration)
		if string(jsonTriggerGitRepoConfiguration) == "{}" { // empty struct
			dst.TriggerGitRepoConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.TriggerGitRepoConfiguration = nil
	}

	// try to unmarshal data into TriggerHelmRepoConfiguration
	err = newStrictDecoder(data).Decode(&dst.TriggerHelmRepoConfiguration)
	if err == nil {
		jsonTriggerHelmRepoConfiguration, _ := json.Marshal(dst.TriggerHelmRepoConfiguration)
		if string(jsonTriggerHelmRepoConfiguration) == "{}" { // empty struct
			dst.TriggerHelmRepoConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.TriggerHelmRepoConfiguration = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.TriggerGitRepoConfiguration = nil
		dst.TriggerHelmRepoConfiguration = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CronTriggerConfigRepo)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CronTriggerConfigRepo)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CronTriggerConfigRepo) MarshalJSON() ([]byte, error) {
	if src.TriggerGitRepoConfiguration != nil {
		return json.Marshal(&src.TriggerGitRepoConfiguration)
	}

	if src.TriggerHelmRepoConfiguration != nil {
		return json.Marshal(&src.TriggerHelmRepoConfiguration)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CronTriggerConfigRepo) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.TriggerGitRepoConfiguration != nil {
		return obj.TriggerGitRepoConfiguration
	}

	if obj.TriggerHelmRepoConfiguration != nil {
		return obj.TriggerHelmRepoConfiguration
	}

	// all schemas are nil
	return nil
}

type NullableCronTriggerConfigRepo struct {
	value *CronTriggerConfigRepo
	isSet bool
}

func (v NullableCronTriggerConfigRepo) Get() *CronTriggerConfigRepo {
	return v.value
}

func (v *NullableCronTriggerConfigRepo) Set(val *CronTriggerConfigRepo) {
	v.value = val
	v.isSet = true
}

func (v NullableCronTriggerConfigRepo) IsSet() bool {
	return v.isSet
}

func (v *NullableCronTriggerConfigRepo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCronTriggerConfigRepo(val *CronTriggerConfigRepo) *NullableCronTriggerConfigRepo {
	return &NullableCronTriggerConfigRepo{value: val, isSet: true}
}

func (v NullableCronTriggerConfigRepo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCronTriggerConfigRepo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


