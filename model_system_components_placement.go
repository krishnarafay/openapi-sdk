/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the SystemComponentsPlacement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SystemComponentsPlacement{}

// SystemComponentsPlacement struct for SystemComponentsPlacement
type SystemComponentsPlacement struct {
	DaemonSetOverride *DaemonSetOverride `json:"daemonSetOverride,omitempty"`
	NodeSelector *map[string]string `json:"nodeSelector,omitempty"`
	Tolerations []DaemonSetOverrideTolerationsInner `json:"tolerations,omitempty"`
}

// NewSystemComponentsPlacement instantiates a new SystemComponentsPlacement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSystemComponentsPlacement() *SystemComponentsPlacement {
	this := SystemComponentsPlacement{}
	return &this
}

// NewSystemComponentsPlacementWithDefaults instantiates a new SystemComponentsPlacement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSystemComponentsPlacementWithDefaults() *SystemComponentsPlacement {
	this := SystemComponentsPlacement{}
	return &this
}

// GetDaemonSetOverride returns the DaemonSetOverride field value if set, zero value otherwise.
func (o *SystemComponentsPlacement) GetDaemonSetOverride() DaemonSetOverride {
	if o == nil || isNil(o.DaemonSetOverride) {
		var ret DaemonSetOverride
		return ret
	}
	return *o.DaemonSetOverride
}

// GetDaemonSetOverrideOk returns a tuple with the DaemonSetOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemComponentsPlacement) GetDaemonSetOverrideOk() (*DaemonSetOverride, bool) {
	if o == nil || isNil(o.DaemonSetOverride) {
		return nil, false
	}
	return o.DaemonSetOverride, true
}

// HasDaemonSetOverride returns a boolean if a field has been set.
func (o *SystemComponentsPlacement) HasDaemonSetOverride() bool {
	if o != nil && !isNil(o.DaemonSetOverride) {
		return true
	}

	return false
}

// SetDaemonSetOverride gets a reference to the given DaemonSetOverride and assigns it to the DaemonSetOverride field.
func (o *SystemComponentsPlacement) SetDaemonSetOverride(v DaemonSetOverride) {
	o.DaemonSetOverride = &v
}

// GetNodeSelector returns the NodeSelector field value if set, zero value otherwise.
func (o *SystemComponentsPlacement) GetNodeSelector() map[string]string {
	if o == nil || isNil(o.NodeSelector) {
		var ret map[string]string
		return ret
	}
	return *o.NodeSelector
}

// GetNodeSelectorOk returns a tuple with the NodeSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemComponentsPlacement) GetNodeSelectorOk() (*map[string]string, bool) {
	if o == nil || isNil(o.NodeSelector) {
		return nil, false
	}
	return o.NodeSelector, true
}

// HasNodeSelector returns a boolean if a field has been set.
func (o *SystemComponentsPlacement) HasNodeSelector() bool {
	if o != nil && !isNil(o.NodeSelector) {
		return true
	}

	return false
}

// SetNodeSelector gets a reference to the given map[string]string and assigns it to the NodeSelector field.
func (o *SystemComponentsPlacement) SetNodeSelector(v map[string]string) {
	o.NodeSelector = &v
}

// GetTolerations returns the Tolerations field value if set, zero value otherwise.
func (o *SystemComponentsPlacement) GetTolerations() []DaemonSetOverrideTolerationsInner {
	if o == nil || isNil(o.Tolerations) {
		var ret []DaemonSetOverrideTolerationsInner
		return ret
	}
	return o.Tolerations
}

// GetTolerationsOk returns a tuple with the Tolerations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SystemComponentsPlacement) GetTolerationsOk() ([]DaemonSetOverrideTolerationsInner, bool) {
	if o == nil || isNil(o.Tolerations) {
		return nil, false
	}
	return o.Tolerations, true
}

// HasTolerations returns a boolean if a field has been set.
func (o *SystemComponentsPlacement) HasTolerations() bool {
	if o != nil && !isNil(o.Tolerations) {
		return true
	}

	return false
}

// SetTolerations gets a reference to the given []DaemonSetOverrideTolerationsInner and assigns it to the Tolerations field.
func (o *SystemComponentsPlacement) SetTolerations(v []DaemonSetOverrideTolerationsInner) {
	o.Tolerations = v
}

func (o SystemComponentsPlacement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SystemComponentsPlacement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DaemonSetOverride) {
		toSerialize["daemonSetOverride"] = o.DaemonSetOverride
	}
	if !isNil(o.NodeSelector) {
		toSerialize["nodeSelector"] = o.NodeSelector
	}
	if !isNil(o.Tolerations) {
		toSerialize["tolerations"] = o.Tolerations
	}
	return toSerialize, nil
}

type NullableSystemComponentsPlacement struct {
	value *SystemComponentsPlacement
	isSet bool
}

func (v NullableSystemComponentsPlacement) Get() *SystemComponentsPlacement {
	return v.value
}

func (v *NullableSystemComponentsPlacement) Set(val *SystemComponentsPlacement) {
	v.value = val
	v.isSet = true
}

func (v NullableSystemComponentsPlacement) IsSet() bool {
	return v.isSet
}

func (v *NullableSystemComponentsPlacement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSystemComponentsPlacement(val *SystemComponentsPlacement) *NullableSystemComponentsPlacement {
	return &NullableSystemComponentsPlacement{value: val, isSet: true}
}

func (v NullableSystemComponentsPlacement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSystemComponentsPlacement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


