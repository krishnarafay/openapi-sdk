/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the DaemonSetOverride type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DaemonSetOverride{}

// DaemonSetOverride struct for DaemonSetOverride
type DaemonSetOverride struct {
	NodeSelectionEnabled *bool `json:"nodeSelectionEnabled,omitempty"`
	Tolerations []DaemonSetOverrideTolerationsInner `json:"tolerations,omitempty"`
}

// NewDaemonSetOverride instantiates a new DaemonSetOverride object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDaemonSetOverride() *DaemonSetOverride {
	this := DaemonSetOverride{}
	return &this
}

// NewDaemonSetOverrideWithDefaults instantiates a new DaemonSetOverride object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDaemonSetOverrideWithDefaults() *DaemonSetOverride {
	this := DaemonSetOverride{}
	return &this
}

// GetNodeSelectionEnabled returns the NodeSelectionEnabled field value if set, zero value otherwise.
func (o *DaemonSetOverride) GetNodeSelectionEnabled() bool {
	if o == nil || isNil(o.NodeSelectionEnabled) {
		var ret bool
		return ret
	}
	return *o.NodeSelectionEnabled
}

// GetNodeSelectionEnabledOk returns a tuple with the NodeSelectionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonSetOverride) GetNodeSelectionEnabledOk() (*bool, bool) {
	if o == nil || isNil(o.NodeSelectionEnabled) {
		return nil, false
	}
	return o.NodeSelectionEnabled, true
}

// HasNodeSelectionEnabled returns a boolean if a field has been set.
func (o *DaemonSetOverride) HasNodeSelectionEnabled() bool {
	if o != nil && !isNil(o.NodeSelectionEnabled) {
		return true
	}

	return false
}

// SetNodeSelectionEnabled gets a reference to the given bool and assigns it to the NodeSelectionEnabled field.
func (o *DaemonSetOverride) SetNodeSelectionEnabled(v bool) {
	o.NodeSelectionEnabled = &v
}

// GetTolerations returns the Tolerations field value if set, zero value otherwise.
func (o *DaemonSetOverride) GetTolerations() []DaemonSetOverrideTolerationsInner {
	if o == nil || isNil(o.Tolerations) {
		var ret []DaemonSetOverrideTolerationsInner
		return ret
	}
	return o.Tolerations
}

// GetTolerationsOk returns a tuple with the Tolerations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DaemonSetOverride) GetTolerationsOk() ([]DaemonSetOverrideTolerationsInner, bool) {
	if o == nil || isNil(o.Tolerations) {
		return nil, false
	}
	return o.Tolerations, true
}

// HasTolerations returns a boolean if a field has been set.
func (o *DaemonSetOverride) HasTolerations() bool {
	if o != nil && !isNil(o.Tolerations) {
		return true
	}

	return false
}

// SetTolerations gets a reference to the given []DaemonSetOverrideTolerationsInner and assigns it to the Tolerations field.
func (o *DaemonSetOverride) SetTolerations(v []DaemonSetOverrideTolerationsInner) {
	o.Tolerations = v
}

func (o DaemonSetOverride) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DaemonSetOverride) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.NodeSelectionEnabled) {
		toSerialize["nodeSelectionEnabled"] = o.NodeSelectionEnabled
	}
	if !isNil(o.Tolerations) {
		toSerialize["tolerations"] = o.Tolerations
	}
	return toSerialize, nil
}

type NullableDaemonSetOverride struct {
	value *DaemonSetOverride
	isSet bool
}

func (v NullableDaemonSetOverride) Get() *DaemonSetOverride {
	return v.value
}

func (v *NullableDaemonSetOverride) Set(val *DaemonSetOverride) {
	v.value = val
	v.isSet = true
}

func (v NullableDaemonSetOverride) IsSet() bool {
	return v.isSet
}

func (v *NullableDaemonSetOverride) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDaemonSetOverride(val *DaemonSetOverride) *NullableDaemonSetOverride {
	return &NullableDaemonSetOverride{value: val, isSet: true}
}

func (v NullableDaemonSetOverride) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDaemonSetOverride) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


