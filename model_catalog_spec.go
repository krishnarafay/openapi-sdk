/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the CatalogSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CatalogSpec{}

// CatalogSpec specification of catalog
type CatalogSpec struct {
	// flag to indicate if the catalog is synced periodically
	AutoSync *bool `json:"autoSync,omitempty"`
	// icon url of catalog
	IconURL *string `json:"iconURL,omitempty"`
	// catalog helm repository name
	Repository string `json:"repository"`
	Sharing *SharingSpec `json:"sharing,omitempty"`
	// type of catalog
	Type string `json:"type"`
}

// NewCatalogSpec instantiates a new CatalogSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCatalogSpec(repository string, type_ string) *CatalogSpec {
	this := CatalogSpec{}
	this.Repository = repository
	this.Type = type_
	return &this
}

// NewCatalogSpecWithDefaults instantiates a new CatalogSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCatalogSpecWithDefaults() *CatalogSpec {
	this := CatalogSpec{}
	return &this
}

// GetAutoSync returns the AutoSync field value if set, zero value otherwise.
func (o *CatalogSpec) GetAutoSync() bool {
	if o == nil || isNil(o.AutoSync) {
		var ret bool
		return ret
	}
	return *o.AutoSync
}

// GetAutoSyncOk returns a tuple with the AutoSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSpec) GetAutoSyncOk() (*bool, bool) {
	if o == nil || isNil(o.AutoSync) {
		return nil, false
	}
	return o.AutoSync, true
}

// HasAutoSync returns a boolean if a field has been set.
func (o *CatalogSpec) HasAutoSync() bool {
	if o != nil && !isNil(o.AutoSync) {
		return true
	}

	return false
}

// SetAutoSync gets a reference to the given bool and assigns it to the AutoSync field.
func (o *CatalogSpec) SetAutoSync(v bool) {
	o.AutoSync = &v
}

// GetIconURL returns the IconURL field value if set, zero value otherwise.
func (o *CatalogSpec) GetIconURL() string {
	if o == nil || isNil(o.IconURL) {
		var ret string
		return ret
	}
	return *o.IconURL
}

// GetIconURLOk returns a tuple with the IconURL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSpec) GetIconURLOk() (*string, bool) {
	if o == nil || isNil(o.IconURL) {
		return nil, false
	}
	return o.IconURL, true
}

// HasIconURL returns a boolean if a field has been set.
func (o *CatalogSpec) HasIconURL() bool {
	if o != nil && !isNil(o.IconURL) {
		return true
	}

	return false
}

// SetIconURL gets a reference to the given string and assigns it to the IconURL field.
func (o *CatalogSpec) SetIconURL(v string) {
	o.IconURL = &v
}

// GetRepository returns the Repository field value
func (o *CatalogSpec) GetRepository() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Repository
}

// GetRepositoryOk returns a tuple with the Repository field value
// and a boolean to check if the value has been set.
func (o *CatalogSpec) GetRepositoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Repository, true
}

// SetRepository sets field value
func (o *CatalogSpec) SetRepository(v string) {
	o.Repository = v
}

// GetSharing returns the Sharing field value if set, zero value otherwise.
func (o *CatalogSpec) GetSharing() SharingSpec {
	if o == nil || isNil(o.Sharing) {
		var ret SharingSpec
		return ret
	}
	return *o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CatalogSpec) GetSharingOk() (*SharingSpec, bool) {
	if o == nil || isNil(o.Sharing) {
		return nil, false
	}
	return o.Sharing, true
}

// HasSharing returns a boolean if a field has been set.
func (o *CatalogSpec) HasSharing() bool {
	if o != nil && !isNil(o.Sharing) {
		return true
	}

	return false
}

// SetSharing gets a reference to the given SharingSpec and assigns it to the Sharing field.
func (o *CatalogSpec) SetSharing(v SharingSpec) {
	o.Sharing = &v
}

// GetType returns the Type field value
func (o *CatalogSpec) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CatalogSpec) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CatalogSpec) SetType(v string) {
	o.Type = v
}

func (o CatalogSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CatalogSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.AutoSync) {
		toSerialize["autoSync"] = o.AutoSync
	}
	if !isNil(o.IconURL) {
		toSerialize["iconURL"] = o.IconURL
	}
	toSerialize["repository"] = o.Repository
	if !isNil(o.Sharing) {
		toSerialize["sharing"] = o.Sharing
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

type NullableCatalogSpec struct {
	value *CatalogSpec
	isSet bool
}

func (v NullableCatalogSpec) Get() *CatalogSpec {
	return v.value
}

func (v *NullableCatalogSpec) Set(val *CatalogSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableCatalogSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableCatalogSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCatalogSpec(val *CatalogSpec) *NullableCatalogSpec {
	return &NullableCatalogSpec{value: val, isSet: true}
}

func (v NullableCatalogSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCatalogSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


