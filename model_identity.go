/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Identity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Identity{}

// Identity struct for Identity
type Identity struct {
	// For more information see use managed identities in AKS. Valid values are SystemAssigned, UserAssigned, None.
	Type *string `json:"type,omitempty"`
	// The keys must be ARM resource IDs in the form: /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}.
	UserAssignedIdentities *map[string]string `json:"userAssignedIdentities,omitempty"`
}

// NewIdentity instantiates a new Identity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentity() *Identity {
	this := Identity{}
	return &this
}

// NewIdentityWithDefaults instantiates a new Identity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityWithDefaults() *Identity {
	this := Identity{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Identity) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Identity) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Identity) SetType(v string) {
	o.Type = &v
}

// GetUserAssignedIdentities returns the UserAssignedIdentities field value if set, zero value otherwise.
func (o *Identity) GetUserAssignedIdentities() map[string]string {
	if o == nil || isNil(o.UserAssignedIdentities) {
		var ret map[string]string
		return ret
	}
	return *o.UserAssignedIdentities
}

// GetUserAssignedIdentitiesOk returns a tuple with the UserAssignedIdentities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Identity) GetUserAssignedIdentitiesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.UserAssignedIdentities) {
		return nil, false
	}
	return o.UserAssignedIdentities, true
}

// HasUserAssignedIdentities returns a boolean if a field has been set.
func (o *Identity) HasUserAssignedIdentities() bool {
	if o != nil && !isNil(o.UserAssignedIdentities) {
		return true
	}

	return false
}

// SetUserAssignedIdentities gets a reference to the given map[string]string and assigns it to the UserAssignedIdentities field.
func (o *Identity) SetUserAssignedIdentities(v map[string]string) {
	o.UserAssignedIdentities = &v
}

func (o Identity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Identity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !isNil(o.UserAssignedIdentities) {
		toSerialize["userAssignedIdentities"] = o.UserAssignedIdentities
	}
	return toSerialize, nil
}

type NullableIdentity struct {
	value *Identity
	isSet bool
}

func (v NullableIdentity) Get() *Identity {
	return v.value
}

func (v *NullableIdentity) Set(val *Identity) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentity) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentity(val *Identity) *NullableIdentity {
	return &NullableIdentity{value: val, isSet: true}
}

func (v NullableIdentity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


