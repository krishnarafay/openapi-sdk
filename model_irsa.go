/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Irsa type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Irsa{}

// Irsa struct for Irsa
type Irsa struct {
	RoleArn *string `json:"roleArn,omitempty"`
	ServiceAccountName *string `json:"serviceAccountName,omitempty"`
	ServiceAccountNamespace *string `json:"serviceAccountNamespace,omitempty"`
}

// NewIrsa instantiates a new Irsa object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIrsa() *Irsa {
	this := Irsa{}
	return &this
}

// NewIrsaWithDefaults instantiates a new Irsa object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIrsaWithDefaults() *Irsa {
	this := Irsa{}
	return &this
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *Irsa) GetRoleArn() string {
	if o == nil || isNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Irsa) GetRoleArnOk() (*string, bool) {
	if o == nil || isNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *Irsa) HasRoleArn() bool {
	if o != nil && !isNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *Irsa) SetRoleArn(v string) {
	o.RoleArn = &v
}

// GetServiceAccountName returns the ServiceAccountName field value if set, zero value otherwise.
func (o *Irsa) GetServiceAccountName() string {
	if o == nil || isNil(o.ServiceAccountName) {
		var ret string
		return ret
	}
	return *o.ServiceAccountName
}

// GetServiceAccountNameOk returns a tuple with the ServiceAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Irsa) GetServiceAccountNameOk() (*string, bool) {
	if o == nil || isNil(o.ServiceAccountName) {
		return nil, false
	}
	return o.ServiceAccountName, true
}

// HasServiceAccountName returns a boolean if a field has been set.
func (o *Irsa) HasServiceAccountName() bool {
	if o != nil && !isNil(o.ServiceAccountName) {
		return true
	}

	return false
}

// SetServiceAccountName gets a reference to the given string and assigns it to the ServiceAccountName field.
func (o *Irsa) SetServiceAccountName(v string) {
	o.ServiceAccountName = &v
}

// GetServiceAccountNamespace returns the ServiceAccountNamespace field value if set, zero value otherwise.
func (o *Irsa) GetServiceAccountNamespace() string {
	if o == nil || isNil(o.ServiceAccountNamespace) {
		var ret string
		return ret
	}
	return *o.ServiceAccountNamespace
}

// GetServiceAccountNamespaceOk returns a tuple with the ServiceAccountNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Irsa) GetServiceAccountNamespaceOk() (*string, bool) {
	if o == nil || isNil(o.ServiceAccountNamespace) {
		return nil, false
	}
	return o.ServiceAccountNamespace, true
}

// HasServiceAccountNamespace returns a boolean if a field has been set.
func (o *Irsa) HasServiceAccountNamespace() bool {
	if o != nil && !isNil(o.ServiceAccountNamespace) {
		return true
	}

	return false
}

// SetServiceAccountNamespace gets a reference to the given string and assigns it to the ServiceAccountNamespace field.
func (o *Irsa) SetServiceAccountNamespace(v string) {
	o.ServiceAccountNamespace = &v
}

func (o Irsa) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Irsa) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RoleArn) {
		toSerialize["roleArn"] = o.RoleArn
	}
	if !isNil(o.ServiceAccountName) {
		toSerialize["serviceAccountName"] = o.ServiceAccountName
	}
	if !isNil(o.ServiceAccountNamespace) {
		toSerialize["serviceAccountNamespace"] = o.ServiceAccountNamespace
	}
	return toSerialize, nil
}

type NullableIrsa struct {
	value *Irsa
	isSet bool
}

func (v NullableIrsa) Get() *Irsa {
	return v.value
}

func (v *NullableIrsa) Set(val *Irsa) {
	v.value = val
	v.isSet = true
}

func (v NullableIrsa) IsSet() bool {
	return v.isSet
}

func (v *NullableIrsa) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIrsa(val *Irsa) *NullableIrsa {
	return &NullableIrsa{value: val, isSet: true}
}

func (v NullableIrsa) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIrsa) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


