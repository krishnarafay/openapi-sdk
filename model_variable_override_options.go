/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the VariableOverrideOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VariableOverrideOptions{}

// VariableOverrideOptions struct for VariableOverrideOptions
type VariableOverrideOptions struct {
	// If the override type is restricted, values it is restricted to
	RestrictedValues []string `json:"restrictedValues,omitempty"`
	// Specify the type of ovverride this variable supports
	Type *string `json:"type,omitempty"`
}

// NewVariableOverrideOptions instantiates a new VariableOverrideOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableOverrideOptions() *VariableOverrideOptions {
	this := VariableOverrideOptions{}
	return &this
}

// NewVariableOverrideOptionsWithDefaults instantiates a new VariableOverrideOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableOverrideOptionsWithDefaults() *VariableOverrideOptions {
	this := VariableOverrideOptions{}
	return &this
}

// GetRestrictedValues returns the RestrictedValues field value if set, zero value otherwise.
func (o *VariableOverrideOptions) GetRestrictedValues() []string {
	if o == nil || isNil(o.RestrictedValues) {
		var ret []string
		return ret
	}
	return o.RestrictedValues
}

// GetRestrictedValuesOk returns a tuple with the RestrictedValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableOverrideOptions) GetRestrictedValuesOk() ([]string, bool) {
	if o == nil || isNil(o.RestrictedValues) {
		return nil, false
	}
	return o.RestrictedValues, true
}

// HasRestrictedValues returns a boolean if a field has been set.
func (o *VariableOverrideOptions) HasRestrictedValues() bool {
	if o != nil && !isNil(o.RestrictedValues) {
		return true
	}

	return false
}

// SetRestrictedValues gets a reference to the given []string and assigns it to the RestrictedValues field.
func (o *VariableOverrideOptions) SetRestrictedValues(v []string) {
	o.RestrictedValues = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *VariableOverrideOptions) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableOverrideOptions) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *VariableOverrideOptions) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *VariableOverrideOptions) SetType(v string) {
	o.Type = &v
}

func (o VariableOverrideOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VariableOverrideOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.RestrictedValues) {
		toSerialize["restrictedValues"] = o.RestrictedValues
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableVariableOverrideOptions struct {
	value *VariableOverrideOptions
	isSet bool
}

func (v NullableVariableOverrideOptions) Get() *VariableOverrideOptions {
	return v.value
}

func (v *NullableVariableOverrideOptions) Set(val *VariableOverrideOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableOverrideOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableOverrideOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableOverrideOptions(val *VariableOverrideOptions) *NullableVariableOverrideOptions {
	return &NullableVariableOverrideOptions{value: val, isSet: true}
}

func (v NullableVariableOverrideOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableOverrideOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


