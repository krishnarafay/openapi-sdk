/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the Storageprofile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Storageprofile{}

// Storageprofile struct for Storageprofile
type Storageprofile struct {
	DiskCSIDriver *Diskcsidriver `json:"diskCSIDriver,omitempty"`
	FileCSIDriver *Filecsidriver `json:"fileCSIDriver,omitempty"`
	SnapshotController *Snapshotcontroller `json:"snapshotController,omitempty"`
}

// NewStorageprofile instantiates a new Storageprofile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageprofile() *Storageprofile {
	this := Storageprofile{}
	return &this
}

// NewStorageprofileWithDefaults instantiates a new Storageprofile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageprofileWithDefaults() *Storageprofile {
	this := Storageprofile{}
	return &this
}

// GetDiskCSIDriver returns the DiskCSIDriver field value if set, zero value otherwise.
func (o *Storageprofile) GetDiskCSIDriver() Diskcsidriver {
	if o == nil || isNil(o.DiskCSIDriver) {
		var ret Diskcsidriver
		return ret
	}
	return *o.DiskCSIDriver
}

// GetDiskCSIDriverOk returns a tuple with the DiskCSIDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storageprofile) GetDiskCSIDriverOk() (*Diskcsidriver, bool) {
	if o == nil || isNil(o.DiskCSIDriver) {
		return nil, false
	}
	return o.DiskCSIDriver, true
}

// HasDiskCSIDriver returns a boolean if a field has been set.
func (o *Storageprofile) HasDiskCSIDriver() bool {
	if o != nil && !isNil(o.DiskCSIDriver) {
		return true
	}

	return false
}

// SetDiskCSIDriver gets a reference to the given Diskcsidriver and assigns it to the DiskCSIDriver field.
func (o *Storageprofile) SetDiskCSIDriver(v Diskcsidriver) {
	o.DiskCSIDriver = &v
}

// GetFileCSIDriver returns the FileCSIDriver field value if set, zero value otherwise.
func (o *Storageprofile) GetFileCSIDriver() Filecsidriver {
	if o == nil || isNil(o.FileCSIDriver) {
		var ret Filecsidriver
		return ret
	}
	return *o.FileCSIDriver
}

// GetFileCSIDriverOk returns a tuple with the FileCSIDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storageprofile) GetFileCSIDriverOk() (*Filecsidriver, bool) {
	if o == nil || isNil(o.FileCSIDriver) {
		return nil, false
	}
	return o.FileCSIDriver, true
}

// HasFileCSIDriver returns a boolean if a field has been set.
func (o *Storageprofile) HasFileCSIDriver() bool {
	if o != nil && !isNil(o.FileCSIDriver) {
		return true
	}

	return false
}

// SetFileCSIDriver gets a reference to the given Filecsidriver and assigns it to the FileCSIDriver field.
func (o *Storageprofile) SetFileCSIDriver(v Filecsidriver) {
	o.FileCSIDriver = &v
}

// GetSnapshotController returns the SnapshotController field value if set, zero value otherwise.
func (o *Storageprofile) GetSnapshotController() Snapshotcontroller {
	if o == nil || isNil(o.SnapshotController) {
		var ret Snapshotcontroller
		return ret
	}
	return *o.SnapshotController
}

// GetSnapshotControllerOk returns a tuple with the SnapshotController field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Storageprofile) GetSnapshotControllerOk() (*Snapshotcontroller, bool) {
	if o == nil || isNil(o.SnapshotController) {
		return nil, false
	}
	return o.SnapshotController, true
}

// HasSnapshotController returns a boolean if a field has been set.
func (o *Storageprofile) HasSnapshotController() bool {
	if o != nil && !isNil(o.SnapshotController) {
		return true
	}

	return false
}

// SetSnapshotController gets a reference to the given Snapshotcontroller and assigns it to the SnapshotController field.
func (o *Storageprofile) SetSnapshotController(v Snapshotcontroller) {
	o.SnapshotController = &v
}

func (o Storageprofile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Storageprofile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DiskCSIDriver) {
		toSerialize["diskCSIDriver"] = o.DiskCSIDriver
	}
	if !isNil(o.FileCSIDriver) {
		toSerialize["fileCSIDriver"] = o.FileCSIDriver
	}
	if !isNil(o.SnapshotController) {
		toSerialize["snapshotController"] = o.SnapshotController
	}
	return toSerialize, nil
}

type NullableStorageprofile struct {
	value *Storageprofile
	isSet bool
}

func (v NullableStorageprofile) Get() *Storageprofile {
	return v.value
}

func (v *NullableStorageprofile) Set(val *Storageprofile) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageprofile) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageprofile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageprofile(val *Storageprofile) *NullableStorageprofile {
	return &NullableStorageprofile{value: val, isSet: true}
}

func (v NullableStorageprofile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageprofile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


