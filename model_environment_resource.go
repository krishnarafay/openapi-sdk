/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the EnvironmentResource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnvironmentResource{}

// EnvironmentResource struct for EnvironmentResource
type EnvironmentResource struct {
	// Specify the environment resource reference that it depends on
	DependsOn []ResourceNameAndVersionRef `json:"dependsOn,omitempty"`
	// Specify the environment resource kind
	Kind *string `json:"kind,omitempty"`
	// Specify the environment resource name
	Name *string `json:"name,omitempty"`
	ResourceOptions *EnvironmentResourceOptions `json:"resourceOptions,omitempty"`
	// Specify the environment resource type
	Type *string `json:"type,omitempty"`
}

// NewEnvironmentResource instantiates a new EnvironmentResource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnvironmentResource() *EnvironmentResource {
	this := EnvironmentResource{}
	return &this
}

// NewEnvironmentResourceWithDefaults instantiates a new EnvironmentResource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnvironmentResourceWithDefaults() *EnvironmentResource {
	this := EnvironmentResource{}
	return &this
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *EnvironmentResource) GetDependsOn() []ResourceNameAndVersionRef {
	if o == nil || isNil(o.DependsOn) {
		var ret []ResourceNameAndVersionRef
		return ret
	}
	return o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResource) GetDependsOnOk() ([]ResourceNameAndVersionRef, bool) {
	if o == nil || isNil(o.DependsOn) {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *EnvironmentResource) HasDependsOn() bool {
	if o != nil && !isNil(o.DependsOn) {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given []ResourceNameAndVersionRef and assigns it to the DependsOn field.
func (o *EnvironmentResource) SetDependsOn(v []ResourceNameAndVersionRef) {
	o.DependsOn = v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *EnvironmentResource) GetKind() string {
	if o == nil || isNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResource) GetKindOk() (*string, bool) {
	if o == nil || isNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *EnvironmentResource) HasKind() bool {
	if o != nil && !isNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *EnvironmentResource) SetKind(v string) {
	o.Kind = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EnvironmentResource) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResource) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EnvironmentResource) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EnvironmentResource) SetName(v string) {
	o.Name = &v
}

// GetResourceOptions returns the ResourceOptions field value if set, zero value otherwise.
func (o *EnvironmentResource) GetResourceOptions() EnvironmentResourceOptions {
	if o == nil || isNil(o.ResourceOptions) {
		var ret EnvironmentResourceOptions
		return ret
	}
	return *o.ResourceOptions
}

// GetResourceOptionsOk returns a tuple with the ResourceOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResource) GetResourceOptionsOk() (*EnvironmentResourceOptions, bool) {
	if o == nil || isNil(o.ResourceOptions) {
		return nil, false
	}
	return o.ResourceOptions, true
}

// HasResourceOptions returns a boolean if a field has been set.
func (o *EnvironmentResource) HasResourceOptions() bool {
	if o != nil && !isNil(o.ResourceOptions) {
		return true
	}

	return false
}

// SetResourceOptions gets a reference to the given EnvironmentResourceOptions and assigns it to the ResourceOptions field.
func (o *EnvironmentResource) SetResourceOptions(v EnvironmentResourceOptions) {
	o.ResourceOptions = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *EnvironmentResource) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnvironmentResource) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *EnvironmentResource) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *EnvironmentResource) SetType(v string) {
	o.Type = &v
}

func (o EnvironmentResource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnvironmentResource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.DependsOn) {
		toSerialize["dependsOn"] = o.DependsOn
	}
	if !isNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.ResourceOptions) {
		toSerialize["resourceOptions"] = o.ResourceOptions
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableEnvironmentResource struct {
	value *EnvironmentResource
	isSet bool
}

func (v NullableEnvironmentResource) Get() *EnvironmentResource {
	return v.value
}

func (v *NullableEnvironmentResource) Set(val *EnvironmentResource) {
	v.value = val
	v.isSet = true
}

func (v NullableEnvironmentResource) IsSet() bool {
	return v.isSet
}

func (v *NullableEnvironmentResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnvironmentResource(val *EnvironmentResource) *NullableEnvironmentResource {
	return &NullableEnvironmentResource{value: val, isSet: true}
}

func (v NullableEnvironmentResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnvironmentResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


