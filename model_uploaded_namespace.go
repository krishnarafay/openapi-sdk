/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the UploadedNamespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadedNamespace{}

// UploadedNamespace uploaded namespace
type UploadedNamespace struct {
	Path *File `json:"path,omitempty"`
}

// NewUploadedNamespace instantiates a new UploadedNamespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadedNamespace() *UploadedNamespace {
	this := UploadedNamespace{}
	return &this
}

// NewUploadedNamespaceWithDefaults instantiates a new UploadedNamespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadedNamespaceWithDefaults() *UploadedNamespace {
	this := UploadedNamespace{}
	return &this
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *UploadedNamespace) GetPath() File {
	if o == nil || isNil(o.Path) {
		var ret File
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadedNamespace) GetPathOk() (*File, bool) {
	if o == nil || isNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *UploadedNamespace) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given File and assigns it to the Path field.
func (o *UploadedNamespace) SetPath(v File) {
	o.Path = &v
}

func (o UploadedNamespace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadedNamespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableUploadedNamespace struct {
	value *UploadedNamespace
	isSet bool
}

func (v NullableUploadedNamespace) Get() *UploadedNamespace {
	return v.value
}

func (v *NullableUploadedNamespace) Set(val *UploadedNamespace) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadedNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadedNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadedNamespace(val *UploadedNamespace) *NullableUploadedNamespace {
	return &NullableUploadedNamespace{value: val, isSet: true}
}

func (v NullableUploadedNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadedNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


