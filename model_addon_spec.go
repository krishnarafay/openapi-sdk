/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the AddonSpec type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddonSpec{}

// AddonSpec specification of addon
type AddonSpec struct {
	Artifact ArtifactSpec `json:"artifact"`
	// namespace of the addon
	Namespace string `json:"namespace"`
	Sharing SharingSpec `json:"sharing"`
	// version of the addon
	Version string `json:"version"`
}

// NewAddonSpec instantiates a new AddonSpec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddonSpec(artifact ArtifactSpec, namespace string, sharing SharingSpec, version string) *AddonSpec {
	this := AddonSpec{}
	this.Artifact = artifact
	this.Namespace = namespace
	this.Sharing = sharing
	this.Version = version
	return &this
}

// NewAddonSpecWithDefaults instantiates a new AddonSpec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddonSpecWithDefaults() *AddonSpec {
	this := AddonSpec{}
	return &this
}

// GetArtifact returns the Artifact field value
func (o *AddonSpec) GetArtifact() ArtifactSpec {
	if o == nil {
		var ret ArtifactSpec
		return ret
	}

	return o.Artifact
}

// GetArtifactOk returns a tuple with the Artifact field value
// and a boolean to check if the value has been set.
func (o *AddonSpec) GetArtifactOk() (*ArtifactSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Artifact, true
}

// SetArtifact sets field value
func (o *AddonSpec) SetArtifact(v ArtifactSpec) {
	o.Artifact = v
}

// GetNamespace returns the Namespace field value
func (o *AddonSpec) GetNamespace() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value
// and a boolean to check if the value has been set.
func (o *AddonSpec) GetNamespaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Namespace, true
}

// SetNamespace sets field value
func (o *AddonSpec) SetNamespace(v string) {
	o.Namespace = v
}

// GetSharing returns the Sharing field value
func (o *AddonSpec) GetSharing() SharingSpec {
	if o == nil {
		var ret SharingSpec
		return ret
	}

	return o.Sharing
}

// GetSharingOk returns a tuple with the Sharing field value
// and a boolean to check if the value has been set.
func (o *AddonSpec) GetSharingOk() (*SharingSpec, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Sharing, true
}

// SetSharing sets field value
func (o *AddonSpec) SetSharing(v SharingSpec) {
	o.Sharing = v
}

// GetVersion returns the Version field value
func (o *AddonSpec) GetVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *AddonSpec) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *AddonSpec) SetVersion(v string) {
	o.Version = v
}

func (o AddonSpec) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddonSpec) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["artifact"] = o.Artifact
	toSerialize["namespace"] = o.Namespace
	toSerialize["sharing"] = o.Sharing
	toSerialize["version"] = o.Version
	return toSerialize, nil
}

type NullableAddonSpec struct {
	value *AddonSpec
	isSet bool
}

func (v NullableAddonSpec) Get() *AddonSpec {
	return v.value
}

func (v *NullableAddonSpec) Set(val *AddonSpec) {
	v.value = val
	v.isSet = true
}

func (v NullableAddonSpec) IsSet() bool {
	return v.isSet
}

func (v *NullableAddonSpec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddonSpec(val *AddonSpec) *NullableAddonSpec {
	return &NullableAddonSpec{value: val, isSet: true}
}

func (v NullableAddonSpec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddonSpec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


