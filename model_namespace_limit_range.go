/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the NamespaceLimitRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NamespaceLimitRange{}

// NamespaceLimitRange namespace limit range
type NamespaceLimitRange struct {
	Container *NamespaceLimitRangeConfig `json:"container,omitempty"`
	Pod *NamespaceLimitRangeConfig `json:"pod,omitempty"`
}

// NewNamespaceLimitRange instantiates a new NamespaceLimitRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceLimitRange() *NamespaceLimitRange {
	this := NamespaceLimitRange{}
	return &this
}

// NewNamespaceLimitRangeWithDefaults instantiates a new NamespaceLimitRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceLimitRangeWithDefaults() *NamespaceLimitRange {
	this := NamespaceLimitRange{}
	return &this
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *NamespaceLimitRange) GetContainer() NamespaceLimitRangeConfig {
	if o == nil || isNil(o.Container) {
		var ret NamespaceLimitRangeConfig
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceLimitRange) GetContainerOk() (*NamespaceLimitRangeConfig, bool) {
	if o == nil || isNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *NamespaceLimitRange) HasContainer() bool {
	if o != nil && !isNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given NamespaceLimitRangeConfig and assigns it to the Container field.
func (o *NamespaceLimitRange) SetContainer(v NamespaceLimitRangeConfig) {
	o.Container = &v
}

// GetPod returns the Pod field value if set, zero value otherwise.
func (o *NamespaceLimitRange) GetPod() NamespaceLimitRangeConfig {
	if o == nil || isNil(o.Pod) {
		var ret NamespaceLimitRangeConfig
		return ret
	}
	return *o.Pod
}

// GetPodOk returns a tuple with the Pod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceLimitRange) GetPodOk() (*NamespaceLimitRangeConfig, bool) {
	if o == nil || isNil(o.Pod) {
		return nil, false
	}
	return o.Pod, true
}

// HasPod returns a boolean if a field has been set.
func (o *NamespaceLimitRange) HasPod() bool {
	if o != nil && !isNil(o.Pod) {
		return true
	}

	return false
}

// SetPod gets a reference to the given NamespaceLimitRangeConfig and assigns it to the Pod field.
func (o *NamespaceLimitRange) SetPod(v NamespaceLimitRangeConfig) {
	o.Pod = &v
}

func (o NamespaceLimitRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NamespaceLimitRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !isNil(o.Pod) {
		toSerialize["pod"] = o.Pod
	}
	return toSerialize, nil
}

type NullableNamespaceLimitRange struct {
	value *NamespaceLimitRange
	isSet bool
}

func (v NullableNamespaceLimitRange) Get() *NamespaceLimitRange {
	return v.value
}

func (v *NullableNamespaceLimitRange) Set(val *NamespaceLimitRange) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceLimitRange) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceLimitRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceLimitRange(val *NamespaceLimitRange) *NullableNamespaceLimitRange {
	return &NullableNamespaceLimitRange{value: val, isSet: true}
}

func (v NullableNamespaceLimitRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceLimitRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


