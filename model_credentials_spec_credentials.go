/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
	"fmt"
)

// CredentialsSpecCredentials - struct for CredentialsSpecCredentials
type CredentialsSpecCredentials struct {
	AWSCredentialsAccessKey *AWSCredentialsAccessKey
	AWSCredentialsRole *AWSCredentialsRole
	AzureCredentials *AzureCredentials
	GCPCredentials *GCPCredentials
	MinioCredentials *MinioCredentials
	VSphereCredentials *VSphereCredentials
}

// AWSCredentialsAccessKeyAsCredentialsSpecCredentials is a convenience function that returns AWSCredentialsAccessKey wrapped in CredentialsSpecCredentials
func AWSCredentialsAccessKeyAsCredentialsSpecCredentials(v *AWSCredentialsAccessKey) CredentialsSpecCredentials {
	return CredentialsSpecCredentials{
		AWSCredentialsAccessKey: v,
	}
}

// AWSCredentialsRoleAsCredentialsSpecCredentials is a convenience function that returns AWSCredentialsRole wrapped in CredentialsSpecCredentials
func AWSCredentialsRoleAsCredentialsSpecCredentials(v *AWSCredentialsRole) CredentialsSpecCredentials {
	return CredentialsSpecCredentials{
		AWSCredentialsRole: v,
	}
}

// AzureCredentialsAsCredentialsSpecCredentials is a convenience function that returns AzureCredentials wrapped in CredentialsSpecCredentials
func AzureCredentialsAsCredentialsSpecCredentials(v *AzureCredentials) CredentialsSpecCredentials {
	return CredentialsSpecCredentials{
		AzureCredentials: v,
	}
}

// GCPCredentialsAsCredentialsSpecCredentials is a convenience function that returns GCPCredentials wrapped in CredentialsSpecCredentials
func GCPCredentialsAsCredentialsSpecCredentials(v *GCPCredentials) CredentialsSpecCredentials {
	return CredentialsSpecCredentials{
		GCPCredentials: v,
	}
}

// MinioCredentialsAsCredentialsSpecCredentials is a convenience function that returns MinioCredentials wrapped in CredentialsSpecCredentials
func MinioCredentialsAsCredentialsSpecCredentials(v *MinioCredentials) CredentialsSpecCredentials {
	return CredentialsSpecCredentials{
		MinioCredentials: v,
	}
}

// VSphereCredentialsAsCredentialsSpecCredentials is a convenience function that returns VSphereCredentials wrapped in CredentialsSpecCredentials
func VSphereCredentialsAsCredentialsSpecCredentials(v *VSphereCredentials) CredentialsSpecCredentials {
	return CredentialsSpecCredentials{
		VSphereCredentials: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CredentialsSpecCredentials) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AWSCredentialsAccessKey
	err = newStrictDecoder(data).Decode(&dst.AWSCredentialsAccessKey)
	if err == nil {
		jsonAWSCredentialsAccessKey, _ := json.Marshal(dst.AWSCredentialsAccessKey)
		if string(jsonAWSCredentialsAccessKey) == "{}" { // empty struct
			dst.AWSCredentialsAccessKey = nil
		} else {
			match++
		}
	} else {
		dst.AWSCredentialsAccessKey = nil
	}

	// try to unmarshal data into AWSCredentialsRole
	err = newStrictDecoder(data).Decode(&dst.AWSCredentialsRole)
	if err == nil {
		jsonAWSCredentialsRole, _ := json.Marshal(dst.AWSCredentialsRole)
		if string(jsonAWSCredentialsRole) == "{}" { // empty struct
			dst.AWSCredentialsRole = nil
		} else {
			match++
		}
	} else {
		dst.AWSCredentialsRole = nil
	}

	// try to unmarshal data into AzureCredentials
	err = newStrictDecoder(data).Decode(&dst.AzureCredentials)
	if err == nil {
		jsonAzureCredentials, _ := json.Marshal(dst.AzureCredentials)
		if string(jsonAzureCredentials) == "{}" { // empty struct
			dst.AzureCredentials = nil
		} else {
			match++
		}
	} else {
		dst.AzureCredentials = nil
	}

	// try to unmarshal data into GCPCredentials
	err = newStrictDecoder(data).Decode(&dst.GCPCredentials)
	if err == nil {
		jsonGCPCredentials, _ := json.Marshal(dst.GCPCredentials)
		if string(jsonGCPCredentials) == "{}" { // empty struct
			dst.GCPCredentials = nil
		} else {
			match++
		}
	} else {
		dst.GCPCredentials = nil
	}

	// try to unmarshal data into MinioCredentials
	err = newStrictDecoder(data).Decode(&dst.MinioCredentials)
	if err == nil {
		jsonMinioCredentials, _ := json.Marshal(dst.MinioCredentials)
		if string(jsonMinioCredentials) == "{}" { // empty struct
			dst.MinioCredentials = nil
		} else {
			match++
		}
	} else {
		dst.MinioCredentials = nil
	}

	// try to unmarshal data into VSphereCredentials
	err = newStrictDecoder(data).Decode(&dst.VSphereCredentials)
	if err == nil {
		jsonVSphereCredentials, _ := json.Marshal(dst.VSphereCredentials)
		if string(jsonVSphereCredentials) == "{}" { // empty struct
			dst.VSphereCredentials = nil
		} else {
			match++
		}
	} else {
		dst.VSphereCredentials = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AWSCredentialsAccessKey = nil
		dst.AWSCredentialsRole = nil
		dst.AzureCredentials = nil
		dst.GCPCredentials = nil
		dst.MinioCredentials = nil
		dst.VSphereCredentials = nil

		return fmt.Errorf("data matches more than one schema in oneOf(CredentialsSpecCredentials)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(CredentialsSpecCredentials)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CredentialsSpecCredentials) MarshalJSON() ([]byte, error) {
	if src.AWSCredentialsAccessKey != nil {
		return json.Marshal(&src.AWSCredentialsAccessKey)
	}

	if src.AWSCredentialsRole != nil {
		return json.Marshal(&src.AWSCredentialsRole)
	}

	if src.AzureCredentials != nil {
		return json.Marshal(&src.AzureCredentials)
	}

	if src.GCPCredentials != nil {
		return json.Marshal(&src.GCPCredentials)
	}

	if src.MinioCredentials != nil {
		return json.Marshal(&src.MinioCredentials)
	}

	if src.VSphereCredentials != nil {
		return json.Marshal(&src.VSphereCredentials)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CredentialsSpecCredentials) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AWSCredentialsAccessKey != nil {
		return obj.AWSCredentialsAccessKey
	}

	if obj.AWSCredentialsRole != nil {
		return obj.AWSCredentialsRole
	}

	if obj.AzureCredentials != nil {
		return obj.AzureCredentials
	}

	if obj.GCPCredentials != nil {
		return obj.GCPCredentials
	}

	if obj.MinioCredentials != nil {
		return obj.MinioCredentials
	}

	if obj.VSphereCredentials != nil {
		return obj.VSphereCredentials
	}

	// all schemas are nil
	return nil
}

type NullableCredentialsSpecCredentials struct {
	value *CredentialsSpecCredentials
	isSet bool
}

func (v NullableCredentialsSpecCredentials) Get() *CredentialsSpecCredentials {
	return v.value
}

func (v *NullableCredentialsSpecCredentials) Set(val *CredentialsSpecCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableCredentialsSpecCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableCredentialsSpecCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCredentialsSpecCredentials(val *CredentialsSpecCredentials) *NullableCredentialsSpecCredentials {
	return &NullableCredentialsSpecCredentials{value: val, isSet: true}
}

func (v NullableCredentialsSpecCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCredentialsSpecCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


