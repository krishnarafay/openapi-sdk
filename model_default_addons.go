/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the DefaultAddons type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DefaultAddons{}

// DefaultAddons default addon configuration
type DefaultAddons struct {
	CsiSecretStoreConfig *CsiSecretStoreConfig `json:"csiSecretStoreConfig,omitempty"`
	// enable csi secret store
	EnableCsiSecretStore *bool `json:"enableCsiSecretStore,omitempty"`
	// enable default ingress
	EnableIngress *bool `json:"enableIngress,omitempty"`
	// enable default logging
	EnableLogging *bool `json:"enableLogging,omitempty"`
	// enable default monitoring
	EnableMonitoring *bool `json:"enableMonitoring,omitempty"`
	// enable rook ceph storage
	EnableRookCeph *bool `json:"enableRookCeph,omitempty"`
	// enable virtual machine workloads
	EnableVM *bool `json:"enableVM,omitempty"`
	Monitoring *MonitoringConfig `json:"monitoring,omitempty"`
}

// NewDefaultAddons instantiates a new DefaultAddons object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDefaultAddons() *DefaultAddons {
	this := DefaultAddons{}
	return &this
}

// NewDefaultAddonsWithDefaults instantiates a new DefaultAddons object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDefaultAddonsWithDefaults() *DefaultAddons {
	this := DefaultAddons{}
	return &this
}

// GetCsiSecretStoreConfig returns the CsiSecretStoreConfig field value if set, zero value otherwise.
func (o *DefaultAddons) GetCsiSecretStoreConfig() CsiSecretStoreConfig {
	if o == nil || isNil(o.CsiSecretStoreConfig) {
		var ret CsiSecretStoreConfig
		return ret
	}
	return *o.CsiSecretStoreConfig
}

// GetCsiSecretStoreConfigOk returns a tuple with the CsiSecretStoreConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetCsiSecretStoreConfigOk() (*CsiSecretStoreConfig, bool) {
	if o == nil || isNil(o.CsiSecretStoreConfig) {
		return nil, false
	}
	return o.CsiSecretStoreConfig, true
}

// HasCsiSecretStoreConfig returns a boolean if a field has been set.
func (o *DefaultAddons) HasCsiSecretStoreConfig() bool {
	if o != nil && !isNil(o.CsiSecretStoreConfig) {
		return true
	}

	return false
}

// SetCsiSecretStoreConfig gets a reference to the given CsiSecretStoreConfig and assigns it to the CsiSecretStoreConfig field.
func (o *DefaultAddons) SetCsiSecretStoreConfig(v CsiSecretStoreConfig) {
	o.CsiSecretStoreConfig = &v
}

// GetEnableCsiSecretStore returns the EnableCsiSecretStore field value if set, zero value otherwise.
func (o *DefaultAddons) GetEnableCsiSecretStore() bool {
	if o == nil || isNil(o.EnableCsiSecretStore) {
		var ret bool
		return ret
	}
	return *o.EnableCsiSecretStore
}

// GetEnableCsiSecretStoreOk returns a tuple with the EnableCsiSecretStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetEnableCsiSecretStoreOk() (*bool, bool) {
	if o == nil || isNil(o.EnableCsiSecretStore) {
		return nil, false
	}
	return o.EnableCsiSecretStore, true
}

// HasEnableCsiSecretStore returns a boolean if a field has been set.
func (o *DefaultAddons) HasEnableCsiSecretStore() bool {
	if o != nil && !isNil(o.EnableCsiSecretStore) {
		return true
	}

	return false
}

// SetEnableCsiSecretStore gets a reference to the given bool and assigns it to the EnableCsiSecretStore field.
func (o *DefaultAddons) SetEnableCsiSecretStore(v bool) {
	o.EnableCsiSecretStore = &v
}

// GetEnableIngress returns the EnableIngress field value if set, zero value otherwise.
func (o *DefaultAddons) GetEnableIngress() bool {
	if o == nil || isNil(o.EnableIngress) {
		var ret bool
		return ret
	}
	return *o.EnableIngress
}

// GetEnableIngressOk returns a tuple with the EnableIngress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetEnableIngressOk() (*bool, bool) {
	if o == nil || isNil(o.EnableIngress) {
		return nil, false
	}
	return o.EnableIngress, true
}

// HasEnableIngress returns a boolean if a field has been set.
func (o *DefaultAddons) HasEnableIngress() bool {
	if o != nil && !isNil(o.EnableIngress) {
		return true
	}

	return false
}

// SetEnableIngress gets a reference to the given bool and assigns it to the EnableIngress field.
func (o *DefaultAddons) SetEnableIngress(v bool) {
	o.EnableIngress = &v
}

// GetEnableLogging returns the EnableLogging field value if set, zero value otherwise.
func (o *DefaultAddons) GetEnableLogging() bool {
	if o == nil || isNil(o.EnableLogging) {
		var ret bool
		return ret
	}
	return *o.EnableLogging
}

// GetEnableLoggingOk returns a tuple with the EnableLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetEnableLoggingOk() (*bool, bool) {
	if o == nil || isNil(o.EnableLogging) {
		return nil, false
	}
	return o.EnableLogging, true
}

// HasEnableLogging returns a boolean if a field has been set.
func (o *DefaultAddons) HasEnableLogging() bool {
	if o != nil && !isNil(o.EnableLogging) {
		return true
	}

	return false
}

// SetEnableLogging gets a reference to the given bool and assigns it to the EnableLogging field.
func (o *DefaultAddons) SetEnableLogging(v bool) {
	o.EnableLogging = &v
}

// GetEnableMonitoring returns the EnableMonitoring field value if set, zero value otherwise.
func (o *DefaultAddons) GetEnableMonitoring() bool {
	if o == nil || isNil(o.EnableMonitoring) {
		var ret bool
		return ret
	}
	return *o.EnableMonitoring
}

// GetEnableMonitoringOk returns a tuple with the EnableMonitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetEnableMonitoringOk() (*bool, bool) {
	if o == nil || isNil(o.EnableMonitoring) {
		return nil, false
	}
	return o.EnableMonitoring, true
}

// HasEnableMonitoring returns a boolean if a field has been set.
func (o *DefaultAddons) HasEnableMonitoring() bool {
	if o != nil && !isNil(o.EnableMonitoring) {
		return true
	}

	return false
}

// SetEnableMonitoring gets a reference to the given bool and assigns it to the EnableMonitoring field.
func (o *DefaultAddons) SetEnableMonitoring(v bool) {
	o.EnableMonitoring = &v
}

// GetEnableRookCeph returns the EnableRookCeph field value if set, zero value otherwise.
func (o *DefaultAddons) GetEnableRookCeph() bool {
	if o == nil || isNil(o.EnableRookCeph) {
		var ret bool
		return ret
	}
	return *o.EnableRookCeph
}

// GetEnableRookCephOk returns a tuple with the EnableRookCeph field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetEnableRookCephOk() (*bool, bool) {
	if o == nil || isNil(o.EnableRookCeph) {
		return nil, false
	}
	return o.EnableRookCeph, true
}

// HasEnableRookCeph returns a boolean if a field has been set.
func (o *DefaultAddons) HasEnableRookCeph() bool {
	if o != nil && !isNil(o.EnableRookCeph) {
		return true
	}

	return false
}

// SetEnableRookCeph gets a reference to the given bool and assigns it to the EnableRookCeph field.
func (o *DefaultAddons) SetEnableRookCeph(v bool) {
	o.EnableRookCeph = &v
}

// GetEnableVM returns the EnableVM field value if set, zero value otherwise.
func (o *DefaultAddons) GetEnableVM() bool {
	if o == nil || isNil(o.EnableVM) {
		var ret bool
		return ret
	}
	return *o.EnableVM
}

// GetEnableVMOk returns a tuple with the EnableVM field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetEnableVMOk() (*bool, bool) {
	if o == nil || isNil(o.EnableVM) {
		return nil, false
	}
	return o.EnableVM, true
}

// HasEnableVM returns a boolean if a field has been set.
func (o *DefaultAddons) HasEnableVM() bool {
	if o != nil && !isNil(o.EnableVM) {
		return true
	}

	return false
}

// SetEnableVM gets a reference to the given bool and assigns it to the EnableVM field.
func (o *DefaultAddons) SetEnableVM(v bool) {
	o.EnableVM = &v
}

// GetMonitoring returns the Monitoring field value if set, zero value otherwise.
func (o *DefaultAddons) GetMonitoring() MonitoringConfig {
	if o == nil || isNil(o.Monitoring) {
		var ret MonitoringConfig
		return ret
	}
	return *o.Monitoring
}

// GetMonitoringOk returns a tuple with the Monitoring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DefaultAddons) GetMonitoringOk() (*MonitoringConfig, bool) {
	if o == nil || isNil(o.Monitoring) {
		return nil, false
	}
	return o.Monitoring, true
}

// HasMonitoring returns a boolean if a field has been set.
func (o *DefaultAddons) HasMonitoring() bool {
	if o != nil && !isNil(o.Monitoring) {
		return true
	}

	return false
}

// SetMonitoring gets a reference to the given MonitoringConfig and assigns it to the Monitoring field.
func (o *DefaultAddons) SetMonitoring(v MonitoringConfig) {
	o.Monitoring = &v
}

func (o DefaultAddons) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DefaultAddons) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.CsiSecretStoreConfig) {
		toSerialize["csiSecretStoreConfig"] = o.CsiSecretStoreConfig
	}
	if !isNil(o.EnableCsiSecretStore) {
		toSerialize["enableCsiSecretStore"] = o.EnableCsiSecretStore
	}
	if !isNil(o.EnableIngress) {
		toSerialize["enableIngress"] = o.EnableIngress
	}
	if !isNil(o.EnableLogging) {
		toSerialize["enableLogging"] = o.EnableLogging
	}
	if !isNil(o.EnableMonitoring) {
		toSerialize["enableMonitoring"] = o.EnableMonitoring
	}
	if !isNil(o.EnableRookCeph) {
		toSerialize["enableRookCeph"] = o.EnableRookCeph
	}
	if !isNil(o.EnableVM) {
		toSerialize["enableVM"] = o.EnableVM
	}
	if !isNil(o.Monitoring) {
		toSerialize["monitoring"] = o.Monitoring
	}
	return toSerialize, nil
}

type NullableDefaultAddons struct {
	value *DefaultAddons
	isSet bool
}

func (v NullableDefaultAddons) Get() *DefaultAddons {
	return v.value
}

func (v *NullableDefaultAddons) Set(val *DefaultAddons) {
	v.value = val
	v.isSet = true
}

func (v NullableDefaultAddons) IsSet() bool {
	return v.isSet
}

func (v *NullableDefaultAddons) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDefaultAddons(val *DefaultAddons) *NullableDefaultAddons {
	return &NullableDefaultAddons{value: val, isSet: true}
}

func (v NullableDefaultAddons) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDefaultAddons) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


