/*
Kubernetes Operations APIs

Kubernetes Operations APIs

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package rafaysdkgov3

import (
	"encoding/json"
)

// checks if the CsiSecretStoreConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CsiSecretStoreConfig{}

// CsiSecretStoreConfig Secret Store CSI Driver Customization details
type CsiSecretStoreConfig struct {
	EnableSecretRotation *bool `json:"enableSecretRotation,omitempty"`
	Providers *SecretStoreProvider `json:"providers,omitempty"`
	RotationPollInterval *string `json:"rotationPollInterval,omitempty"`
	SyncSecrets *bool `json:"syncSecrets,omitempty"`
}

// NewCsiSecretStoreConfig instantiates a new CsiSecretStoreConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCsiSecretStoreConfig() *CsiSecretStoreConfig {
	this := CsiSecretStoreConfig{}
	return &this
}

// NewCsiSecretStoreConfigWithDefaults instantiates a new CsiSecretStoreConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCsiSecretStoreConfigWithDefaults() *CsiSecretStoreConfig {
	this := CsiSecretStoreConfig{}
	return &this
}

// GetEnableSecretRotation returns the EnableSecretRotation field value if set, zero value otherwise.
func (o *CsiSecretStoreConfig) GetEnableSecretRotation() bool {
	if o == nil || isNil(o.EnableSecretRotation) {
		var ret bool
		return ret
	}
	return *o.EnableSecretRotation
}

// GetEnableSecretRotationOk returns a tuple with the EnableSecretRotation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsiSecretStoreConfig) GetEnableSecretRotationOk() (*bool, bool) {
	if o == nil || isNil(o.EnableSecretRotation) {
		return nil, false
	}
	return o.EnableSecretRotation, true
}

// HasEnableSecretRotation returns a boolean if a field has been set.
func (o *CsiSecretStoreConfig) HasEnableSecretRotation() bool {
	if o != nil && !isNil(o.EnableSecretRotation) {
		return true
	}

	return false
}

// SetEnableSecretRotation gets a reference to the given bool and assigns it to the EnableSecretRotation field.
func (o *CsiSecretStoreConfig) SetEnableSecretRotation(v bool) {
	o.EnableSecretRotation = &v
}

// GetProviders returns the Providers field value if set, zero value otherwise.
func (o *CsiSecretStoreConfig) GetProviders() SecretStoreProvider {
	if o == nil || isNil(o.Providers) {
		var ret SecretStoreProvider
		return ret
	}
	return *o.Providers
}

// GetProvidersOk returns a tuple with the Providers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsiSecretStoreConfig) GetProvidersOk() (*SecretStoreProvider, bool) {
	if o == nil || isNil(o.Providers) {
		return nil, false
	}
	return o.Providers, true
}

// HasProviders returns a boolean if a field has been set.
func (o *CsiSecretStoreConfig) HasProviders() bool {
	if o != nil && !isNil(o.Providers) {
		return true
	}

	return false
}

// SetProviders gets a reference to the given SecretStoreProvider and assigns it to the Providers field.
func (o *CsiSecretStoreConfig) SetProviders(v SecretStoreProvider) {
	o.Providers = &v
}

// GetRotationPollInterval returns the RotationPollInterval field value if set, zero value otherwise.
func (o *CsiSecretStoreConfig) GetRotationPollInterval() string {
	if o == nil || isNil(o.RotationPollInterval) {
		var ret string
		return ret
	}
	return *o.RotationPollInterval
}

// GetRotationPollIntervalOk returns a tuple with the RotationPollInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsiSecretStoreConfig) GetRotationPollIntervalOk() (*string, bool) {
	if o == nil || isNil(o.RotationPollInterval) {
		return nil, false
	}
	return o.RotationPollInterval, true
}

// HasRotationPollInterval returns a boolean if a field has been set.
func (o *CsiSecretStoreConfig) HasRotationPollInterval() bool {
	if o != nil && !isNil(o.RotationPollInterval) {
		return true
	}

	return false
}

// SetRotationPollInterval gets a reference to the given string and assigns it to the RotationPollInterval field.
func (o *CsiSecretStoreConfig) SetRotationPollInterval(v string) {
	o.RotationPollInterval = &v
}

// GetSyncSecrets returns the SyncSecrets field value if set, zero value otherwise.
func (o *CsiSecretStoreConfig) GetSyncSecrets() bool {
	if o == nil || isNil(o.SyncSecrets) {
		var ret bool
		return ret
	}
	return *o.SyncSecrets
}

// GetSyncSecretsOk returns a tuple with the SyncSecrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CsiSecretStoreConfig) GetSyncSecretsOk() (*bool, bool) {
	if o == nil || isNil(o.SyncSecrets) {
		return nil, false
	}
	return o.SyncSecrets, true
}

// HasSyncSecrets returns a boolean if a field has been set.
func (o *CsiSecretStoreConfig) HasSyncSecrets() bool {
	if o != nil && !isNil(o.SyncSecrets) {
		return true
	}

	return false
}

// SetSyncSecrets gets a reference to the given bool and assigns it to the SyncSecrets field.
func (o *CsiSecretStoreConfig) SetSyncSecrets(v bool) {
	o.SyncSecrets = &v
}

func (o CsiSecretStoreConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CsiSecretStoreConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EnableSecretRotation) {
		toSerialize["enableSecretRotation"] = o.EnableSecretRotation
	}
	if !isNil(o.Providers) {
		toSerialize["providers"] = o.Providers
	}
	if !isNil(o.RotationPollInterval) {
		toSerialize["rotationPollInterval"] = o.RotationPollInterval
	}
	if !isNil(o.SyncSecrets) {
		toSerialize["syncSecrets"] = o.SyncSecrets
	}
	return toSerialize, nil
}

type NullableCsiSecretStoreConfig struct {
	value *CsiSecretStoreConfig
	isSet bool
}

func (v NullableCsiSecretStoreConfig) Get() *CsiSecretStoreConfig {
	return v.value
}

func (v *NullableCsiSecretStoreConfig) Set(val *CsiSecretStoreConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCsiSecretStoreConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCsiSecretStoreConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCsiSecretStoreConfig(val *CsiSecretStoreConfig) *NullableCsiSecretStoreConfig {
	return &NullableCsiSecretStoreConfig{value: val, isSet: true}
}

func (v NullableCsiSecretStoreConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCsiSecretStoreConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


